/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "maxY": 25745.0, "series": [{"data": [[0.0, 374.0], [0.1, 565.0], [0.2, 589.0], [0.3, 614.0], [0.4, 633.0], [0.5, 656.0], [0.6, 686.0], [0.7, 718.0], [0.8, 735.0], [0.9, 748.0], [1.0, 773.0], [1.1, 792.0], [1.2, 811.0], [1.3, 826.0], [1.4, 844.0], [1.5, 869.0], [1.6, 892.0], [1.7, 935.0], [1.8, 961.0], [1.9, 1004.0], [2.0, 1046.0], [2.1, 1074.0], [2.2, 1107.0], [2.3, 1162.0], [2.4, 1196.0], [2.5, 1235.0], [2.6, 1282.0], [2.7, 1318.0], [2.8, 1357.0], [2.9, 1382.0], [3.0, 1417.0], [3.1, 1452.0], [3.2, 1482.0], [3.3, 1527.0], [3.4, 1560.0], [3.5, 1611.0], [3.6, 1681.0], [3.7, 1745.0], [3.8, 1815.0], [3.9, 1850.0], [4.0, 1900.0], [4.1, 1970.0], [4.2, 2041.0], [4.3, 2099.0], [4.4, 2157.0], [4.5, 2240.0], [4.6, 2306.0], [4.7, 2438.0], [4.8, 2539.0], [4.9, 2646.0], [5.0, 2739.0], [5.1, 2878.0], [5.2, 3012.0], [5.3, 3107.0], [5.4, 3179.0], [5.5, 3261.0], [5.6, 3320.0], [5.7, 3374.0], [5.8, 3476.0], [5.9, 3540.0], [6.0, 3596.0], [6.1, 3642.0], [6.2, 3681.0], [6.3, 3746.0], [6.4, 3798.0], [6.5, 3846.0], [6.6, 3888.0], [6.7, 3936.0], [6.8, 3973.0], [6.9, 4032.0], [7.0, 4064.0], [7.1, 4090.0], [7.2, 4121.0], [7.3, 4155.0], [7.4, 4178.0], [7.5, 4211.0], [7.6, 4234.0], [7.7, 4251.0], [7.8, 4271.0], [7.9, 4294.0], [8.0, 4325.0], [8.1, 4341.0], [8.2, 4364.0], [8.3, 4379.0], [8.4, 4401.0], [8.5, 4416.0], [8.6, 4432.0], [8.7, 4457.0], [8.8, 4478.0], [8.9, 4497.0], [9.0, 4512.0], [9.1, 4529.0], [9.2, 4546.0], [9.3, 4556.0], [9.4, 4576.0], [9.5, 4599.0], [9.6, 4611.0], [9.7, 4627.0], [9.8, 4645.0], [9.9, 4656.0], [10.0, 4671.0], [10.1, 4684.0], [10.2, 4702.0], [10.3, 4713.0], [10.4, 4730.0], [10.5, 4742.0], [10.6, 4764.0], [10.7, 4781.0], [10.8, 4793.0], [10.9, 4799.0], [11.0, 4810.0], [11.1, 4820.0], [11.2, 4827.0], [11.3, 4841.0], [11.4, 4849.0], [11.5, 4860.0], [11.6, 4869.0], [11.7, 4875.0], [11.8, 4882.0], [11.9, 4887.0], [12.0, 4895.0], [12.1, 4904.0], [12.2, 4912.0], [12.3, 4920.0], [12.4, 4930.0], [12.5, 4936.0], [12.6, 4944.0], [12.7, 4952.0], [12.8, 4961.0], [12.9, 4967.0], [13.0, 4975.0], [13.1, 4983.0], [13.2, 4992.0], [13.3, 5000.0], [13.4, 5005.0], [13.5, 5013.0], [13.6, 5020.0], [13.7, 5025.0], [13.8, 5032.0], [13.9, 5036.0], [14.0, 5044.0], [14.1, 5050.0], [14.2, 5060.0], [14.3, 5067.0], [14.4, 5072.0], [14.5, 5077.0], [14.6, 5081.0], [14.7, 5087.0], [14.8, 5096.0], [14.9, 5102.0], [15.0, 5107.0], [15.1, 5111.0], [15.2, 5117.0], [15.3, 5122.0], [15.4, 5126.0], [15.5, 5132.0], [15.6, 5141.0], [15.7, 5151.0], [15.8, 5154.0], [15.9, 5161.0], [16.0, 5166.0], [16.1, 5172.0], [16.2, 5178.0], [16.3, 5183.0], [16.4, 5189.0], [16.5, 5198.0], [16.6, 5202.0], [16.7, 5207.0], [16.8, 5215.0], [16.9, 5220.0], [17.0, 5226.0], [17.1, 5232.0], [17.2, 5235.0], [17.3, 5238.0], [17.4, 5247.0], [17.5, 5249.0], [17.6, 5254.0], [17.7, 5257.0], [17.8, 5263.0], [17.9, 5268.0], [18.0, 5276.0], [18.1, 5281.0], [18.2, 5285.0], [18.3, 5289.0], [18.4, 5294.0], [18.5, 5297.0], [18.6, 5300.0], [18.7, 5304.0], [18.8, 5310.0], [18.9, 5314.0], [19.0, 5320.0], [19.1, 5326.0], [19.2, 5330.0], [19.3, 5334.0], [19.4, 5339.0], [19.5, 5343.0], [19.6, 5348.0], [19.7, 5353.0], [19.8, 5356.0], [19.9, 5361.0], [20.0, 5367.0], [20.1, 5374.0], [20.2, 5381.0], [20.3, 5386.0], [20.4, 5391.0], [20.5, 5394.0], [20.6, 5400.0], [20.7, 5404.0], [20.8, 5408.0], [20.9, 5412.0], [21.0, 5417.0], [21.1, 5421.0], [21.2, 5426.0], [21.3, 5430.0], [21.4, 5435.0], [21.5, 5440.0], [21.6, 5445.0], [21.7, 5449.0], [21.8, 5452.0], [21.9, 5456.0], [22.0, 5460.0], [22.1, 5463.0], [22.2, 5468.0], [22.3, 5471.0], [22.4, 5476.0], [22.5, 5481.0], [22.6, 5486.0], [22.7, 5490.0], [22.8, 5493.0], [22.9, 5496.0], [23.0, 5499.0], [23.1, 5504.0], [23.2, 5507.0], [23.3, 5510.0], [23.4, 5514.0], [23.5, 5516.0], [23.6, 5519.0], [23.7, 5524.0], [23.8, 5527.0], [23.9, 5530.0], [24.0, 5532.0], [24.1, 5537.0], [24.2, 5542.0], [24.3, 5546.0], [24.4, 5549.0], [24.5, 5553.0], [24.6, 5556.0], [24.7, 5561.0], [24.8, 5563.0], [24.9, 5568.0], [25.0, 5571.0], [25.1, 5574.0], [25.2, 5578.0], [25.3, 5584.0], [25.4, 5588.0], [25.5, 5592.0], [25.6, 5594.0], [25.7, 5599.0], [25.8, 5602.0], [25.9, 5606.0], [26.0, 5610.0], [26.1, 5614.0], [26.2, 5616.0], [26.3, 5620.0], [26.4, 5626.0], [26.5, 5630.0], [26.6, 5632.0], [26.7, 5637.0], [26.8, 5640.0], [26.9, 5643.0], [27.0, 5648.0], [27.1, 5651.0], [27.2, 5655.0], [27.3, 5660.0], [27.4, 5663.0], [27.5, 5667.0], [27.6, 5670.0], [27.7, 5675.0], [27.8, 5677.0], [27.9, 5681.0], [28.0, 5684.0], [28.1, 5688.0], [28.2, 5690.0], [28.3, 5694.0], [28.4, 5695.0], [28.5, 5700.0], [28.6, 5704.0], [28.7, 5707.0], [28.8, 5710.0], [28.9, 5715.0], [29.0, 5720.0], [29.1, 5722.0], [29.2, 5729.0], [29.3, 5732.0], [29.4, 5737.0], [29.5, 5739.0], [29.6, 5742.0], [29.7, 5744.0], [29.8, 5747.0], [29.9, 5750.0], [30.0, 5755.0], [30.1, 5758.0], [30.2, 5761.0], [30.3, 5766.0], [30.4, 5769.0], [30.5, 5773.0], [30.6, 5777.0], [30.7, 5780.0], [30.8, 5784.0], [30.9, 5786.0], [31.0, 5789.0], [31.1, 5792.0], [31.2, 5795.0], [31.3, 5798.0], [31.4, 5802.0], [31.5, 5806.0], [31.6, 5810.0], [31.7, 5813.0], [31.8, 5817.0], [31.9, 5821.0], [32.0, 5824.0], [32.1, 5829.0], [32.2, 5831.0], [32.3, 5835.0], [32.4, 5837.0], [32.5, 5840.0], [32.6, 5844.0], [32.7, 5849.0], [32.8, 5851.0], [32.9, 5854.0], [33.0, 5859.0], [33.1, 5862.0], [33.2, 5866.0], [33.3, 5870.0], [33.4, 5873.0], [33.5, 5877.0], [33.6, 5880.0], [33.7, 5884.0], [33.8, 5888.0], [33.9, 5890.0], [34.0, 5895.0], [34.1, 5898.0], [34.2, 5902.0], [34.3, 5904.0], [34.4, 5907.0], [34.5, 5910.0], [34.6, 5914.0], [34.7, 5916.0], [34.8, 5920.0], [34.9, 5922.0], [35.0, 5924.0], [35.1, 5926.0], [35.2, 5929.0], [35.3, 5934.0], [35.4, 5937.0], [35.5, 5939.0], [35.6, 5943.0], [35.7, 5945.0], [35.8, 5949.0], [35.9, 5951.0], [36.0, 5955.0], [36.1, 5960.0], [36.2, 5963.0], [36.3, 5965.0], [36.4, 5969.0], [36.5, 5972.0], [36.6, 5974.0], [36.7, 5978.0], [36.8, 5980.0], [36.9, 5983.0], [37.0, 5986.0], [37.1, 5991.0], [37.2, 5992.0], [37.3, 5995.0], [37.4, 5999.0], [37.5, 6004.0], [37.6, 6008.0], [37.7, 6011.0], [37.8, 6013.0], [37.9, 6018.0], [38.0, 6022.0], [38.1, 6025.0], [38.2, 6027.0], [38.3, 6029.0], [38.4, 6032.0], [38.5, 6034.0], [38.6, 6037.0], [38.7, 6041.0], [38.8, 6043.0], [38.9, 6048.0], [39.0, 6051.0], [39.1, 6054.0], [39.2, 6055.0], [39.3, 6058.0], [39.4, 6061.0], [39.5, 6065.0], [39.6, 6068.0], [39.7, 6069.0], [39.8, 6073.0], [39.9, 6076.0], [40.0, 6079.0], [40.1, 6084.0], [40.2, 6086.0], [40.3, 6089.0], [40.4, 6091.0], [40.5, 6095.0], [40.6, 6098.0], [40.7, 6101.0], [40.8, 6103.0], [40.9, 6106.0], [41.0, 6108.0], [41.1, 6112.0], [41.2, 6115.0], [41.3, 6117.0], [41.4, 6120.0], [41.5, 6122.0], [41.6, 6125.0], [41.7, 6127.0], [41.8, 6129.0], [41.9, 6131.0], [42.0, 6134.0], [42.1, 6136.0], [42.2, 6140.0], [42.3, 6142.0], [42.4, 6145.0], [42.5, 6148.0], [42.6, 6150.0], [42.7, 6153.0], [42.8, 6155.0], [42.9, 6158.0], [43.0, 6160.0], [43.1, 6165.0], [43.2, 6168.0], [43.3, 6170.0], [43.4, 6172.0], [43.5, 6175.0], [43.6, 6177.0], [43.7, 6181.0], [43.8, 6184.0], [43.9, 6188.0], [44.0, 6191.0], [44.1, 6194.0], [44.2, 6198.0], [44.3, 6200.0], [44.4, 6203.0], [44.5, 6205.0], [44.6, 6207.0], [44.7, 6209.0], [44.8, 6213.0], [44.9, 6217.0], [45.0, 6218.0], [45.1, 6221.0], [45.2, 6223.0], [45.3, 6226.0], [45.4, 6229.0], [45.5, 6232.0], [45.6, 6234.0], [45.7, 6239.0], [45.8, 6241.0], [45.9, 6243.0], [46.0, 6245.0], [46.1, 6248.0], [46.2, 6251.0], [46.3, 6253.0], [46.4, 6256.0], [46.5, 6260.0], [46.6, 6264.0], [46.7, 6267.0], [46.8, 6271.0], [46.9, 6274.0], [47.0, 6277.0], [47.1, 6281.0], [47.2, 6284.0], [47.3, 6287.0], [47.4, 6291.0], [47.5, 6293.0], [47.6, 6296.0], [47.7, 6298.0], [47.8, 6302.0], [47.9, 6305.0], [48.0, 6307.0], [48.1, 6310.0], [48.2, 6311.0], [48.3, 6313.0], [48.4, 6315.0], [48.5, 6318.0], [48.6, 6320.0], [48.7, 6323.0], [48.8, 6327.0], [48.9, 6330.0], [49.0, 6334.0], [49.1, 6337.0], [49.2, 6340.0], [49.3, 6342.0], [49.4, 6345.0], [49.5, 6347.0], [49.6, 6349.0], [49.7, 6352.0], [49.8, 6355.0], [49.9, 6358.0], [50.0, 6361.0], [50.1, 6364.0], [50.2, 6367.0], [50.3, 6369.0], [50.4, 6373.0], [50.5, 6375.0], [50.6, 6378.0], [50.7, 6380.0], [50.8, 6384.0], [50.9, 6386.0], [51.0, 6390.0], [51.1, 6392.0], [51.2, 6394.0], [51.3, 6397.0], [51.4, 6401.0], [51.5, 6404.0], [51.6, 6407.0], [51.7, 6412.0], [51.8, 6415.0], [51.9, 6417.0], [52.0, 6421.0], [52.1, 6426.0], [52.2, 6428.0], [52.3, 6430.0], [52.4, 6434.0], [52.5, 6437.0], [52.6, 6441.0], [52.7, 6443.0], [52.8, 6446.0], [52.9, 6448.0], [53.0, 6453.0], [53.1, 6457.0], [53.2, 6458.0], [53.3, 6462.0], [53.4, 6464.0], [53.5, 6468.0], [53.6, 6471.0], [53.7, 6473.0], [53.8, 6477.0], [53.9, 6481.0], [54.0, 6484.0], [54.1, 6486.0], [54.2, 6490.0], [54.3, 6493.0], [54.4, 6496.0], [54.5, 6499.0], [54.6, 6502.0], [54.7, 6505.0], [54.8, 6508.0], [54.9, 6509.0], [55.0, 6513.0], [55.1, 6515.0], [55.2, 6518.0], [55.3, 6520.0], [55.4, 6523.0], [55.5, 6525.0], [55.6, 6526.0], [55.7, 6529.0], [55.8, 6531.0], [55.9, 6536.0], [56.0, 6538.0], [56.1, 6541.0], [56.2, 6544.0], [56.3, 6548.0], [56.4, 6549.0], [56.5, 6551.0], [56.6, 6554.0], [56.7, 6558.0], [56.8, 6560.0], [56.9, 6563.0], [57.0, 6565.0], [57.1, 6567.0], [57.2, 6571.0], [57.3, 6574.0], [57.4, 6579.0], [57.5, 6582.0], [57.6, 6585.0], [57.7, 6588.0], [57.8, 6590.0], [57.9, 6592.0], [58.0, 6594.0], [58.1, 6599.0], [58.2, 6602.0], [58.3, 6606.0], [58.4, 6610.0], [58.5, 6614.0], [58.6, 6617.0], [58.7, 6620.0], [58.8, 6624.0], [58.9, 6627.0], [59.0, 6630.0], [59.1, 6634.0], [59.2, 6638.0], [59.3, 6641.0], [59.4, 6645.0], [59.5, 6649.0], [59.6, 6652.0], [59.7, 6656.0], [59.8, 6658.0], [59.9, 6661.0], [60.0, 6665.0], [60.1, 6667.0], [60.2, 6669.0], [60.3, 6672.0], [60.4, 6674.0], [60.5, 6678.0], [60.6, 6680.0], [60.7, 6683.0], [60.8, 6685.0], [60.9, 6689.0], [61.0, 6691.0], [61.1, 6694.0], [61.2, 6696.0], [61.3, 6699.0], [61.4, 6704.0], [61.5, 6708.0], [61.6, 6713.0], [61.7, 6716.0], [61.8, 6718.0], [61.9, 6721.0], [62.0, 6725.0], [62.1, 6728.0], [62.2, 6732.0], [62.3, 6735.0], [62.4, 6739.0], [62.5, 6742.0], [62.6, 6744.0], [62.7, 6747.0], [62.8, 6749.0], [62.9, 6753.0], [63.0, 6755.0], [63.1, 6759.0], [63.2, 6763.0], [63.3, 6767.0], [63.4, 6770.0], [63.5, 6774.0], [63.6, 6778.0], [63.7, 6779.0], [63.8, 6782.0], [63.9, 6786.0], [64.0, 6789.0], [64.1, 6791.0], [64.2, 6795.0], [64.3, 6799.0], [64.4, 6802.0], [64.5, 6806.0], [64.6, 6808.0], [64.7, 6812.0], [64.8, 6814.0], [64.9, 6817.0], [65.0, 6821.0], [65.1, 6824.0], [65.2, 6826.0], [65.3, 6831.0], [65.4, 6834.0], [65.5, 6837.0], [65.6, 6840.0], [65.7, 6842.0], [65.8, 6845.0], [65.9, 6848.0], [66.0, 6851.0], [66.1, 6856.0], [66.2, 6859.0], [66.3, 6861.0], [66.4, 6865.0], [66.5, 6869.0], [66.6, 6873.0], [66.7, 6877.0], [66.8, 6881.0], [66.9, 6885.0], [67.0, 6890.0], [67.1, 6893.0], [67.2, 6897.0], [67.3, 6901.0], [67.4, 6905.0], [67.5, 6910.0], [67.6, 6914.0], [67.7, 6917.0], [67.8, 6920.0], [67.9, 6922.0], [68.0, 6926.0], [68.1, 6930.0], [68.2, 6933.0], [68.3, 6938.0], [68.4, 6942.0], [68.5, 6945.0], [68.6, 6950.0], [68.7, 6954.0], [68.8, 6956.0], [68.9, 6959.0], [69.0, 6963.0], [69.1, 6966.0], [69.2, 6970.0], [69.3, 6974.0], [69.4, 6977.0], [69.5, 6981.0], [69.6, 6985.0], [69.7, 6988.0], [69.8, 6991.0], [69.9, 6994.0], [70.0, 7000.0], [70.1, 7002.0], [70.2, 7006.0], [70.3, 7009.0], [70.4, 7012.0], [70.5, 7015.0], [70.6, 7018.0], [70.7, 7023.0], [70.8, 7025.0], [70.9, 7029.0], [71.0, 7032.0], [71.1, 7037.0], [71.2, 7042.0], [71.3, 7046.0], [71.4, 7049.0], [71.5, 7052.0], [71.6, 7057.0], [71.7, 7061.0], [71.8, 7064.0], [71.9, 7070.0], [72.0, 7072.0], [72.1, 7076.0], [72.2, 7080.0], [72.3, 7085.0], [72.4, 7089.0], [72.5, 7094.0], [72.6, 7098.0], [72.7, 7102.0], [72.8, 7106.0], [72.9, 7110.0], [73.0, 7114.0], [73.1, 7117.0], [73.2, 7120.0], [73.3, 7125.0], [73.4, 7128.0], [73.5, 7133.0], [73.6, 7136.0], [73.7, 7139.0], [73.8, 7147.0], [73.9, 7149.0], [74.0, 7153.0], [74.1, 7157.0], [74.2, 7161.0], [74.3, 7164.0], [74.4, 7167.0], [74.5, 7171.0], [74.6, 7177.0], [74.7, 7181.0], [74.8, 7184.0], [74.9, 7187.0], [75.0, 7190.0], [75.1, 7194.0], [75.2, 7196.0], [75.3, 7200.0], [75.4, 7204.0], [75.5, 7211.0], [75.6, 7218.0], [75.7, 7221.0], [75.8, 7226.0], [75.9, 7230.0], [76.0, 7232.0], [76.1, 7236.0], [76.2, 7242.0], [76.3, 7247.0], [76.4, 7250.0], [76.5, 7254.0], [76.6, 7259.0], [76.7, 7262.0], [76.8, 7266.0], [76.9, 7271.0], [77.0, 7276.0], [77.1, 7280.0], [77.2, 7284.0], [77.3, 7289.0], [77.4, 7295.0], [77.5, 7300.0], [77.6, 7302.0], [77.7, 7306.0], [77.8, 7311.0], [77.9, 7314.0], [78.0, 7318.0], [78.1, 7324.0], [78.2, 7330.0], [78.3, 7334.0], [78.4, 7339.0], [78.5, 7344.0], [78.6, 7349.0], [78.7, 7354.0], [78.8, 7360.0], [78.9, 7366.0], [79.0, 7370.0], [79.1, 7376.0], [79.2, 7380.0], [79.3, 7385.0], [79.4, 7389.0], [79.5, 7393.0], [79.6, 7399.0], [79.7, 7404.0], [79.8, 7407.0], [79.9, 7413.0], [80.0, 7416.0], [80.1, 7422.0], [80.2, 7427.0], [80.3, 7431.0], [80.4, 7434.0], [80.5, 7439.0], [80.6, 7443.0], [80.7, 7447.0], [80.8, 7452.0], [80.9, 7457.0], [81.0, 7460.0], [81.1, 7466.0], [81.2, 7471.0], [81.3, 7476.0], [81.4, 7480.0], [81.5, 7484.0], [81.6, 7490.0], [81.7, 7493.0], [81.8, 7498.0], [81.9, 7503.0], [82.0, 7507.0], [82.1, 7512.0], [82.2, 7517.0], [82.3, 7521.0], [82.4, 7524.0], [82.5, 7529.0], [82.6, 7536.0], [82.7, 7540.0], [82.8, 7548.0], [82.9, 7554.0], [83.0, 7560.0], [83.1, 7566.0], [83.2, 7577.0], [83.3, 7581.0], [83.4, 7586.0], [83.5, 7594.0], [83.6, 7599.0], [83.7, 7606.0], [83.8, 7611.0], [83.9, 7615.0], [84.0, 7622.0], [84.1, 7627.0], [84.2, 7632.0], [84.3, 7640.0], [84.4, 7647.0], [84.5, 7653.0], [84.6, 7660.0], [84.7, 7665.0], [84.8, 7671.0], [84.9, 7677.0], [85.0, 7683.0], [85.1, 7689.0], [85.2, 7695.0], [85.3, 7700.0], [85.4, 7705.0], [85.5, 7719.0], [85.6, 7722.0], [85.7, 7727.0], [85.8, 7736.0], [85.9, 7740.0], [86.0, 7745.0], [86.1, 7752.0], [86.2, 7761.0], [86.3, 7769.0], [86.4, 7779.0], [86.5, 7789.0], [86.6, 7795.0], [86.7, 7801.0], [86.8, 7807.0], [86.9, 7816.0], [87.0, 7825.0], [87.1, 7838.0], [87.2, 7842.0], [87.3, 7847.0], [87.4, 7853.0], [87.5, 7862.0], [87.6, 7869.0], [87.7, 7876.0], [87.8, 7883.0], [87.9, 7895.0], [88.0, 7902.0], [88.1, 7908.0], [88.2, 7918.0], [88.3, 7924.0], [88.4, 7932.0], [88.5, 7945.0], [88.6, 7957.0], [88.7, 7966.0], [88.8, 7972.0], [88.9, 7981.0], [89.0, 7994.0], [89.1, 8002.0], [89.2, 8013.0], [89.3, 8021.0], [89.4, 8032.0], [89.5, 8043.0], [89.6, 8057.0], [89.7, 8068.0], [89.8, 8078.0], [89.9, 8085.0], [90.0, 8092.0], [90.1, 8104.0], [90.2, 8111.0], [90.3, 8118.0], [90.4, 8127.0], [90.5, 8136.0], [90.6, 8142.0], [90.7, 8150.0], [90.8, 8160.0], [90.9, 8165.0], [91.0, 8175.0], [91.1, 8193.0], [91.2, 8211.0], [91.3, 8225.0], [91.4, 8234.0], [91.5, 8244.0], [91.6, 8254.0], [91.7, 8266.0], [91.8, 8277.0], [91.9, 8288.0], [92.0, 8301.0], [92.1, 8321.0], [92.2, 8330.0], [92.3, 8344.0], [92.4, 8357.0], [92.5, 8366.0], [92.6, 8374.0], [92.7, 8385.0], [92.8, 8403.0], [92.9, 8414.0], [93.0, 8424.0], [93.1, 8432.0], [93.2, 8451.0], [93.3, 8461.0], [93.4, 8481.0], [93.5, 8503.0], [93.6, 8525.0], [93.7, 8540.0], [93.8, 8556.0], [93.9, 8574.0], [94.0, 8598.0], [94.1, 8610.0], [94.2, 8628.0], [94.3, 8645.0], [94.4, 8662.0], [94.5, 8679.0], [94.6, 8690.0], [94.7, 8710.0], [94.8, 8731.0], [94.9, 8744.0], [95.0, 8757.0], [95.1, 8780.0], [95.2, 8797.0], [95.3, 8823.0], [95.4, 8848.0], [95.5, 8866.0], [95.6, 8886.0], [95.7, 8906.0], [95.8, 8933.0], [95.9, 8957.0], [96.0, 8989.0], [96.1, 9021.0], [96.2, 9053.0], [96.3, 9089.0], [96.4, 9130.0], [96.5, 9179.0], [96.6, 9219.0], [96.7, 9269.0], [96.8, 9319.0], [96.9, 9359.0], [97.0, 9403.0], [97.1, 9479.0], [97.2, 9547.0], [97.3, 9595.0], [97.4, 9634.0], [97.5, 9705.0], [97.6, 9764.0], [97.7, 9817.0], [97.8, 9894.0], [97.9, 9979.0], [98.0, 10075.0], [98.1, 10168.0], [98.2, 10318.0], [98.3, 10449.0], [98.4, 10560.0], [98.5, 10740.0], [98.6, 10892.0], [98.7, 11066.0], [98.8, 11253.0], [98.9, 11507.0], [99.0, 11797.0], [99.1, 12468.0], [99.2, 12880.0], [99.3, 13108.0], [99.4, 13564.0], [99.5, 14000.0], [99.6, 14647.0], [99.7, 15688.0], [99.8, 16951.0], [99.9, 18522.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[0.0, 21.0], [0.1, 22.0], [0.2, 22.0], [0.3, 22.0], [0.4, 23.0], [0.5, 23.0], [0.6, 23.0], [0.7, 23.0], [0.8, 23.0], [0.9, 23.0], [1.0, 24.0], [1.1, 24.0], [1.2, 24.0], [1.3, 24.0], [1.4, 24.0], [1.5, 24.0], [1.6, 24.0], [1.7, 24.0], [1.8, 24.0], [1.9, 24.0], [2.0, 24.0], [2.1, 25.0], [2.2, 25.0], [2.3, 25.0], [2.4, 25.0], [2.5, 25.0], [2.6, 25.0], [2.7, 25.0], [2.8, 25.0], [2.9, 25.0], [3.0, 25.0], [3.1, 25.0], [3.2, 25.0], [3.3, 25.0], [3.4, 26.0], [3.5, 26.0], [3.6, 26.0], [3.7, 26.0], [3.8, 26.0], [3.9, 26.0], [4.0, 26.0], [4.1, 26.0], [4.2, 26.0], [4.3, 26.0], [4.4, 26.0], [4.5, 26.0], [4.6, 26.0], [4.7, 26.0], [4.8, 26.0], [4.9, 26.0], [5.0, 26.0], [5.1, 26.0], [5.2, 26.0], [5.3, 26.0], [5.4, 26.0], [5.5, 26.0], [5.6, 26.0], [5.7, 26.0], [5.8, 26.0], [5.9, 26.0], [6.0, 27.0], [6.1, 27.0], [6.2, 27.0], [6.3, 27.0], [6.4, 27.0], [6.5, 27.0], [6.6, 27.0], [6.7, 27.0], [6.8, 27.0], [6.9, 27.0], [7.0, 27.0], [7.1, 27.0], [7.2, 27.0], [7.3, 27.0], [7.4, 27.0], [7.5, 27.0], [7.6, 27.0], [7.7, 27.0], [7.8, 27.0], [7.9, 27.0], [8.0, 27.0], [8.1, 27.0], [8.2, 27.0], [8.3, 27.0], [8.4, 27.0], [8.5, 27.0], [8.6, 28.0], [8.7, 28.0], [8.8, 28.0], [8.9, 28.0], [9.0, 28.0], [9.1, 28.0], [9.2, 28.0], [9.3, 28.0], [9.4, 28.0], [9.5, 28.0], [9.6, 28.0], [9.7, 28.0], [9.8, 28.0], [9.9, 28.0], [10.0, 28.0], [10.1, 28.0], [10.2, 28.0], [10.3, 28.0], [10.4, 28.0], [10.5, 28.0], [10.6, 28.0], [10.7, 28.0], [10.8, 28.0], [10.9, 28.0], [11.0, 29.0], [11.1, 29.0], [11.2, 29.0], [11.3, 29.0], [11.4, 29.0], [11.5, 29.0], [11.6, 29.0], [11.7, 29.0], [11.8, 29.0], [11.9, 29.0], [12.0, 29.0], [12.1, 29.0], [12.2, 29.0], [12.3, 29.0], [12.4, 29.0], [12.5, 29.0], [12.6, 29.0], [12.7, 29.0], [12.8, 30.0], [12.9, 30.0], [13.0, 30.0], [13.1, 30.0], [13.2, 30.0], [13.3, 30.0], [13.4, 30.0], [13.5, 30.0], [13.6, 30.0], [13.7, 30.0], [13.8, 30.0], [13.9, 30.0], [14.0, 30.0], [14.1, 30.0], [14.2, 30.0], [14.3, 31.0], [14.4, 31.0], [14.5, 31.0], [14.6, 31.0], [14.7, 31.0], [14.8, 31.0], [14.9, 31.0], [15.0, 31.0], [15.1, 31.0], [15.2, 31.0], [15.3, 31.0], [15.4, 31.0], [15.5, 31.0], [15.6, 31.0], [15.7, 31.0], [15.8, 31.0], [15.9, 32.0], [16.0, 32.0], [16.1, 32.0], [16.2, 32.0], [16.3, 32.0], [16.4, 32.0], [16.5, 32.0], [16.6, 32.0], [16.7, 32.0], [16.8, 32.0], [16.9, 32.0], [17.0, 32.0], [17.1, 32.0], [17.2, 32.0], [17.3, 32.0], [17.4, 32.0], [17.5, 32.0], [17.6, 32.0], [17.7, 33.0], [17.8, 33.0], [17.9, 33.0], [18.0, 33.0], [18.1, 33.0], [18.2, 33.0], [18.3, 33.0], [18.4, 33.0], [18.5, 33.0], [18.6, 33.0], [18.7, 33.0], [18.8, 33.0], [18.9, 34.0], [19.0, 34.0], [19.1, 34.0], [19.2, 34.0], [19.3, 34.0], [19.4, 34.0], [19.5, 34.0], [19.6, 34.0], [19.7, 34.0], [19.8, 35.0], [19.9, 35.0], [20.0, 35.0], [20.1, 35.0], [20.2, 35.0], [20.3, 35.0], [20.4, 35.0], [20.5, 35.0], [20.6, 35.0], [20.7, 36.0], [20.8, 36.0], [20.9, 36.0], [21.0, 36.0], [21.1, 36.0], [21.2, 36.0], [21.3, 36.0], [21.4, 36.0], [21.5, 36.0], [21.6, 36.0], [21.7, 36.0], [21.8, 36.0], [21.9, 37.0], [22.0, 37.0], [22.1, 37.0], [22.2, 37.0], [22.3, 37.0], [22.4, 37.0], [22.5, 37.0], [22.6, 37.0], [22.7, 38.0], [22.8, 38.0], [22.9, 38.0], [23.0, 38.0], [23.1, 38.0], [23.2, 38.0], [23.3, 38.0], [23.4, 39.0], [23.5, 39.0], [23.6, 39.0], [23.7, 39.0], [23.8, 39.0], [23.9, 39.0], [24.0, 40.0], [24.1, 40.0], [24.2, 40.0], [24.3, 40.0], [24.4, 40.0], [24.5, 40.0], [24.6, 40.0], [24.7, 40.0], [24.8, 40.0], [24.9, 40.0], [25.0, 41.0], [25.1, 41.0], [25.2, 41.0], [25.3, 41.0], [25.4, 41.0], [25.5, 41.0], [25.6, 42.0], [25.7, 42.0], [25.8, 42.0], [25.9, 42.0], [26.0, 43.0], [26.1, 43.0], [26.2, 43.0], [26.3, 43.0], [26.4, 43.0], [26.5, 44.0], [26.6, 44.0], [26.7, 44.0], [26.8, 44.0], [26.9, 44.0], [27.0, 44.0], [27.1, 44.0], [27.2, 44.0], [27.3, 44.0], [27.4, 45.0], [27.5, 45.0], [27.6, 45.0], [27.7, 45.0], [27.8, 46.0], [27.9, 46.0], [28.0, 46.0], [28.1, 46.0], [28.2, 46.0], [28.3, 46.0], [28.4, 47.0], [28.5, 47.0], [28.6, 47.0], [28.7, 47.0], [28.8, 48.0], [28.9, 48.0], [29.0, 48.0], [29.1, 48.0], [29.2, 48.0], [29.3, 48.0], [29.4, 48.0], [29.5, 48.0], [29.6, 48.0], [29.7, 49.0], [29.8, 49.0], [29.9, 49.0], [30.0, 49.0], [30.1, 50.0], [30.2, 50.0], [30.3, 50.0], [30.4, 50.0], [30.5, 51.0], [30.6, 51.0], [30.7, 51.0], [30.8, 51.0], [30.9, 52.0], [31.0, 52.0], [31.1, 52.0], [31.2, 52.0], [31.3, 52.0], [31.4, 52.0], [31.5, 52.0], [31.6, 53.0], [31.7, 53.0], [31.8, 53.0], [31.9, 54.0], [32.0, 54.0], [32.1, 54.0], [32.2, 54.0], [32.3, 55.0], [32.4, 55.0], [32.5, 55.0], [32.6, 55.0], [32.7, 56.0], [32.8, 56.0], [32.9, 56.0], [33.0, 56.0], [33.1, 56.0], [33.2, 57.0], [33.3, 57.0], [33.4, 57.0], [33.5, 58.0], [33.6, 58.0], [33.7, 58.0], [33.8, 58.0], [33.9, 59.0], [34.0, 59.0], [34.1, 59.0], [34.2, 60.0], [34.3, 60.0], [34.4, 60.0], [34.5, 60.0], [34.6, 60.0], [34.7, 60.0], [34.8, 61.0], [34.9, 61.0], [35.0, 61.0], [35.1, 62.0], [35.2, 62.0], [35.3, 62.0], [35.4, 63.0], [35.5, 63.0], [35.6, 63.0], [35.7, 63.0], [35.8, 64.0], [35.9, 64.0], [36.0, 64.0], [36.1, 64.0], [36.2, 64.0], [36.3, 65.0], [36.4, 65.0], [36.5, 65.0], [36.6, 66.0], [36.7, 66.0], [36.8, 67.0], [36.9, 67.0], [37.0, 67.0], [37.1, 67.0], [37.2, 68.0], [37.3, 68.0], [37.4, 68.0], [37.5, 68.0], [37.6, 69.0], [37.7, 69.0], [37.8, 69.0], [37.9, 70.0], [38.0, 70.0], [38.1, 70.0], [38.2, 71.0], [38.3, 71.0], [38.4, 71.0], [38.5, 72.0], [38.6, 72.0], [38.7, 72.0], [38.8, 72.0], [38.9, 72.0], [39.0, 73.0], [39.1, 73.0], [39.2, 73.0], [39.3, 74.0], [39.4, 74.0], [39.5, 74.0], [39.6, 75.0], [39.7, 75.0], [39.8, 75.0], [39.9, 76.0], [40.0, 76.0], [40.1, 76.0], [40.2, 76.0], [40.3, 77.0], [40.4, 77.0], [40.5, 78.0], [40.6, 78.0], [40.7, 78.0], [40.8, 78.0], [40.9, 79.0], [41.0, 79.0], [41.1, 80.0], [41.2, 80.0], [41.3, 80.0], [41.4, 81.0], [41.5, 81.0], [41.6, 82.0], [41.7, 82.0], [41.8, 82.0], [41.9, 83.0], [42.0, 83.0], [42.1, 83.0], [42.2, 84.0], [42.3, 84.0], [42.4, 84.0], [42.5, 84.0], [42.6, 85.0], [42.7, 85.0], [42.8, 85.0], [42.9, 86.0], [43.0, 86.0], [43.1, 87.0], [43.2, 87.0], [43.3, 87.0], [43.4, 88.0], [43.5, 88.0], [43.6, 88.0], [43.7, 89.0], [43.8, 89.0], [43.9, 89.0], [44.0, 90.0], [44.1, 91.0], [44.2, 91.0], [44.3, 91.0], [44.4, 92.0], [44.5, 92.0], [44.6, 92.0], [44.7, 93.0], [44.8, 93.0], [44.9, 94.0], [45.0, 94.0], [45.1, 94.0], [45.2, 95.0], [45.3, 95.0], [45.4, 95.0], [45.5, 96.0], [45.6, 96.0], [45.7, 97.0], [45.8, 97.0], [45.9, 98.0], [46.0, 98.0], [46.1, 98.0], [46.2, 99.0], [46.3, 99.0], [46.4, 100.0], [46.5, 100.0], [46.6, 100.0], [46.7, 101.0], [46.8, 101.0], [46.9, 102.0], [47.0, 102.0], [47.1, 103.0], [47.2, 103.0], [47.3, 103.0], [47.4, 104.0], [47.5, 104.0], [47.6, 104.0], [47.7, 105.0], [47.8, 106.0], [47.9, 106.0], [48.0, 106.0], [48.1, 107.0], [48.2, 107.0], [48.3, 108.0], [48.4, 108.0], [48.5, 108.0], [48.6, 109.0], [48.7, 109.0], [48.8, 110.0], [48.9, 110.0], [49.0, 110.0], [49.1, 111.0], [49.2, 111.0], [49.3, 112.0], [49.4, 112.0], [49.5, 113.0], [49.6, 113.0], [49.7, 114.0], [49.8, 114.0], [49.9, 115.0], [50.0, 115.0], [50.1, 116.0], [50.2, 116.0], [50.3, 116.0], [50.4, 117.0], [50.5, 118.0], [50.6, 118.0], [50.7, 119.0], [50.8, 119.0], [50.9, 120.0], [51.0, 121.0], [51.1, 121.0], [51.2, 122.0], [51.3, 122.0], [51.4, 123.0], [51.5, 123.0], [51.6, 124.0], [51.7, 124.0], [51.8, 125.0], [51.9, 125.0], [52.0, 126.0], [52.1, 126.0], [52.2, 127.0], [52.3, 127.0], [52.4, 128.0], [52.5, 129.0], [52.6, 129.0], [52.7, 130.0], [52.8, 131.0], [52.9, 131.0], [53.0, 132.0], [53.1, 132.0], [53.2, 133.0], [53.3, 134.0], [53.4, 134.0], [53.5, 135.0], [53.6, 136.0], [53.7, 137.0], [53.8, 137.0], [53.9, 138.0], [54.0, 139.0], [54.1, 140.0], [54.2, 140.0], [54.3, 141.0], [54.4, 142.0], [54.5, 143.0], [54.6, 144.0], [54.7, 144.0], [54.8, 145.0], [54.9, 146.0], [55.0, 147.0], [55.1, 148.0], [55.2, 148.0], [55.3, 149.0], [55.4, 150.0], [55.5, 151.0], [55.6, 152.0], [55.7, 152.0], [55.8, 153.0], [55.9, 154.0], [56.0, 155.0], [56.1, 156.0], [56.2, 156.0], [56.3, 157.0], [56.4, 158.0], [56.5, 159.0], [56.6, 160.0], [56.7, 161.0], [56.8, 162.0], [56.9, 163.0], [57.0, 163.0], [57.1, 164.0], [57.2, 165.0], [57.3, 166.0], [57.4, 167.0], [57.5, 168.0], [57.6, 169.0], [57.7, 170.0], [57.8, 171.0], [57.9, 172.0], [58.0, 173.0], [58.1, 174.0], [58.2, 175.0], [58.3, 176.0], [58.4, 177.0], [58.5, 177.0], [58.6, 178.0], [58.7, 179.0], [58.8, 180.0], [58.9, 181.0], [59.0, 181.0], [59.1, 182.0], [59.2, 183.0], [59.3, 185.0], [59.4, 185.0], [59.5, 186.0], [59.6, 187.0], [59.7, 188.0], [59.8, 189.0], [59.9, 191.0], [60.0, 192.0], [60.1, 193.0], [60.2, 194.0], [60.3, 195.0], [60.4, 196.0], [60.5, 197.0], [60.6, 198.0], [60.7, 198.0], [60.8, 199.0], [60.9, 201.0], [61.0, 203.0], [61.1, 204.0], [61.2, 205.0], [61.3, 206.0], [61.4, 207.0], [61.5, 209.0], [61.6, 210.0], [61.7, 212.0], [61.8, 213.0], [61.9, 214.0], [62.0, 215.0], [62.1, 217.0], [62.2, 218.0], [62.3, 220.0], [62.4, 221.0], [62.5, 222.0], [62.6, 223.0], [62.7, 224.0], [62.8, 225.0], [62.9, 226.0], [63.0, 228.0], [63.1, 229.0], [63.2, 231.0], [63.3, 232.0], [63.4, 234.0], [63.5, 235.0], [63.6, 236.0], [63.7, 238.0], [63.8, 240.0], [63.9, 242.0], [64.0, 243.0], [64.1, 244.0], [64.2, 245.0], [64.3, 247.0], [64.4, 249.0], [64.5, 250.0], [64.6, 252.0], [64.7, 253.0], [64.8, 256.0], [64.9, 258.0], [65.0, 259.0], [65.1, 261.0], [65.2, 263.0], [65.3, 265.0], [65.4, 266.0], [65.5, 269.0], [65.6, 271.0], [65.7, 273.0], [65.8, 274.0], [65.9, 275.0], [66.0, 278.0], [66.1, 279.0], [66.2, 280.0], [66.3, 283.0], [66.4, 285.0], [66.5, 287.0], [66.6, 289.0], [66.7, 291.0], [66.8, 293.0], [66.9, 295.0], [67.0, 296.0], [67.1, 298.0], [67.2, 299.0], [67.3, 300.0], [67.4, 302.0], [67.5, 304.0], [67.6, 306.0], [67.7, 308.0], [67.8, 311.0], [67.9, 313.0], [68.0, 314.0], [68.1, 316.0], [68.2, 319.0], [68.3, 321.0], [68.4, 323.0], [68.5, 326.0], [68.6, 327.0], [68.7, 329.0], [68.8, 332.0], [68.9, 334.0], [69.0, 335.0], [69.1, 337.0], [69.2, 339.0], [69.3, 341.0], [69.4, 342.0], [69.5, 345.0], [69.6, 346.0], [69.7, 349.0], [69.8, 351.0], [69.9, 353.0], [70.0, 355.0], [70.1, 358.0], [70.2, 360.0], [70.3, 362.0], [70.4, 364.0], [70.5, 366.0], [70.6, 368.0], [70.7, 369.0], [70.8, 372.0], [70.9, 374.0], [71.0, 375.0], [71.1, 376.0], [71.2, 377.0], [71.3, 380.0], [71.4, 381.0], [71.5, 382.0], [71.6, 384.0], [71.7, 385.0], [71.8, 386.0], [71.9, 388.0], [72.0, 390.0], [72.1, 392.0], [72.2, 394.0], [72.3, 396.0], [72.4, 398.0], [72.5, 400.0], [72.6, 401.0], [72.7, 403.0], [72.8, 404.0], [72.9, 406.0], [73.0, 408.0], [73.1, 409.0], [73.2, 411.0], [73.3, 412.0], [73.4, 413.0], [73.5, 415.0], [73.6, 416.0], [73.7, 418.0], [73.8, 419.0], [73.9, 421.0], [74.0, 422.0], [74.1, 423.0], [74.2, 425.0], [74.3, 427.0], [74.4, 428.0], [74.5, 429.0], [74.6, 430.0], [74.7, 432.0], [74.8, 434.0], [74.9, 435.0], [75.0, 437.0], [75.1, 438.0], [75.2, 440.0], [75.3, 441.0], [75.4, 443.0], [75.5, 444.0], [75.6, 446.0], [75.7, 447.0], [75.8, 447.0], [75.9, 449.0], [76.0, 450.0], [76.1, 452.0], [76.2, 454.0], [76.3, 455.0], [76.4, 457.0], [76.5, 458.0], [76.6, 460.0], [76.7, 461.0], [76.8, 463.0], [76.9, 465.0], [77.0, 467.0], [77.1, 468.0], [77.2, 469.0], [77.3, 471.0], [77.4, 472.0], [77.5, 473.0], [77.6, 475.0], [77.7, 477.0], [77.8, 478.0], [77.9, 479.0], [78.0, 481.0], [78.1, 483.0], [78.2, 484.0], [78.3, 485.0], [78.4, 487.0], [78.5, 488.0], [78.6, 490.0], [78.7, 492.0], [78.8, 493.0], [78.9, 494.0], [79.0, 496.0], [79.1, 497.0], [79.2, 498.0], [79.3, 500.0], [79.4, 502.0], [79.5, 504.0], [79.6, 505.0], [79.7, 506.0], [79.8, 508.0], [79.9, 509.0], [80.0, 511.0], [80.1, 513.0], [80.2, 516.0], [80.3, 517.0], [80.4, 518.0], [80.5, 521.0], [80.6, 522.0], [80.7, 524.0], [80.8, 525.0], [80.9, 527.0], [81.0, 529.0], [81.1, 531.0], [81.2, 532.0], [81.3, 535.0], [81.4, 537.0], [81.5, 538.0], [81.6, 540.0], [81.7, 543.0], [81.8, 544.0], [81.9, 546.0], [82.0, 548.0], [82.1, 550.0], [82.2, 551.0], [82.3, 553.0], [82.4, 556.0], [82.5, 557.0], [82.6, 558.0], [82.7, 561.0], [82.8, 563.0], [82.9, 564.0], [83.0, 568.0], [83.1, 569.0], [83.2, 572.0], [83.3, 574.0], [83.4, 578.0], [83.5, 580.0], [83.6, 582.0], [83.7, 584.0], [83.8, 586.0], [83.9, 590.0], [84.0, 592.0], [84.1, 595.0], [84.2, 599.0], [84.3, 600.0], [84.4, 603.0], [84.5, 604.0], [84.6, 607.0], [84.7, 609.0], [84.8, 611.0], [84.9, 614.0], [85.0, 615.0], [85.1, 617.0], [85.2, 620.0], [85.3, 621.0], [85.4, 624.0], [85.5, 627.0], [85.6, 630.0], [85.7, 632.0], [85.8, 634.0], [85.9, 637.0], [86.0, 640.0], [86.1, 641.0], [86.2, 644.0], [86.3, 647.0], [86.4, 648.0], [86.5, 650.0], [86.6, 652.0], [86.7, 655.0], [86.8, 658.0], [86.9, 660.0], [87.0, 664.0], [87.1, 667.0], [87.2, 671.0], [87.3, 673.0], [87.4, 678.0], [87.5, 680.0], [87.6, 684.0], [87.7, 686.0], [87.8, 689.0], [87.9, 691.0], [88.0, 694.0], [88.1, 698.0], [88.2, 702.0], [88.3, 707.0], [88.4, 711.0], [88.5, 714.0], [88.6, 718.0], [88.7, 722.0], [88.8, 725.0], [88.9, 731.0], [89.0, 734.0], [89.1, 738.0], [89.2, 741.0], [89.3, 745.0], [89.4, 749.0], [89.5, 755.0], [89.6, 761.0], [89.7, 765.0], [89.8, 770.0], [89.9, 776.0], [90.0, 783.0], [90.1, 789.0], [90.2, 791.0], [90.3, 796.0], [90.4, 803.0], [90.5, 810.0], [90.6, 819.0], [90.7, 822.0], [90.8, 831.0], [90.9, 836.0], [91.0, 841.0], [91.1, 848.0], [91.2, 857.0], [91.3, 863.0], [91.4, 869.0], [91.5, 878.0], [91.6, 884.0], [91.7, 893.0], [91.8, 901.0], [91.9, 908.0], [92.0, 917.0], [92.1, 925.0], [92.2, 939.0], [92.3, 947.0], [92.4, 956.0], [92.5, 966.0], [92.6, 976.0], [92.7, 984.0], [92.8, 997.0], [92.9, 1005.0], [93.0, 1020.0], [93.1, 1035.0], [93.2, 1054.0], [93.3, 1070.0], [93.4, 1090.0], [93.5, 1117.0], [93.6, 1130.0], [93.7, 1147.0], [93.8, 1166.0], [93.9, 1187.0], [94.0, 1224.0], [94.1, 1243.0], [94.2, 1268.0], [94.3, 1304.0], [94.4, 1339.0], [94.5, 1366.0], [94.6, 1394.0], [94.7, 1435.0], [94.8, 1478.0], [94.9, 1520.0], [95.0, 1569.0], [95.1, 1624.0], [95.2, 1676.0], [95.3, 1719.0], [95.4, 1808.0], [95.5, 1871.0], [95.6, 1923.0], [95.7, 1984.0], [95.8, 2048.0], [95.9, 2149.0], [96.0, 2264.0], [96.1, 2319.0], [96.2, 2410.0], [96.3, 2458.0], [96.4, 2510.0], [96.5, 2659.0], [96.6, 2731.0], [96.7, 2816.0], [96.8, 2881.0], [96.9, 2977.0], [97.0, 3139.0], [97.1, 3361.0], [97.2, 3598.0], [97.3, 3856.0], [97.4, 3998.0], [97.5, 4096.0], [97.6, 4336.0], [97.7, 4496.0], [97.8, 4673.0], [97.9, 4808.0], [98.0, 5068.0], [98.1, 5332.0], [98.2, 5622.0], [98.3, 5817.0], [98.4, 6054.0], [98.5, 6217.0], [98.6, 6332.0], [98.7, 6541.0], [98.8, 6719.0], [98.9, 6951.0], [99.0, 7311.0], [99.1, 7454.0], [99.2, 7581.0], [99.3, 7855.0], [99.4, 8172.0], [99.5, 8614.0], [99.6, 9085.0], [99.7, 9561.0], [99.8, 10276.0], [99.9, 11852.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6705.0, "series": [{"data": [[300.0, 1.0], [400.0, 3.0], [500.0, 33.0], [600.0, 56.0], [700.0, 75.0], [800.0, 64.0], [900.0, 40.0], [1000.0, 43.0], [1100.0, 35.0], [1200.0, 32.0], [1300.0, 43.0], [1400.0, 44.0], [1500.0, 36.0], [1600.0, 18.0], [1700.0, 23.0], [1800.0, 32.0], [1900.0, 21.0], [2000.0, 23.0], [2100.0, 20.0], [2200.0, 21.0], [2300.0, 12.0], [2400.0, 10.0], [2500.0, 17.0], [2600.0, 15.0], [2700.0, 11.0], [2800.0, 11.0], [2900.0, 11.0], [3000.0, 15.0], [3100.0, 20.0], [3200.0, 20.0], [3300.0, 20.0], [3400.0, 19.0], [3500.0, 25.0], [3700.0, 22.0], [3600.0, 35.0], [3800.0, 31.0], [3900.0, 34.0], [4000.0, 41.0], [4200.0, 70.0], [4100.0, 44.0], [4300.0, 68.0], [4600.0, 98.0], [4400.0, 75.0], [4500.0, 85.0], [4800.0, 167.0], [4700.0, 104.0], [5100.0, 242.0], [4900.0, 177.0], [5000.0, 226.0], [5300.0, 292.0], [5200.0, 297.0], [5500.0, 390.0], [5600.0, 401.0], [5400.0, 348.0], [5700.0, 412.0], [5800.0, 404.0], [6000.0, 469.0], [5900.0, 476.0], [6100.0, 523.0], [6200.0, 499.0], [6300.0, 524.0], [6400.0, 457.0], [6500.0, 519.0], [6600.0, 462.0], [6900.0, 395.0], [6800.0, 424.0], [6700.0, 437.0], [7100.0, 380.0], [7000.0, 383.0], [7300.0, 307.0], [7200.0, 321.0], [7400.0, 318.0], [7600.0, 241.0], [7500.0, 258.0], [7900.0, 161.0], [7700.0, 201.0], [7800.0, 188.0], [8100.0, 150.0], [8000.0, 146.0], [8300.0, 117.0], [8200.0, 123.0], [8600.0, 92.0], [8500.0, 76.0], [8700.0, 82.0], [8400.0, 100.0], [8900.0, 52.0], [9000.0, 47.0], [8800.0, 63.0], [9200.0, 30.0], [9100.0, 32.0], [9600.0, 28.0], [9700.0, 23.0], [9400.0, 20.0], [9300.0, 33.0], [9500.0, 25.0], [9800.0, 23.0], [10000.0, 19.0], [9900.0, 14.0], [10100.0, 11.0], [10200.0, 9.0], [10500.0, 8.0], [10400.0, 15.0], [10600.0, 9.0], [10300.0, 12.0], [10700.0, 8.0], [11000.0, 9.0], [11200.0, 14.0], [10900.0, 5.0], [11100.0, 6.0], [10800.0, 10.0], [11700.0, 3.0], [11300.0, 5.0], [11600.0, 6.0], [11500.0, 6.0], [11400.0, 3.0], [12000.0, 3.0], [12200.0, 2.0], [11900.0, 2.0], [12100.0, 2.0], [11800.0, 1.0], [12500.0, 2.0], [12700.0, 2.0], [12600.0, 5.0], [12400.0, 4.0], [12300.0, 3.0], [13000.0, 5.0], [12900.0, 7.0], [13300.0, 3.0], [12800.0, 4.0], [13200.0, 2.0], [13100.0, 3.0], [13800.0, 1.0], [13600.0, 7.0], [13400.0, 3.0], [13700.0, 3.0], [13500.0, 6.0], [13900.0, 1.0], [14200.0, 5.0], [14000.0, 2.0], [14300.0, 2.0], [14100.0, 1.0], [14400.0, 2.0], [14700.0, 2.0], [14800.0, 1.0], [14500.0, 1.0], [14600.0, 4.0], [15000.0, 2.0], [15200.0, 1.0], [15300.0, 1.0], [15600.0, 2.0], [15400.0, 3.0], [15800.0, 2.0], [15500.0, 1.0], [16000.0, 3.0], [16800.0, 1.0], [16400.0, 2.0], [17100.0, 1.0], [16600.0, 2.0], [16500.0, 1.0], [16700.0, 3.0], [16900.0, 2.0], [17300.0, 1.0], [17600.0, 3.0], [18100.0, 3.0], [18300.0, 1.0], [18200.0, 2.0], [17500.0, 1.0], [18800.0, 2.0], [18500.0, 1.0], [19400.0, 2.0], [18900.0, 1.0], [19600.0, 1.0], [19900.0, 1.0], [20000.0, 1.0], [20500.0, 1.0], [20600.0, 1.0], [21200.0, 1.0], [21000.0, 1.0], [22300.0, 1.0], [25700.0, 1.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[0.0, 6705.0], [100.0, 2085.0], [200.0, 932.0], [300.0, 759.0], [400.0, 975.0], [500.0, 725.0], [600.0, 560.0], [700.0, 321.0], [800.0, 206.0], [900.0, 151.0], [1000.0, 92.0], [1100.0, 69.0], [1200.0, 51.0], [1300.0, 49.0], [1400.0, 35.0], [1500.0, 28.0], [1600.0, 29.0], [1700.0, 19.0], [1800.0, 21.0], [1900.0, 30.0], [2000.0, 19.0], [2100.0, 7.0], [2200.0, 18.0], [2300.0, 21.0], [2400.0, 25.0], [2500.0, 15.0], [2600.0, 15.0], [2800.0, 20.0], [2700.0, 16.0], [2900.0, 12.0], [3000.0, 9.0], [3100.0, 7.0], [3200.0, 6.0], [3300.0, 9.0], [3400.0, 5.0], [3500.0, 7.0], [3700.0, 7.0], [3600.0, 3.0], [3800.0, 6.0], [3900.0, 13.0], [4000.0, 14.0], [4300.0, 6.0], [4100.0, 3.0], [4200.0, 10.0], [4400.0, 11.0], [4600.0, 11.0], [4500.0, 5.0], [4800.0, 9.0], [4700.0, 9.0], [5000.0, 10.0], [4900.0, 2.0], [5100.0, 1.0], [5200.0, 7.0], [5300.0, 6.0], [5600.0, 8.0], [5400.0, 5.0], [5500.0, 4.0], [5700.0, 5.0], [5800.0, 6.0], [6000.0, 10.0], [5900.0, 5.0], [6100.0, 9.0], [6300.0, 13.0], [6200.0, 12.0], [6600.0, 8.0], [6500.0, 4.0], [6400.0, 6.0], [6700.0, 8.0], [6800.0, 4.0], [6900.0, 5.0], [7100.0, 8.0], [7000.0, 3.0], [7300.0, 13.0], [7400.0, 12.0], [7200.0, 2.0], [7500.0, 9.0], [7600.0, 5.0], [7800.0, 8.0], [7700.0, 3.0], [7900.0, 1.0], [8000.0, 6.0], [8100.0, 4.0], [8500.0, 1.0], [8200.0, 5.0], [8700.0, 4.0], [8600.0, 2.0], [8300.0, 3.0], [8400.0, 2.0], [9000.0, 5.0], [9200.0, 3.0], [8800.0, 2.0], [8900.0, 4.0], [9100.0, 3.0], [9700.0, 2.0], [9500.0, 4.0], [9400.0, 3.0], [9300.0, 2.0], [9900.0, 2.0], [10000.0, 2.0], [10100.0, 4.0], [10200.0, 4.0], [10300.0, 3.0], [10700.0, 1.0], [10400.0, 1.0], [10500.0, 1.0], [11100.0, 1.0], [11000.0, 2.0], [10900.0, 1.0], [11700.0, 2.0], [12100.0, 1.0], [11800.0, 3.0], [12200.0, 2.0], [12300.0, 1.0], [12400.0, 1.0], [12500.0, 1.0], [12600.0, 1.0], [12700.0, 1.0], [12800.0, 1.0], [13600.0, 2.0], [14200.0, 1.0], [14500.0, 1.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 14722.0, "series": [{"data": [[0.0, 11470.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2716.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14722.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.421052631578947, "minX": 1.70131866E12, "maxY": 120.0, "series": [{"data": [[1.7013192E12, 119.0], [1.7013189E12, 119.41218637992819], [1.70131956E12, 115.71000000000001], [1.70131866E12, 5.421052631578947], [1.70131926E12, 119.0], [1.70131896E12, 119.0], [1.70131932E12, 119.0], [1.70131902E12, 119.0], [1.70131938E12, 119.0], [1.70131908E12, 119.0], [1.70131878E12, 99.87774122807016], [1.70131944E12, 119.0], [1.70131914E12, 119.0], [1.70131884E12, 120.0], [1.7013195E12, 119.0], [1.70131872E12, 43.80713128038897]], "isOverall": false, "label": "OnlineConversion", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70131956E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 8537.666666666666, "series": [{"data": [[2.0, 3746.0], [3.0, 4288.0], [4.0, 4258.0], [5.0, 3172.0], [6.0, 1662.2], [7.0, 2284.714285714286], [8.0, 1376.0], [9.0, 3985.0], [10.0, 1733.0], [11.0, 1869.0], [12.0, 1940.0], [13.0, 3734.666666666667], [14.0, 4756.0], [15.0, 4178.833333333333], [17.0, 5250.666666666667], [18.0, 5141.8], [19.0, 5451.5], [20.0, 5741.5], [22.0, 5426.833333333333], [23.0, 5108.333333333333], [24.0, 5752.0], [25.0, 6007.25], [26.0, 6401.0], [27.0, 6340.8], [28.0, 3286.5], [29.0, 5124.666666666667], [30.0, 6382.0], [31.0, 4923.0], [32.0, 7671.5], [33.0, 4946.25], [34.0, 6769.285714285714], [35.0, 3661.0], [36.0, 8321.75], [37.0, 7328.0], [38.0, 7131.4], [39.0, 8537.666666666666], [40.0, 6116.25], [41.0, 4085.142857142857], [42.0, 888.0], [43.0, 2583.25], [44.0, 6028.833333333333], [45.0, 7611.6], [46.0, 3625.5], [47.0, 2178.5], [48.0, 4919.666666666667], [49.0, 4360.555555555556], [50.0, 2898.9], [51.0, 4813.5], [52.0, 2639.166666666667], [53.0, 2846.0], [54.0, 3819.142857142857], [55.0, 4820.555555555556], [56.0, 4343.3], [57.0, 5541.777777777777], [58.0, 6213.416666666667], [59.0, 5484.0], [60.0, 4573.375], [61.0, 4890.0], [62.0, 3026.6], [63.0, 5053.363636363637], [64.0, 2466.5], [65.0, 2348.0], [66.0, 4687.3], [67.0, 3478.8], [68.0, 4113.222222222223], [69.0, 2709.6], [70.0, 4917.5714285714275], [71.0, 5279.5], [72.0, 3427.6249999999995], [73.0, 6888.857142857144], [74.0, 4922.428571428572], [75.0, 4695.25], [76.0, 5463.642857142858], [77.0, 7351.769230769231], [78.0, 4132.714285714285], [79.0, 6137.4375], [80.0, 1982.0], [81.0, 5829.470588235294], [82.0, 4399.307692307692], [83.0, 3778.5], [84.0, 4268.714285714286], [85.0, 2080.5714285714284], [86.0, 4409.714285714285], [87.0, 3994.3571428571427], [88.0, 3353.791666666666], [89.0, 3737.1], [90.0, 4159.133333333334], [91.0, 3022.9999999999995], [92.0, 2334.3125], [93.0, 4814.272727272727], [94.0, 4610.884615384616], [95.0, 3043.928571428572], [96.0, 3433.235294117647], [97.0, 4542.428571428572], [98.0, 4488.263157894737], [99.0, 5490.5], [100.0, 3879.4705882352937], [101.0, 4748.749999999999], [102.0, 4256.200000000001], [103.0, 3236.733333333333], [104.0, 5191.0], [105.0, 4784.8125], [106.0, 3980.428571428571], [107.0, 3326.909090909091], [108.0, 4699.625], [109.0, 4563.541666666667], [110.0, 4745.758620689656], [111.0, 3532.62962962963], [112.0, 3817.882352941177], [113.0, 3509.3913043478265], [114.0, 3707.631578947368], [115.0, 4710.133333333335], [116.0, 4495.666666666667], [117.0, 2514.1875], [118.0, 5222.533333333334], [119.0, 6515.227164685899], [120.0, 6374.836519446278], [1.0, 3784.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[115.91565764893042, 6326.7405382965735]], "isOverall": false, "label": "Leer Archivo-Aggregated", "isController": false}, {"data": [[3.0, 1945.3333333333333], [4.0, 96.0], [5.0, 271.0], [6.0, 69.0], [7.0, 40.0], [8.0, 989.2], [10.0, 254.0], [11.0, 99.75], [12.0, 203.71428571428572], [13.0, 789.0], [14.0, 1521.0], [15.0, 1377.0], [16.0, 1061.3333333333333], [17.0, 2225.0], [18.0, 2046.75], [19.0, 1624.0], [20.0, 1875.5], [22.0, 2982.25], [23.0, 3000.5], [24.0, 2747.0], [25.0, 2845.8], [26.0, 3163.5], [27.0, 3222.0], [28.0, 897.9999999999999], [29.0, 1865.8], [30.0, 2062.0], [31.0, 1916.3333333333335], [32.0, 3895.0], [33.0, 1856.0], [34.0, 2103.5], [35.0, 1777.4444444444443], [36.0, 1510.8], [37.0, 4775.0], [38.0, 2853.0], [40.0, 57.333333333333336], [41.0, 3456.666666666667], [42.0, 578.0], [43.0, 28.0], [44.0, 4896.449999999999], [45.0, 4439.437500000001], [46.0, 228.5], [47.0, 710.4], [48.0, 1021.2499999999999], [49.0, 88.75], [50.0, 1821.3461538461534], [51.0, 1190.6666666666667], [52.0, 1272.0], [53.0, 2334.8], [54.0, 1659.8333333333333], [55.0, 6230.0], [56.0, 311.6666666666667], [57.0, 336.625], [58.0, 4566.416666666667], [59.0, 3461.263157894736], [60.0, 3263.1666666666665], [61.0, 2285.2], [62.0, 2518.333333333333], [63.0, 707.2307692307692], [64.0, 281.2], [65.0, 493.4], [66.0, 1506.076923076923], [67.0, 461.75], [68.0, 1711.2], [69.0, 788.75], [70.0, 3637.1666666666665], [71.0, 4248.0], [72.0, 4307.692307692307], [73.0, 3959.5000000000005], [74.0, 1106.142857142857], [75.0, 2229.75], [76.0, 2882.6], [77.0, 1279.5], [78.0, 2938.1111111111113], [79.0, 1868.9999999999998], [80.0, 1373.6666666666665], [81.0, 3296.142857142856], [82.0, 998.5], [83.0, 3983.142857142857], [84.0, 2047.8800000000008], [85.0, 33.333333333333336], [86.0, 2708.2], [87.0, 3790.681818181818], [88.0, 1191.1000000000001], [89.0, 1816.0], [90.0, 1267.0454545454545], [91.0, 635.1999999999999], [92.0, 2046.7272727272725], [93.0, 1333.5], [94.0, 1208.9], [95.0, 777.3076923076923], [96.0, 1220.75], [97.0, 2631.4444444444443], [98.0, 1909.0588235294122], [99.0, 880.125], [100.0, 4473.222222222223], [101.0, 3404.1388888888905], [102.0, 2462.9333333333334], [103.0, 4167.666666666667], [104.0, 1959.7999999999997], [105.0, 1572.8292682926829], [106.0, 322.5], [107.0, 581.3333333333335], [108.0, 379.23076923076917], [109.0, 2216.857142857143], [110.0, 369.32000000000005], [111.0, 1298.090909090909], [112.0, 2933.263157894737], [113.0, 37.666666666666664], [114.0, 1808.526315789474], [115.0, 3552.0], [116.0, 2506.8636363636365], [117.0, 2108.04], [118.0, 1586.7058823529412], [119.0, 272.7555706176382], [120.0, 737.8284023668634]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[116.05014871688473, 463.3662585598689]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 120.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 106.15, "minX": 1.70131866E12, "maxY": 2.776817135E8, "series": [{"data": [[1.7013192E12, 2.739978815E8], [1.7013189E12, 2.5767901941666666E8], [1.70131956E12, 2.776817135E8], [1.70131866E12, 1842492.1166666667], [1.70131926E12, 2.739978256E8], [1.70131896E12, 2.6136401283333334E8], [1.70131932E12, 2.742611171166667E8], [1.70131902E12, 2.6847050045E8], [1.70131938E12, 2.713658183E8], [1.70131908E12, 2.6110070241666666E8], [1.70131878E12, 2.3583323766666666E8], [1.70131944E12, 2.7031296415E8], [1.70131914E12, 2.7662996546666664E8], [1.70131884E12, 2.5531060603333333E8], [1.7013195E12, 2.6768090035E8], [1.70131872E12, 7.606704916666667E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7013192E12, 12625.566666666668], [1.7013189E12, 11840.883333333333], [1.70131956E12, 12313.75], [1.70131866E12, 106.15], [1.70131926E12, 12596.383333333333], [1.70131896E12, 12057.45], [1.70131932E12, 12646.9], [1.70131902E12, 12346.2], [1.70131938E12, 12500.816666666668], [1.70131908E12, 11998.4], [1.70131878E12, 10993.066666666668], [1.70131944E12, 12439.55], [1.70131914E12, 12751.683333333332], [1.70131884E12, 11932.366666666667], [1.7013195E12, 12318.383333333333], [1.70131872E12, 3663.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70131956E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 216.3731918997108, "minX": 1.70131866E12, "maxY": 6746.802618328296, "series": [{"data": [[1.7013192E12, 6455.722648752407], [1.7013189E12, 6402.700715015318], [1.70131956E12, 6326.741232227483], [1.70131866E12, 1674.2857142857144], [1.70131926E12, 6403.331412103748], [1.70131896E12, 6746.802618328296], [1.70131932E12, 6505.789827255281], [1.70131902E12, 6674.9205882352935], [1.70131938E12, 6547.42483026189], [1.70131908E12, 6614.381048387097], [1.70131878E12, 4115.9140625000055], [1.70131944E12, 6563.767283349562], [1.70131914E12, 6505.98763082778], [1.70131884E12, 6519.116494845361], [1.7013195E12, 6532.869223205498], [1.70131872E12, 4344.737931034481]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.7013192E12, 224.69001919385818], [1.7013189E12, 624.0205338809039], [1.70131956E12, 227.93756613756594], [1.70131866E12, 554.7499999999999], [1.70131926E12, 216.3731918997108], [1.70131896E12, 239.29429429429422], [1.70131932E12, 254.44603629417404], [1.70131902E12, 236.78564405113073], [1.70131938E12, 235.15682478218767], [1.70131908E12, 282.38703140830773], [1.70131878E12, 2026.8750000000023], [1.70131944E12, 220.61695906432738], [1.70131914E12, 250.09668246445517], [1.70131884E12, 835.9169960474312], [1.7013195E12, 224.77657480314946], [1.70131872E12, 2131.9755351681947]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70131956E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 216.36258437801328, "minX": 1.70131866E12, "maxY": 4109.896551724135, "series": [{"data": [[1.7013192E12, 848.4923224568132], [1.7013189E12, 1334.5280898876397], [1.70131956E12, 825.2379146919427], [1.70131866E12, 951.4285714285714], [1.70131926E12, 855.1469740634017], [1.70131896E12, 826.3685800604234], [1.70131932E12, 860.4001919385801], [1.70131902E12, 902.3872549019601], [1.70131938E12, 815.1096023278378], [1.70131908E12, 929.8356854838704], [1.70131878E12, 3506.984375000003], [1.70131944E12, 812.5491723466401], [1.70131914E12, 828.8658420551861], [1.70131884E12, 2172.5618556701043], [1.7013195E12, 823.6568338249757], [1.70131872E12, 4109.896551724135]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.7013192E12, 224.68330134357], [1.7013189E12, 623.5995893223812], [1.70131956E12, 227.5767195767197], [1.70131866E12, 554.4166666666667], [1.70131926E12, 216.36258437801328], [1.70131896E12, 239.08708708708724], [1.70131932E12, 254.39541547277938], [1.70131902E12, 236.2772861356932], [1.70131938E12, 235.15004840271058], [1.70131908E12, 282.1144883485309], [1.70131878E12, 2026.8491379310326], [1.70131944E12, 219.8265107212478], [1.70131914E12, 249.99526066350734], [1.70131884E12, 835.8241106719372], [1.7013195E12, 224.77066929133866], [1.70131872E12, 2131.932721712537]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70131956E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70131866E12, "maxY": 64.73073073073068, "series": [{"data": [[1.7013192E12, 0.0], [1.7013189E12, 3.473953013278858], [1.70131956E12, 0.5582938388625589], [1.70131866E12, 0.0], [1.70131926E12, 0.19020172910662853], [1.70131896E12, 0.0], [1.70131932E12, 0.8493282149712091], [1.70131902E12, 1.1147058823529423], [1.70131938E12, 0.802133850630456], [1.70131908E12, 1.2358870967741922], [1.70131878E12, 0.2700892857142856], [1.70131944E12, 0.8549172346640702], [1.70131914E12, 0.995242626070409], [1.70131884E12, 5.594845360824738], [1.7013195E12, 1.2802359882005905], [1.70131872E12, 0.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.7013192E12, 49.99712092130508], [1.7013189E12, 49.17967145790551], [1.70131956E12, 52.63068783068781], [1.70131866E12, 48.333333333333336], [1.70131926E12, 46.43008678881388], [1.70131896E12, 64.73073073073068], [1.70131932E12, 53.57497612225409], [1.70131902E12, 54.55260570304816], [1.70131938E12, 53.162633107454035], [1.70131908E12, 54.009118541033445], [1.70131878E12, 8.854525862068975], [1.70131944E12, 46.42592592592586], [1.70131914E12, 56.24170616113746], [1.70131884E12, 47.49110671936756], [1.7013195E12, 40.66141732283471], [1.70131872E12, 4.602446483180429]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70131956E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.70131866E12, "maxY": 25745.0, "series": [{"data": [[1.7013192E12, 10795.0], [1.7013189E12, 25745.0], [1.70131956E12, 10449.0], [1.70131866E12, 2891.0], [1.70131926E12, 11116.0], [1.70131896E12, 11743.0], [1.70131932E12, 11258.0], [1.70131902E12, 10972.0], [1.70131938E12, 11286.0], [1.70131908E12, 11594.0], [1.70131878E12, 16825.0], [1.70131944E12, 11041.0], [1.70131914E12, 10385.0], [1.70131884E12, 19652.0], [1.7013195E12, 10944.0], [1.70131872E12, 13831.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7013192E12, 7225.6], [1.7013189E12, 7730.600000000002], [1.70131956E12, 7206.700000000001], [1.70131866E12, 2201.0], [1.70131926E12, 7250.500000000001], [1.70131896E12, 7561.3], [1.70131932E12, 7408.0], [1.70131902E12, 7568.8], [1.70131938E12, 7417.0], [1.70131908E12, 7560.0], [1.70131878E12, 8411.0], [1.70131944E12, 7476.200000000001], [1.70131914E12, 7303.0], [1.70131884E12, 8114.1], [1.7013195E12, 7431.0], [1.70131872E12, 7455.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7013192E12, 8855.839999999993], [1.7013189E12, 16659.860000000004], [1.70131956E12, 8715.81], [1.70131866E12, 2891.0], [1.70131926E12, 8791.05], [1.70131896E12, 9442.819999999998], [1.70131932E12, 8980.59999999999], [1.70131902E12, 9103.24], [1.70131938E12, 8903.449999999999], [1.70131908E12, 9163.2], [1.70131878E12, 12917.5], [1.70131944E12, 8941.740000000002], [1.70131914E12, 8932.319999999996], [1.70131884E12, 16036.370000000004], [1.7013195E12, 9079.960000000001], [1.70131872E12, 12414.52000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7013192E12, 7724.8], [1.7013189E12, 8465.899999999996], [1.70131956E12, 7681.0], [1.70131866E12, 2891.0], [1.70131926E12, 7789.5], [1.70131896E12, 8276.449999999999], [1.70131932E12, 7931.5], [1.70131902E12, 8168.1], [1.70131938E12, 7945.75], [1.70131908E12, 8142.0], [1.70131878E12, 10338.5], [1.70131944E12, 8032.599999999999], [1.70131914E12, 7888.499999999998], [1.70131884E12, 10640.699999999997], [1.7013195E12, 7942.199999999999], [1.70131872E12, 9008.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7013192E12, 21.0], [1.7013189E12, 23.0], [1.70131956E12, 21.0], [1.70131866E12, 29.0], [1.70131926E12, 21.0], [1.70131896E12, 21.0], [1.70131932E12, 22.0], [1.70131902E12, 22.0], [1.70131938E12, 21.0], [1.70131908E12, 22.0], [1.70131878E12, 21.0], [1.70131944E12, 21.0], [1.70131914E12, 22.0], [1.70131884E12, 23.0], [1.7013195E12, 21.0], [1.70131872E12, 25.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7013192E12, 1493.0], [1.7013189E12, 2196.0], [1.70131956E12, 4650.5], [1.70131866E12, 941.0], [1.70131926E12, 3801.5], [1.70131896E12, 1378.5], [1.70131932E12, 1561.0], [1.70131902E12, 3808.0], [1.70131938E12, 1531.5], [1.70131908E12, 3805.0], [1.70131878E12, 1597.0], [1.70131944E12, 3485.0], [1.70131914E12, 1587.5], [1.70131884E12, 2464.0], [1.7013195E12, 3573.0], [1.70131872E12, 2241.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70131956E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 232.0, "minX": 1.0, "maxY": 6022.0, "series": [{"data": [[2.0, 3272.0], [3.0, 1458.0], [4.0, 3102.0], [5.0, 2995.5], [6.0, 2970.5], [7.0, 5119.5], [8.0, 1633.0], [9.0, 1229.0], [10.0, 2943.0], [11.0, 1323.0], [12.0, 2071.5], [13.0, 4341.0], [14.0, 2842.5], [15.0, 2643.0], [16.0, 2476.5], [17.0, 1691.0], [18.0, 2035.0], [19.0, 982.0], [20.0, 1017.5], [21.0, 4559.5], [22.0, 4556.0], [23.0, 4845.0], [24.0, 961.0], [25.0, 3808.0], [26.0, 3683.0], [27.0, 4170.5], [28.0, 4566.0], [29.0, 2430.0], [30.0, 1265.0], [31.0, 1207.0], [32.0, 4469.5], [33.0, 1356.0], [34.0, 4131.5], [35.0, 1184.0], [36.0, 1996.0], [37.0, 1756.5], [38.0, 3963.5], [39.0, 1514.0], [41.0, 1419.0], [40.0, 1411.0], [42.0, 909.0], [43.0, 3455.5], [44.0, 4350.5], [45.0, 1643.0], [46.0, 2228.5], [47.0, 1514.0], [48.0, 786.5], [49.0, 1719.0], [51.0, 1385.0], [50.0, 5596.5], [53.0, 955.0], [52.0, 825.0], [55.0, 1697.5], [54.0, 1363.0], [56.0, 1550.5], [57.0, 5066.5], [59.0, 1497.0], [58.0, 5127.0], [60.0, 4292.5], [61.0, 629.0], [62.0, 760.0], [63.0, 5354.0], [67.0, 1947.0], [69.0, 4415.0], [68.0, 492.0], [75.0, 232.0], [1.0, 4612.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 6022.0], [37.0, 2012.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 75.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 232.0, "minX": 1.0, "maxY": 6009.0, "series": [{"data": [[2.0, 3272.0], [3.0, 1376.0], [4.0, 3102.0], [5.0, 2925.5], [6.0, 2898.5], [7.0, 4949.5], [8.0, 804.5], [9.0, 1229.0], [10.0, 2862.5], [11.0, 1024.0], [12.0, 1907.5], [13.0, 646.0], [14.0, 506.5], [15.0, 912.0], [16.0, 571.5], [17.0, 547.0], [18.0, 623.0], [19.0, 417.0], [20.0, 461.5], [21.0, 599.0], [22.0, 483.5], [23.0, 472.0], [24.0, 466.0], [25.0, 468.0], [26.0, 482.0], [27.0, 468.0], [28.0, 467.0], [29.0, 466.0], [30.0, 479.0], [31.0, 466.0], [32.0, 490.0], [33.0, 460.0], [34.0, 478.5], [35.0, 457.0], [36.0, 460.0], [37.0, 438.0], [38.0, 468.0], [39.0, 441.0], [41.0, 461.0], [40.0, 460.5], [42.0, 479.5], [43.0, 468.0], [44.0, 485.5], [45.0, 451.0], [46.0, 456.0], [47.0, 447.0], [48.0, 436.0], [49.0, 483.0], [51.0, 452.0], [50.0, 480.5], [53.0, 405.0], [52.0, 424.0], [55.0, 508.0], [54.0, 423.5], [56.0, 491.0], [57.0, 487.5], [59.0, 422.0], [58.0, 516.0], [60.0, 490.0], [61.0, 401.0], [62.0, 401.0], [63.0, 475.0], [67.0, 1947.0], [69.0, 538.0], [68.0, 447.5], [75.0, 232.0], [1.0, 4483.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 6009.0], [37.0, 2012.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 75.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.70131866E12, "maxY": 35.1, "series": [{"data": [[1.7013192E12, 34.71666666666667], [1.7013189E12, 32.45], [1.70131956E12, 31.366666666666667], [1.70131866E12, 0.43333333333333335], [1.70131926E12, 34.6], [1.70131896E12, 33.28333333333333], [1.70131932E12, 34.916666666666664], [1.70131902E12, 33.9], [1.70131938E12, 34.416666666666664], [1.70131908E12, 32.96666666666667], [1.70131878E12, 31.283333333333335], [1.70131944E12, 34.2], [1.70131914E12, 35.1], [1.70131884E12, 33.03333333333333], [1.7013195E12, 33.88333333333333], [1.70131872E12, 11.283333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70131956E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70131866E12, "maxY": 35.1, "series": [{"data": [[1.7013192E12, 34.71666666666667], [1.7013189E12, 32.55], [1.70131956E12, 33.333333333333336], [1.70131866E12, 0.31666666666666665], [1.70131926E12, 34.63333333333333], [1.70131896E12, 33.2], [1.70131932E12, 34.81666666666667], [1.70131902E12, 33.95], [1.70131938E12, 34.4], [1.70131908E12, 32.983333333333334], [1.70131878E12, 30.4], [1.70131944E12, 34.21666666666667], [1.70131914E12, 35.1], [1.70131884E12, 33.03333333333333], [1.7013195E12, 33.88333333333333], [1.70131872E12, 10.266666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7013192E12, 0.016666666666666666]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.70131872E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70131956E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70131866E12, "maxY": 17.583333333333332, "series": [{"data": [[1.7013192E12, 0.016666666666666666], [1.70131872E12, 0.016666666666666666]], "isOverall": false, "label": "Leer Archivo-failure", "isController": false}, {"data": [[1.7013192E12, 17.35], [1.7013189E12, 16.316666666666666], [1.70131956E12, 17.583333333333332], [1.70131866E12, 0.11666666666666667], [1.70131926E12, 17.35], [1.70131896E12, 16.55], [1.70131932E12, 17.366666666666667], [1.70131902E12, 17.0], [1.70131938E12, 17.183333333333334], [1.70131908E12, 16.533333333333335], [1.70131878E12, 14.933333333333334], [1.70131944E12, 17.116666666666667], [1.70131914E12, 17.516666666666666], [1.70131884E12, 16.166666666666668], [1.7013195E12, 16.95], [1.70131872E12, 4.816666666666666]], "isOverall": false, "label": "Leer Archivo-success", "isController": false}, {"data": [[1.7013192E12, 17.366666666666667], [1.7013189E12, 16.233333333333334], [1.70131956E12, 15.75], [1.70131866E12, 0.2], [1.70131926E12, 17.283333333333335], [1.70131896E12, 16.65], [1.70131932E12, 17.45], [1.70131902E12, 16.95], [1.70131938E12, 17.216666666666665], [1.70131908E12, 16.45], [1.70131878E12, 15.466666666666667], [1.70131944E12, 17.1], [1.70131914E12, 17.583333333333332], [1.70131884E12, 16.866666666666667], [1.7013195E12, 16.933333333333334], [1.70131872E12, 5.45]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70131956E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70131866E12, "maxY": 35.1, "series": [{"data": [[1.7013192E12, 34.71666666666667], [1.7013189E12, 32.55], [1.70131956E12, 33.333333333333336], [1.70131866E12, 0.31666666666666665], [1.70131926E12, 34.63333333333333], [1.70131896E12, 33.2], [1.70131932E12, 34.81666666666667], [1.70131902E12, 33.95], [1.70131938E12, 34.4], [1.70131908E12, 32.983333333333334], [1.70131878E12, 30.4], [1.70131944E12, 34.21666666666667], [1.70131914E12, 35.1], [1.70131884E12, 33.03333333333333], [1.7013195E12, 33.88333333333333], [1.70131872E12, 10.266666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7013192E12, 0.016666666666666666], [1.70131872E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70131956E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

