/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 10922.0, "series": [{"data": [[0.0, 430.0], [0.1, 430.0], [0.2, 479.0], [0.3, 495.0], [0.4, 495.0], [0.5, 523.0], [0.6, 533.0], [0.7, 569.0], [0.8, 615.0], [0.9, 617.0], [1.0, 618.0], [1.1, 620.0], [1.2, 623.0], [1.3, 631.0], [1.4, 640.0], [1.5, 641.0], [1.6, 650.0], [1.7, 651.0], [1.8, 651.0], [1.9, 654.0], [2.0, 654.0], [2.1, 658.0], [2.2, 692.0], [2.3, 693.0], [2.4, 700.0], [2.5, 707.0], [2.6, 735.0], [2.7, 735.0], [2.8, 736.0], [2.9, 741.0], [3.0, 744.0], [3.1, 753.0], [3.2, 765.0], [3.3, 765.0], [3.4, 767.0], [3.5, 767.0], [3.6, 770.0], [3.7, 771.0], [3.8, 778.0], [3.9, 833.0], [4.0, 840.0], [4.1, 847.0], [4.2, 849.0], [4.3, 863.0], [4.4, 870.0], [4.5, 877.0], [4.6, 878.0], [4.7, 880.0], [4.8, 928.0], [4.9, 938.0], [5.0, 942.0], [5.1, 950.0], [5.2, 963.0], [5.3, 988.0], [5.4, 1000.0], [5.5, 1003.0], [5.6, 1006.0], [5.7, 1019.0], [5.8, 1035.0], [5.9, 1065.0], [6.0, 1099.0], [6.1, 1108.0], [6.2, 1113.0], [6.3, 1136.0], [6.4, 1154.0], [6.5, 1169.0], [6.6, 1179.0], [6.7, 1180.0], [6.8, 1181.0], [6.9, 1189.0], [7.0, 1190.0], [7.1, 1217.0], [7.2, 1225.0], [7.3, 1265.0], [7.4, 1326.0], [7.5, 1332.0], [7.6, 1335.0], [7.7, 1351.0], [7.8, 1391.0], [7.9, 1399.0], [8.0, 1403.0], [8.1, 1425.0], [8.2, 1452.0], [8.3, 1468.0], [8.4, 1488.0], [8.5, 1491.0], [8.6, 1499.0], [8.7, 1505.0], [8.8, 1507.0], [8.9, 1538.0], [9.0, 1542.0], [9.1, 1543.0], [9.2, 1543.0], [9.3, 1546.0], [9.4, 1561.0], [9.5, 1563.0], [9.6, 1567.0], [9.7, 1568.0], [9.8, 1586.0], [9.9, 1591.0], [10.0, 1593.0], [10.1, 1606.0], [10.2, 1648.0], [10.3, 1679.0], [10.4, 1689.0], [10.5, 1703.0], [10.6, 1703.0], [10.7, 1706.0], [10.8, 1733.0], [10.9, 1736.0], [11.0, 1767.0], [11.1, 1802.0], [11.2, 1837.0], [11.3, 1864.0], [11.4, 1907.0], [11.5, 1912.0], [11.6, 1965.0], [11.7, 1978.0], [11.8, 1984.0], [11.9, 2003.0], [12.0, 2013.0], [12.1, 2035.0], [12.2, 2120.0], [12.3, 2124.0], [12.4, 2141.0], [12.5, 2154.0], [12.6, 2187.0], [12.7, 2188.0], [12.8, 2198.0], [12.9, 2246.0], [13.0, 2269.0], [13.1, 2297.0], [13.2, 2320.0], [13.3, 2328.0], [13.4, 2351.0], [13.5, 2451.0], [13.6, 2455.0], [13.7, 2463.0], [13.8, 2467.0], [13.9, 2487.0], [14.0, 2601.0], [14.1, 2622.0], [14.2, 2635.0], [14.3, 2680.0], [14.4, 2700.0], [14.5, 2731.0], [14.6, 2743.0], [14.7, 2803.0], [14.8, 2813.0], [14.9, 2844.0], [15.0, 2847.0], [15.1, 2850.0], [15.2, 2913.0], [15.3, 3059.0], [15.4, 3071.0], [15.5, 3107.0], [15.6, 3113.0], [15.7, 3143.0], [15.8, 3156.0], [15.9, 3160.0], [16.0, 3176.0], [16.1, 3183.0], [16.2, 3224.0], [16.3, 3224.0], [16.4, 3292.0], [16.5, 3296.0], [16.6, 3344.0], [16.7, 3378.0], [16.8, 3401.0], [16.9, 3407.0], [17.0, 3426.0], [17.1, 3452.0], [17.2, 3456.0], [17.3, 3462.0], [17.4, 3532.0], [17.5, 3560.0], [17.6, 3562.0], [17.7, 3563.0], [17.8, 3583.0], [17.9, 3586.0], [18.0, 3669.0], [18.1, 3684.0], [18.2, 3848.0], [18.3, 3872.0], [18.4, 3876.0], [18.5, 3900.0], [18.6, 3902.0], [18.7, 3914.0], [18.8, 3914.0], [18.9, 3955.0], [19.0, 3987.0], [19.1, 4035.0], [19.2, 4036.0], [19.3, 4052.0], [19.4, 4086.0], [19.5, 4104.0], [19.6, 4125.0], [19.7, 4145.0], [19.8, 4165.0], [19.9, 4171.0], [20.0, 4177.0], [20.1, 4182.0], [20.2, 4190.0], [20.3, 4191.0], [20.4, 4214.0], [20.5, 4263.0], [20.6, 4281.0], [20.7, 4284.0], [20.8, 4293.0], [20.9, 4304.0], [21.0, 4320.0], [21.1, 4327.0], [21.2, 4328.0], [21.3, 4337.0], [21.4, 4345.0], [21.5, 4347.0], [21.6, 4356.0], [21.7, 4362.0], [21.8, 4377.0], [21.9, 4388.0], [22.0, 4389.0], [22.1, 4389.0], [22.2, 4416.0], [22.3, 4429.0], [22.4, 4443.0], [22.5, 4444.0], [22.6, 4471.0], [22.7, 4482.0], [22.8, 4519.0], [22.9, 4526.0], [23.0, 4534.0], [23.1, 4546.0], [23.2, 4549.0], [23.3, 4558.0], [23.4, 4579.0], [23.5, 4588.0], [23.6, 4592.0], [23.7, 4594.0], [23.8, 4604.0], [23.9, 4611.0], [24.0, 4614.0], [24.1, 4618.0], [24.2, 4621.0], [24.3, 4632.0], [24.4, 4638.0], [24.5, 4654.0], [24.6, 4663.0], [24.7, 4663.0], [24.8, 4669.0], [24.9, 4689.0], [25.0, 4703.0], [25.1, 4704.0], [25.2, 4706.0], [25.3, 4708.0], [25.4, 4715.0], [25.5, 4736.0], [25.6, 4740.0], [25.7, 4782.0], [25.8, 4784.0], [25.9, 4795.0], [26.0, 4828.0], [26.1, 4831.0], [26.2, 4833.0], [26.3, 4867.0], [26.4, 4867.0], [26.5, 4883.0], [26.6, 4884.0], [26.7, 4884.0], [26.8, 4925.0], [26.9, 4927.0], [27.0, 4964.0], [27.1, 4971.0], [27.2, 4993.0], [27.3, 4994.0], [27.4, 5031.0], [27.5, 5052.0], [27.6, 5052.0], [27.7, 5061.0], [27.8, 5105.0], [27.9, 5108.0], [28.0, 5113.0], [28.1, 5118.0], [28.2, 5137.0], [28.3, 5140.0], [28.4, 5146.0], [28.5, 5157.0], [28.6, 5179.0], [28.7, 5187.0], [28.8, 5187.0], [28.9, 5202.0], [29.0, 5224.0], [29.1, 5242.0], [29.2, 5278.0], [29.3, 5324.0], [29.4, 5341.0], [29.5, 5342.0], [29.6, 5344.0], [29.7, 5362.0], [29.8, 5398.0], [29.9, 5407.0], [30.0, 5428.0], [30.1, 5453.0], [30.2, 5456.0], [30.3, 5472.0], [30.4, 5477.0], [30.5, 5491.0], [30.6, 5492.0], [30.7, 5497.0], [30.8, 5498.0], [30.9, 5552.0], [31.0, 5560.0], [31.1, 5560.0], [31.2, 5572.0], [31.3, 5582.0], [31.4, 5582.0], [31.5, 5587.0], [31.6, 5599.0], [31.7, 5612.0], [31.8, 5614.0], [31.9, 5617.0], [32.0, 5637.0], [32.1, 5644.0], [32.2, 5647.0], [32.3, 5683.0], [32.4, 5687.0], [32.5, 5692.0], [32.6, 5703.0], [32.7, 5722.0], [32.8, 5729.0], [32.9, 5730.0], [33.0, 5741.0], [33.1, 5745.0], [33.2, 5748.0], [33.3, 5751.0], [33.4, 5751.0], [33.5, 5767.0], [33.6, 5772.0], [33.7, 5773.0], [33.8, 5789.0], [33.9, 5791.0], [34.0, 5792.0], [34.1, 5800.0], [34.2, 5803.0], [34.3, 5806.0], [34.4, 5812.0], [34.5, 5818.0], [34.6, 5824.0], [34.7, 5825.0], [34.8, 5834.0], [34.9, 5852.0], [35.0, 5862.0], [35.1, 5896.0], [35.2, 5903.0], [35.3, 5903.0], [35.4, 5910.0], [35.5, 5953.0], [35.6, 5960.0], [35.7, 5961.0], [35.8, 5965.0], [35.9, 5973.0], [36.0, 5973.0], [36.1, 5985.0], [36.2, 6002.0], [36.3, 6004.0], [36.4, 6005.0], [36.5, 6008.0], [36.6, 6021.0], [36.7, 6023.0], [36.8, 6024.0], [36.9, 6027.0], [37.0, 6035.0], [37.1, 6047.0], [37.2, 6050.0], [37.3, 6053.0], [37.4, 6063.0], [37.5, 6070.0], [37.6, 6072.0], [37.7, 6073.0], [37.8, 6074.0], [37.9, 6078.0], [38.0, 6079.0], [38.1, 6083.0], [38.2, 6090.0], [38.3, 6092.0], [38.4, 6100.0], [38.5, 6109.0], [38.6, 6114.0], [38.7, 6122.0], [38.8, 6155.0], [38.9, 6158.0], [39.0, 6159.0], [39.1, 6171.0], [39.2, 6192.0], [39.3, 6201.0], [39.4, 6204.0], [39.5, 6217.0], [39.6, 6218.0], [39.7, 6219.0], [39.8, 6225.0], [39.9, 6232.0], [40.0, 6233.0], [40.1, 6237.0], [40.2, 6243.0], [40.3, 6248.0], [40.4, 6249.0], [40.5, 6263.0], [40.6, 6264.0], [40.7, 6265.0], [40.8, 6271.0], [40.9, 6271.0], [41.0, 6272.0], [41.1, 6274.0], [41.2, 6284.0], [41.3, 6316.0], [41.4, 6340.0], [41.5, 6343.0], [41.6, 6375.0], [41.7, 6376.0], [41.8, 6376.0], [41.9, 6379.0], [42.0, 6382.0], [42.1, 6386.0], [42.2, 6392.0], [42.3, 6403.0], [42.4, 6420.0], [42.5, 6424.0], [42.6, 6427.0], [42.7, 6432.0], [42.8, 6432.0], [42.9, 6439.0], [43.0, 6443.0], [43.1, 6449.0], [43.2, 6451.0], [43.3, 6458.0], [43.4, 6472.0], [43.5, 6473.0], [43.6, 6474.0], [43.7, 6474.0], [43.8, 6477.0], [43.9, 6482.0], [44.0, 6482.0], [44.1, 6483.0], [44.2, 6495.0], [44.3, 6501.0], [44.4, 6503.0], [44.5, 6504.0], [44.6, 6508.0], [44.7, 6509.0], [44.8, 6521.0], [44.9, 6525.0], [45.0, 6534.0], [45.1, 6538.0], [45.2, 6539.0], [45.3, 6539.0], [45.4, 6545.0], [45.5, 6548.0], [45.6, 6551.0], [45.7, 6560.0], [45.8, 6570.0], [45.9, 6576.0], [46.0, 6577.0], [46.1, 6585.0], [46.2, 6603.0], [46.3, 6606.0], [46.4, 6612.0], [46.5, 6613.0], [46.6, 6619.0], [46.7, 6621.0], [46.8, 6622.0], [46.9, 6625.0], [47.0, 6629.0], [47.1, 6634.0], [47.2, 6638.0], [47.3, 6640.0], [47.4, 6652.0], [47.5, 6652.0], [47.6, 6654.0], [47.7, 6659.0], [47.8, 6665.0], [47.9, 6675.0], [48.0, 6685.0], [48.1, 6689.0], [48.2, 6691.0], [48.3, 6694.0], [48.4, 6699.0], [48.5, 6703.0], [48.6, 6714.0], [48.7, 6717.0], [48.8, 6724.0], [48.9, 6730.0], [49.0, 6736.0], [49.1, 6746.0], [49.2, 6754.0], [49.3, 6756.0], [49.4, 6757.0], [49.5, 6759.0], [49.6, 6763.0], [49.7, 6772.0], [49.8, 6779.0], [49.9, 6782.0], [50.0, 6783.0], [50.1, 6783.0], [50.2, 6784.0], [50.3, 6786.0], [50.4, 6802.0], [50.5, 6815.0], [50.6, 6821.0], [50.7, 6831.0], [50.8, 6841.0], [50.9, 6848.0], [51.0, 6850.0], [51.1, 6854.0], [51.2, 6864.0], [51.3, 6866.0], [51.4, 6866.0], [51.5, 6875.0], [51.6, 6889.0], [51.7, 6890.0], [51.8, 6896.0], [51.9, 6898.0], [52.0, 6898.0], [52.1, 6904.0], [52.2, 6911.0], [52.3, 6911.0], [52.4, 6913.0], [52.5, 6913.0], [52.6, 6915.0], [52.7, 6917.0], [52.8, 6919.0], [52.9, 6923.0], [53.0, 6924.0], [53.1, 6930.0], [53.2, 6935.0], [53.3, 6937.0], [53.4, 6938.0], [53.5, 6944.0], [53.6, 6944.0], [53.7, 6945.0], [53.8, 6945.0], [53.9, 6954.0], [54.0, 6956.0], [54.1, 6961.0], [54.2, 6965.0], [54.3, 6968.0], [54.4, 6974.0], [54.5, 6976.0], [54.6, 6980.0], [54.7, 6980.0], [54.8, 6982.0], [54.9, 6991.0], [55.0, 7001.0], [55.1, 7001.0], [55.2, 7012.0], [55.3, 7015.0], [55.4, 7015.0], [55.5, 7024.0], [55.6, 7026.0], [55.7, 7027.0], [55.8, 7027.0], [55.9, 7028.0], [56.0, 7028.0], [56.1, 7029.0], [56.2, 7033.0], [56.3, 7041.0], [56.4, 7041.0], [56.5, 7049.0], [56.6, 7051.0], [56.7, 7053.0], [56.8, 7057.0], [56.9, 7057.0], [57.0, 7070.0], [57.1, 7079.0], [57.2, 7090.0], [57.3, 7091.0], [57.4, 7105.0], [57.5, 7107.0], [57.6, 7117.0], [57.7, 7119.0], [57.8, 7127.0], [57.9, 7130.0], [58.0, 7132.0], [58.1, 7145.0], [58.2, 7145.0], [58.3, 7147.0], [58.4, 7151.0], [58.5, 7155.0], [58.6, 7156.0], [58.7, 7161.0], [58.8, 7164.0], [58.9, 7169.0], [59.0, 7171.0], [59.1, 7171.0], [59.2, 7175.0], [59.3, 7175.0], [59.4, 7178.0], [59.5, 7178.0], [59.6, 7192.0], [59.7, 7193.0], [59.8, 7194.0], [59.9, 7194.0], [60.0, 7203.0], [60.1, 7206.0], [60.2, 7207.0], [60.3, 7207.0], [60.4, 7222.0], [60.5, 7223.0], [60.6, 7223.0], [60.7, 7227.0], [60.8, 7229.0], [60.9, 7229.0], [61.0, 7229.0], [61.1, 7236.0], [61.2, 7237.0], [61.3, 7239.0], [61.4, 7249.0], [61.5, 7250.0], [61.6, 7253.0], [61.7, 7255.0], [61.8, 7259.0], [61.9, 7260.0], [62.0, 7264.0], [62.1, 7271.0], [62.2, 7275.0], [62.3, 7280.0], [62.4, 7289.0], [62.5, 7290.0], [62.6, 7292.0], [62.7, 7294.0], [62.8, 7307.0], [62.9, 7310.0], [63.0, 7311.0], [63.1, 7315.0], [63.2, 7328.0], [63.3, 7341.0], [63.4, 7343.0], [63.5, 7344.0], [63.6, 7347.0], [63.7, 7357.0], [63.8, 7357.0], [63.9, 7369.0], [64.0, 7372.0], [64.1, 7388.0], [64.2, 7389.0], [64.3, 7391.0], [64.4, 7394.0], [64.5, 7395.0], [64.6, 7396.0], [64.7, 7398.0], [64.8, 7398.0], [64.9, 7412.0], [65.0, 7415.0], [65.1, 7427.0], [65.2, 7435.0], [65.3, 7443.0], [65.4, 7445.0], [65.5, 7449.0], [65.6, 7449.0], [65.7, 7450.0], [65.8, 7450.0], [65.9, 7452.0], [66.0, 7454.0], [66.1, 7462.0], [66.2, 7463.0], [66.3, 7466.0], [66.4, 7476.0], [66.5, 7478.0], [66.6, 7482.0], [66.7, 7482.0], [66.8, 7493.0], [66.9, 7498.0], [67.0, 7500.0], [67.1, 7501.0], [67.2, 7504.0], [67.3, 7505.0], [67.4, 7506.0], [67.5, 7509.0], [67.6, 7515.0], [67.7, 7520.0], [67.8, 7522.0], [67.9, 7525.0], [68.0, 7525.0], [68.1, 7527.0], [68.2, 7535.0], [68.3, 7537.0], [68.4, 7540.0], [68.5, 7541.0], [68.6, 7546.0], [68.7, 7551.0], [68.8, 7554.0], [68.9, 7556.0], [69.0, 7558.0], [69.1, 7558.0], [69.2, 7562.0], [69.3, 7563.0], [69.4, 7573.0], [69.5, 7576.0], [69.6, 7577.0], [69.7, 7580.0], [69.8, 7584.0], [69.9, 7587.0], [70.0, 7587.0], [70.1, 7591.0], [70.2, 7592.0], [70.3, 7600.0], [70.4, 7602.0], [70.5, 7613.0], [70.6, 7618.0], [70.7, 7621.0], [70.8, 7630.0], [70.9, 7646.0], [71.0, 7651.0], [71.1, 7651.0], [71.2, 7655.0], [71.3, 7666.0], [71.4, 7672.0], [71.5, 7688.0], [71.6, 7692.0], [71.7, 7703.0], [71.8, 7706.0], [71.9, 7733.0], [72.0, 7739.0], [72.1, 7741.0], [72.2, 7745.0], [72.3, 7748.0], [72.4, 7761.0], [72.5, 7764.0], [72.6, 7766.0], [72.7, 7767.0], [72.8, 7776.0], [72.9, 7776.0], [73.0, 7781.0], [73.1, 7782.0], [73.2, 7788.0], [73.3, 7793.0], [73.4, 7803.0], [73.5, 7804.0], [73.6, 7816.0], [73.7, 7822.0], [73.8, 7826.0], [73.9, 7834.0], [74.0, 7846.0], [74.1, 7850.0], [74.2, 7854.0], [74.3, 7856.0], [74.4, 7858.0], [74.5, 7859.0], [74.6, 7864.0], [74.7, 7868.0], [74.8, 7875.0], [74.9, 7876.0], [75.0, 7889.0], [75.1, 7890.0], [75.2, 7890.0], [75.3, 7901.0], [75.4, 7903.0], [75.5, 7905.0], [75.6, 7912.0], [75.7, 7913.0], [75.8, 7916.0], [75.9, 7917.0], [76.0, 7920.0], [76.1, 7923.0], [76.2, 7926.0], [76.3, 7930.0], [76.4, 7935.0], [76.5, 7940.0], [76.6, 7942.0], [76.7, 7947.0], [76.8, 7953.0], [76.9, 7955.0], [77.0, 7958.0], [77.1, 7964.0], [77.2, 7970.0], [77.3, 7972.0], [77.4, 7973.0], [77.5, 7976.0], [77.6, 7979.0], [77.7, 7980.0], [77.8, 7987.0], [77.9, 7988.0], [78.0, 7989.0], [78.1, 7992.0], [78.2, 8005.0], [78.3, 8005.0], [78.4, 8010.0], [78.5, 8010.0], [78.6, 8012.0], [78.7, 8014.0], [78.8, 8014.0], [78.9, 8017.0], [79.0, 8018.0], [79.1, 8026.0], [79.2, 8029.0], [79.3, 8040.0], [79.4, 8041.0], [79.5, 8042.0], [79.6, 8059.0], [79.7, 8060.0], [79.8, 8074.0], [79.9, 8090.0], [80.0, 8095.0], [80.1, 8096.0], [80.2, 8098.0], [80.3, 8100.0], [80.4, 8100.0], [80.5, 8102.0], [80.6, 8109.0], [80.7, 8112.0], [80.8, 8119.0], [80.9, 8128.0], [81.0, 8135.0], [81.1, 8138.0], [81.2, 8146.0], [81.3, 8155.0], [81.4, 8156.0], [81.5, 8161.0], [81.6, 8166.0], [81.7, 8174.0], [81.8, 8177.0], [81.9, 8177.0], [82.0, 8180.0], [82.1, 8181.0], [82.2, 8182.0], [82.3, 8183.0], [82.4, 8183.0], [82.5, 8187.0], [82.6, 8187.0], [82.7, 8188.0], [82.8, 8199.0], [82.9, 8208.0], [83.0, 8212.0], [83.1, 8214.0], [83.2, 8215.0], [83.3, 8230.0], [83.4, 8238.0], [83.5, 8244.0], [83.6, 8252.0], [83.7, 8258.0], [83.8, 8278.0], [83.9, 8287.0], [84.0, 8290.0], [84.1, 8292.0], [84.2, 8299.0], [84.3, 8299.0], [84.4, 8309.0], [84.5, 8310.0], [84.6, 8314.0], [84.7, 8318.0], [84.8, 8322.0], [84.9, 8333.0], [85.0, 8344.0], [85.1, 8346.0], [85.2, 8347.0], [85.3, 8370.0], [85.4, 8382.0], [85.5, 8390.0], [85.6, 8397.0], [85.7, 8405.0], [85.8, 8430.0], [85.9, 8440.0], [86.0, 8455.0], [86.1, 8455.0], [86.2, 8461.0], [86.3, 8473.0], [86.4, 8478.0], [86.5, 8491.0], [86.6, 8502.0], [86.7, 8506.0], [86.8, 8514.0], [86.9, 8516.0], [87.0, 8520.0], [87.1, 8523.0], [87.2, 8545.0], [87.3, 8546.0], [87.4, 8556.0], [87.5, 8557.0], [87.6, 8558.0], [87.7, 8561.0], [87.8, 8573.0], [87.9, 8608.0], [88.0, 8609.0], [88.1, 8627.0], [88.2, 8645.0], [88.3, 8646.0], [88.4, 8656.0], [88.5, 8661.0], [88.6, 8667.0], [88.7, 8667.0], [88.8, 8672.0], [88.9, 8681.0], [89.0, 8691.0], [89.1, 8708.0], [89.2, 8711.0], [89.3, 8719.0], [89.4, 8724.0], [89.5, 8762.0], [89.6, 8766.0], [89.7, 8767.0], [89.8, 8824.0], [89.9, 8845.0], [90.0, 8864.0], [90.1, 8865.0], [90.2, 8869.0], [90.3, 8869.0], [90.4, 8869.0], [90.5, 8874.0], [90.6, 8879.0], [90.7, 8887.0], [90.8, 8898.0], [90.9, 8906.0], [91.0, 8908.0], [91.1, 8912.0], [91.2, 8915.0], [91.3, 8920.0], [91.4, 8921.0], [91.5, 8948.0], [91.6, 8954.0], [91.7, 8959.0], [91.8, 8977.0], [91.9, 8979.0], [92.0, 8983.0], [92.1, 8983.0], [92.2, 8985.0], [92.3, 8986.0], [92.4, 8988.0], [92.5, 8999.0], [92.6, 9002.0], [92.7, 9005.0], [92.8, 9006.0], [92.9, 9012.0], [93.0, 9028.0], [93.1, 9031.0], [93.2, 9035.0], [93.3, 9046.0], [93.4, 9051.0], [93.5, 9051.0], [93.6, 9057.0], [93.7, 9068.0], [93.8, 9082.0], [93.9, 9084.0], [94.0, 9087.0], [94.1, 9095.0], [94.2, 9101.0], [94.3, 9112.0], [94.4, 9113.0], [94.5, 9119.0], [94.6, 9140.0], [94.7, 9159.0], [94.8, 9180.0], [94.9, 9184.0], [95.0, 9185.0], [95.1, 9283.0], [95.2, 9297.0], [95.3, 9304.0], [95.4, 9315.0], [95.5, 9337.0], [95.6, 9337.0], [95.7, 9344.0], [95.8, 9352.0], [95.9, 9358.0], [96.0, 9372.0], [96.1, 9373.0], [96.2, 9377.0], [96.3, 9384.0], [96.4, 9422.0], [96.5, 9485.0], [96.6, 9509.0], [96.7, 9518.0], [96.8, 9528.0], [96.9, 9545.0], [97.0, 9545.0], [97.1, 9552.0], [97.2, 9564.0], [97.3, 9580.0], [97.4, 9596.0], [97.5, 9603.0], [97.6, 9617.0], [97.7, 9632.0], [97.8, 9664.0], [97.9, 9680.0], [98.0, 9716.0], [98.1, 9810.0], [98.2, 9846.0], [98.3, 9949.0], [98.4, 9952.0], [98.5, 9984.0], [98.6, 9995.0], [98.7, 10005.0], [98.8, 10019.0], [98.9, 10026.0], [99.0, 10026.0], [99.1, 10040.0], [99.2, 10072.0], [99.3, 10203.0], [99.4, 10221.0], [99.5, 10267.0], [99.6, 10300.0], [99.7, 10351.0], [99.8, 10566.0], [99.9, 10922.0], [100.0, 10922.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[0.0, 9.0], [0.1, 10.0], [0.2, 10.0], [0.3, 10.0], [0.4, 11.0], [0.5, 11.0], [0.6, 11.0], [0.7, 12.0], [0.8, 12.0], [0.9, 12.0], [1.0, 12.0], [1.1, 12.0], [1.2, 12.0], [1.3, 12.0], [1.4, 13.0], [1.5, 13.0], [1.6, 14.0], [1.7, 14.0], [1.8, 14.0], [1.9, 14.0], [2.0, 15.0], [2.1, 15.0], [2.2, 15.0], [2.3, 16.0], [2.4, 16.0], [2.5, 16.0], [2.6, 17.0], [2.7, 17.0], [2.8, 18.0], [2.9, 19.0], [3.0, 19.0], [3.1, 19.0], [3.2, 20.0], [3.3, 20.0], [3.4, 21.0], [3.5, 21.0], [3.6, 23.0], [3.7, 25.0], [3.8, 26.0], [3.9, 27.0], [4.0, 28.0], [4.1, 28.0], [4.2, 28.0], [4.3, 31.0], [4.4, 31.0], [4.5, 31.0], [4.6, 33.0], [4.7, 34.0], [4.8, 39.0], [4.9, 39.0], [5.0, 44.0], [5.1, 45.0], [5.2, 46.0], [5.3, 47.0], [5.4, 48.0], [5.5, 54.0], [5.6, 54.0], [5.7, 54.0], [5.8, 63.0], [5.9, 70.0], [6.0, 70.0], [6.1, 72.0], [6.2, 73.0], [6.3, 75.0], [6.4, 78.0], [6.5, 78.0], [6.6, 78.0], [6.7, 82.0], [6.8, 96.0], [6.9, 111.0], [7.0, 113.0], [7.1, 130.0], [7.2, 132.0], [7.3, 169.0], [7.4, 196.0], [7.5, 207.0], [7.6, 223.0], [7.7, 317.0], [7.8, 318.0], [7.9, 323.0], [8.0, 326.0], [8.1, 329.0], [8.2, 362.0], [8.3, 375.0], [8.4, 415.0], [8.5, 431.0], [8.6, 502.0], [8.7, 502.0], [8.8, 509.0], [8.9, 515.0], [9.0, 527.0], [9.1, 551.0], [9.2, 551.0], [9.3, 552.0], [9.4, 562.0], [9.5, 562.0], [9.6, 589.0], [9.7, 589.0], [9.8, 648.0], [9.9, 660.0], [10.0, 679.0], [10.1, 680.0], [10.2, 684.0], [10.3, 733.0], [10.4, 735.0], [10.5, 753.0], [10.6, 797.0], [10.7, 799.0], [10.8, 802.0], [10.9, 807.0], [11.0, 821.0], [11.1, 828.0], [11.2, 830.0], [11.3, 849.0], [11.4, 853.0], [11.5, 864.0], [11.6, 875.0], [11.7, 883.0], [11.8, 887.0], [11.9, 941.0], [12.0, 955.0], [12.1, 963.0], [12.2, 968.0], [12.3, 983.0], [12.4, 986.0], [12.5, 991.0], [12.6, 1033.0], [12.7, 1050.0], [12.8, 1050.0], [12.9, 1061.0], [13.0, 1068.0], [13.1, 1069.0], [13.2, 1071.0], [13.3, 1086.0], [13.4, 1100.0], [13.5, 1101.0], [13.6, 1108.0], [13.7, 1126.0], [13.8, 1145.0], [13.9, 1146.0], [14.0, 1149.0], [14.1, 1165.0], [14.2, 1171.0], [14.3, 1183.0], [14.4, 1236.0], [14.5, 1263.0], [14.6, 1275.0], [14.7, 1294.0], [14.8, 1306.0], [14.9, 1314.0], [15.0, 1333.0], [15.1, 1335.0], [15.2, 1335.0], [15.3, 1342.0], [15.4, 1520.0], [15.5, 1523.0], [15.6, 1531.0], [15.7, 1560.0], [15.8, 1604.0], [15.9, 1609.0], [16.0, 1678.0], [16.1, 1679.0], [16.2, 1738.0], [16.3, 1750.0], [16.4, 1797.0], [16.5, 1893.0], [16.6, 1959.0], [16.7, 2016.0], [16.8, 2050.0], [16.9, 2083.0], [17.0, 2096.0], [17.1, 2291.0], [17.2, 2357.0], [17.3, 2361.0], [17.4, 2368.0], [17.5, 2391.0], [17.6, 2392.0], [17.7, 2404.0], [17.8, 2460.0], [17.9, 2470.0], [18.0, 2478.0], [18.1, 2486.0], [18.2, 2541.0], [18.3, 2555.0], [18.4, 2562.0], [18.5, 2635.0], [18.6, 2642.0], [18.7, 2646.0], [18.8, 2685.0], [18.9, 2700.0], [19.0, 2707.0], [19.1, 2743.0], [19.2, 2768.0], [19.3, 2772.0], [19.4, 2774.0], [19.5, 2786.0], [19.6, 2792.0], [19.7, 2792.0], [19.8, 2832.0], [19.9, 2836.0], [20.0, 2864.0], [20.1, 2874.0], [20.2, 2885.0], [20.3, 2886.0], [20.4, 2888.0], [20.5, 2890.0], [20.6, 2908.0], [20.7, 2914.0], [20.8, 2928.0], [20.9, 2964.0], [21.0, 2978.0], [21.1, 3072.0], [21.2, 3079.0], [21.3, 3088.0], [21.4, 3097.0], [21.5, 3123.0], [21.6, 3128.0], [21.7, 3148.0], [21.8, 3162.0], [21.9, 3171.0], [22.0, 3175.0], [22.1, 3182.0], [22.2, 3183.0], [22.3, 3184.0], [22.4, 3201.0], [22.5, 3240.0], [22.6, 3241.0], [22.7, 3245.0], [22.8, 3251.0], [22.9, 3265.0], [23.0, 3265.0], [23.1, 3272.0], [23.2, 3275.0], [23.3, 3282.0], [23.4, 3283.0], [23.5, 3292.0], [23.6, 3295.0], [23.7, 3314.0], [23.8, 3319.0], [23.9, 3328.0], [24.0, 3329.0], [24.1, 3344.0], [24.2, 3350.0], [24.3, 3351.0], [24.4, 3356.0], [24.5, 3358.0], [24.6, 3365.0], [24.7, 3366.0], [24.8, 3418.0], [24.9, 3435.0], [25.0, 3442.0], [25.1, 3462.0], [25.2, 3463.0], [25.3, 3469.0], [25.4, 3478.0], [25.5, 3478.0], [25.6, 3478.0], [25.7, 3514.0], [25.8, 3520.0], [25.9, 3524.0], [26.0, 3533.0], [26.1, 3535.0], [26.2, 3537.0], [26.3, 3547.0], [26.4, 3551.0], [26.5, 3557.0], [26.6, 3572.0], [26.7, 3579.0], [26.8, 3587.0], [26.9, 3597.0], [27.0, 3597.0], [27.1, 3601.0], [27.2, 3610.0], [27.3, 3612.0], [27.4, 3629.0], [27.5, 3634.0], [27.6, 3640.0], [27.7, 3640.0], [27.8, 3647.0], [27.9, 3661.0], [28.0, 3663.0], [28.1, 3665.0], [28.2, 3679.0], [28.3, 3687.0], [28.4, 3695.0], [28.5, 3699.0], [28.6, 3704.0], [28.7, 3708.0], [28.8, 3718.0], [28.9, 3761.0], [29.0, 3770.0], [29.1, 3777.0], [29.2, 3778.0], [29.3, 3782.0], [29.4, 3794.0], [29.5, 3795.0], [29.6, 3799.0], [29.7, 3800.0], [29.8, 3805.0], [29.9, 3808.0], [30.0, 3840.0], [30.1, 3842.0], [30.2, 3846.0], [30.3, 3847.0], [30.4, 3857.0], [30.5, 3860.0], [30.6, 3903.0], [30.7, 3907.0], [30.8, 3935.0], [30.9, 3951.0], [31.0, 3955.0], [31.1, 3962.0], [31.2, 3970.0], [31.3, 3979.0], [31.4, 3987.0], [31.5, 3987.0], [31.6, 4000.0], [31.7, 4002.0], [31.8, 4006.0], [31.9, 4008.0], [32.0, 4012.0], [32.1, 4025.0], [32.2, 4076.0], [32.3, 4078.0], [32.4, 4082.0], [32.5, 4087.0], [32.6, 4093.0], [32.7, 4095.0], [32.8, 4175.0], [32.9, 4183.0], [33.0, 4183.0], [33.1, 4217.0], [33.2, 4222.0], [33.3, 4225.0], [33.4, 4229.0], [33.5, 4232.0], [33.6, 4241.0], [33.7, 4253.0], [33.8, 4269.0], [33.9, 4270.0], [34.0, 4271.0], [34.1, 4284.0], [34.2, 4307.0], [34.3, 4324.0], [34.4, 4324.0], [34.5, 4324.0], [34.6, 4334.0], [34.7, 4341.0], [34.8, 4359.0], [34.9, 4366.0], [35.0, 4391.0], [35.1, 4393.0], [35.2, 4393.0], [35.3, 4393.0], [35.4, 4409.0], [35.5, 4419.0], [35.6, 4431.0], [35.7, 4434.0], [35.8, 4437.0], [35.9, 4457.0], [36.0, 4469.0], [36.1, 4485.0], [36.2, 4498.0], [36.3, 4503.0], [36.4, 4511.0], [36.5, 4519.0], [36.6, 4531.0], [36.7, 4535.0], [36.8, 4545.0], [36.9, 4580.0], [37.0, 4606.0], [37.1, 4606.0], [37.2, 4607.0], [37.3, 4620.0], [37.4, 4671.0], [37.5, 4694.0], [37.6, 4733.0], [37.7, 4735.0], [37.8, 4753.0], [37.9, 4776.0], [38.0, 4788.0], [38.1, 4810.0], [38.2, 4813.0], [38.3, 4832.0], [38.4, 4832.0], [38.5, 4839.0], [38.6, 4845.0], [38.7, 4851.0], [38.8, 4853.0], [38.9, 4856.0], [39.0, 4860.0], [39.1, 4872.0], [39.2, 4884.0], [39.3, 4896.0], [39.4, 4901.0], [39.5, 4913.0], [39.6, 4915.0], [39.7, 4921.0], [39.8, 4935.0], [39.9, 4937.0], [40.0, 4939.0], [40.1, 4946.0], [40.2, 4954.0], [40.3, 4960.0], [40.4, 4980.0], [40.5, 4980.0], [40.6, 4985.0], [40.7, 5000.0], [40.8, 5004.0], [40.9, 5007.0], [41.0, 5009.0], [41.1, 5009.0], [41.2, 5021.0], [41.3, 5028.0], [41.4, 5028.0], [41.5, 5041.0], [41.6, 5051.0], [41.7, 5055.0], [41.8, 5062.0], [41.9, 5062.0], [42.0, 5071.0], [42.1, 5076.0], [42.2, 5079.0], [42.3, 5092.0], [42.4, 5093.0], [42.5, 5100.0], [42.6, 5100.0], [42.7, 5106.0], [42.8, 5109.0], [42.9, 5111.0], [43.0, 5128.0], [43.1, 5130.0], [43.2, 5133.0], [43.3, 5137.0], [43.4, 5139.0], [43.5, 5141.0], [43.6, 5141.0], [43.7, 5142.0], [43.8, 5142.0], [43.9, 5151.0], [44.0, 5183.0], [44.1, 5201.0], [44.2, 5206.0], [44.3, 5208.0], [44.4, 5214.0], [44.5, 5222.0], [44.6, 5224.0], [44.7, 5225.0], [44.8, 5225.0], [44.9, 5231.0], [45.0, 5234.0], [45.1, 5276.0], [45.2, 5280.0], [45.3, 5282.0], [45.4, 5294.0], [45.5, 5301.0], [45.6, 5308.0], [45.7, 5315.0], [45.8, 5324.0], [45.9, 5333.0], [46.0, 5335.0], [46.1, 5338.0], [46.2, 5362.0], [46.3, 5365.0], [46.4, 5366.0], [46.5, 5374.0], [46.6, 5374.0], [46.7, 5378.0], [46.8, 5389.0], [46.9, 5393.0], [47.0, 5397.0], [47.1, 5401.0], [47.2, 5403.0], [47.3, 5404.0], [47.4, 5416.0], [47.5, 5423.0], [47.6, 5425.0], [47.7, 5434.0], [47.8, 5460.0], [47.9, 5474.0], [48.0, 5478.0], [48.1, 5492.0], [48.2, 5505.0], [48.3, 5513.0], [48.4, 5524.0], [48.5, 5525.0], [48.6, 5533.0], [48.7, 5545.0], [48.8, 5549.0], [48.9, 5558.0], [49.0, 5570.0], [49.1, 5574.0], [49.2, 5574.0], [49.3, 5576.0], [49.4, 5576.0], [49.5, 5590.0], [49.6, 5592.0], [49.7, 5594.0], [49.8, 5595.0], [49.9, 5598.0], [50.0, 5601.0], [50.1, 5613.0], [50.2, 5615.0], [50.3, 5616.0], [50.4, 5622.0], [50.5, 5624.0], [50.6, 5626.0], [50.7, 5630.0], [50.8, 5637.0], [50.9, 5640.0], [51.0, 5642.0], [51.1, 5643.0], [51.2, 5652.0], [51.3, 5654.0], [51.4, 5662.0], [51.5, 5664.0], [51.6, 5680.0], [51.7, 5684.0], [51.8, 5685.0], [51.9, 5686.0], [52.0, 5689.0], [52.1, 5697.0], [52.2, 5701.0], [52.3, 5705.0], [52.4, 5714.0], [52.5, 5719.0], [52.6, 5722.0], [52.7, 5726.0], [52.8, 5728.0], [52.9, 5733.0], [53.0, 5735.0], [53.1, 5737.0], [53.2, 5740.0], [53.3, 5745.0], [53.4, 5751.0], [53.5, 5755.0], [53.6, 5767.0], [53.7, 5768.0], [53.8, 5770.0], [53.9, 5774.0], [54.0, 5775.0], [54.1, 5775.0], [54.2, 5776.0], [54.3, 5776.0], [54.4, 5778.0], [54.5, 5780.0], [54.6, 5785.0], [54.7, 5785.0], [54.8, 5794.0], [54.9, 5797.0], [55.0, 5800.0], [55.1, 5817.0], [55.2, 5819.0], [55.3, 5824.0], [55.4, 5824.0], [55.5, 5825.0], [55.6, 5825.0], [55.7, 5827.0], [55.8, 5835.0], [55.9, 5841.0], [56.0, 5844.0], [56.1, 5854.0], [56.2, 5855.0], [56.3, 5858.0], [56.4, 5863.0], [56.5, 5865.0], [56.6, 5867.0], [56.7, 5869.0], [56.8, 5875.0], [56.9, 5878.0], [57.0, 5878.0], [57.1, 5879.0], [57.2, 5896.0], [57.3, 5901.0], [57.4, 5910.0], [57.5, 5918.0], [57.6, 5922.0], [57.7, 5926.0], [57.8, 5926.0], [57.9, 5928.0], [58.0, 5928.0], [58.1, 5930.0], [58.2, 5930.0], [58.3, 5931.0], [58.4, 5935.0], [58.5, 5939.0], [58.6, 5941.0], [58.7, 5946.0], [58.8, 5947.0], [58.9, 5948.0], [59.0, 5948.0], [59.1, 5950.0], [59.2, 5952.0], [59.3, 5952.0], [59.4, 5959.0], [59.5, 5963.0], [59.6, 5965.0], [59.7, 5966.0], [59.8, 5973.0], [59.9, 5976.0], [60.0, 5977.0], [60.1, 5979.0], [60.2, 5981.0], [60.3, 5982.0], [60.4, 5984.0], [60.5, 6001.0], [60.6, 6002.0], [60.7, 6007.0], [60.8, 6010.0], [60.9, 6016.0], [61.0, 6021.0], [61.1, 6022.0], [61.2, 6023.0], [61.3, 6029.0], [61.4, 6036.0], [61.5, 6038.0], [61.6, 6043.0], [61.7, 6046.0], [61.8, 6046.0], [61.9, 6049.0], [62.0, 6050.0], [62.1, 6052.0], [62.2, 6055.0], [62.3, 6056.0], [62.4, 6061.0], [62.5, 6065.0], [62.6, 6066.0], [62.7, 6069.0], [62.8, 6069.0], [62.9, 6069.0], [63.0, 6074.0], [63.1, 6078.0], [63.2, 6079.0], [63.3, 6083.0], [63.4, 6089.0], [63.5, 6101.0], [63.6, 6119.0], [63.7, 6126.0], [63.8, 6127.0], [63.9, 6132.0], [64.0, 6133.0], [64.1, 6139.0], [64.2, 6140.0], [64.3, 6148.0], [64.4, 6151.0], [64.5, 6157.0], [64.6, 6157.0], [64.7, 6163.0], [64.8, 6166.0], [64.9, 6169.0], [65.0, 6174.0], [65.1, 6184.0], [65.2, 6184.0], [65.3, 6184.0], [65.4, 6189.0], [65.5, 6196.0], [65.6, 6206.0], [65.7, 6206.0], [65.8, 6207.0], [65.9, 6212.0], [66.0, 6219.0], [66.1, 6219.0], [66.2, 6239.0], [66.3, 6240.0], [66.4, 6244.0], [66.5, 6249.0], [66.6, 6250.0], [66.7, 6251.0], [66.8, 6252.0], [66.9, 6255.0], [67.0, 6264.0], [67.1, 6274.0], [67.2, 6279.0], [67.3, 6292.0], [67.4, 6301.0], [67.5, 6303.0], [67.6, 6306.0], [67.7, 6312.0], [67.8, 6313.0], [67.9, 6314.0], [68.0, 6314.0], [68.1, 6315.0], [68.2, 6316.0], [68.3, 6330.0], [68.4, 6334.0], [68.5, 6335.0], [68.6, 6344.0], [68.7, 6347.0], [68.8, 6361.0], [68.9, 6363.0], [69.0, 6364.0], [69.1, 6368.0], [69.2, 6369.0], [69.3, 6374.0], [69.4, 6375.0], [69.5, 6383.0], [69.6, 6384.0], [69.7, 6389.0], [69.8, 6390.0], [69.9, 6391.0], [70.0, 6396.0], [70.1, 6410.0], [70.2, 6418.0], [70.3, 6421.0], [70.4, 6422.0], [70.5, 6424.0], [70.6, 6429.0], [70.7, 6434.0], [70.8, 6437.0], [70.9, 6449.0], [71.0, 6451.0], [71.1, 6453.0], [71.2, 6455.0], [71.3, 6467.0], [71.4, 6472.0], [71.5, 6485.0], [71.6, 6491.0], [71.7, 6493.0], [71.8, 6495.0], [71.9, 6495.0], [72.0, 6498.0], [72.1, 6502.0], [72.2, 6510.0], [72.3, 6513.0], [72.4, 6519.0], [72.5, 6520.0], [72.6, 6521.0], [72.7, 6525.0], [72.8, 6527.0], [72.9, 6536.0], [73.0, 6537.0], [73.1, 6543.0], [73.2, 6544.0], [73.3, 6548.0], [73.4, 6548.0], [73.5, 6553.0], [73.6, 6555.0], [73.7, 6561.0], [73.8, 6563.0], [73.9, 6566.0], [74.0, 6574.0], [74.1, 6575.0], [74.2, 6575.0], [74.3, 6576.0], [74.4, 6586.0], [74.5, 6590.0], [74.6, 6592.0], [74.7, 6593.0], [74.8, 6595.0], [74.9, 6597.0], [75.0, 6601.0], [75.1, 6606.0], [75.2, 6608.0], [75.3, 6611.0], [75.4, 6611.0], [75.5, 6613.0], [75.6, 6616.0], [75.7, 6618.0], [75.8, 6622.0], [75.9, 6623.0], [76.0, 6623.0], [76.1, 6625.0], [76.2, 6627.0], [76.3, 6628.0], [76.4, 6629.0], [76.5, 6632.0], [76.6, 6640.0], [76.7, 6648.0], [76.8, 6650.0], [76.9, 6652.0], [77.0, 6653.0], [77.1, 6653.0], [77.2, 6660.0], [77.3, 6670.0], [77.4, 6679.0], [77.5, 6680.0], [77.6, 6685.0], [77.7, 6693.0], [77.8, 6697.0], [77.9, 6706.0], [78.0, 6706.0], [78.1, 6706.0], [78.2, 6707.0], [78.3, 6711.0], [78.4, 6711.0], [78.5, 6712.0], [78.6, 6717.0], [78.7, 6727.0], [78.8, 6730.0], [78.9, 6732.0], [79.0, 6733.0], [79.1, 6737.0], [79.2, 6738.0], [79.3, 6744.0], [79.4, 6745.0], [79.5, 6750.0], [79.6, 6757.0], [79.7, 6764.0], [79.8, 6765.0], [79.9, 6768.0], [80.0, 6771.0], [80.1, 6774.0], [80.2, 6779.0], [80.3, 6786.0], [80.4, 6801.0], [80.5, 6809.0], [80.6, 6816.0], [80.7, 6816.0], [80.8, 6817.0], [80.9, 6819.0], [81.0, 6824.0], [81.1, 6825.0], [81.2, 6825.0], [81.3, 6828.0], [81.4, 6830.0], [81.5, 6831.0], [81.6, 6833.0], [81.7, 6833.0], [81.8, 6834.0], [81.9, 6845.0], [82.0, 6846.0], [82.1, 6851.0], [82.2, 6853.0], [82.3, 6853.0], [82.4, 6860.0], [82.5, 6866.0], [82.6, 6866.0], [82.7, 6869.0], [82.8, 6873.0], [82.9, 6882.0], [83.0, 6886.0], [83.1, 6887.0], [83.2, 6893.0], [83.3, 6893.0], [83.4, 6903.0], [83.5, 6903.0], [83.6, 6927.0], [83.7, 6928.0], [83.8, 6938.0], [83.9, 6938.0], [84.0, 6943.0], [84.1, 6945.0], [84.2, 6947.0], [84.3, 6949.0], [84.4, 6960.0], [84.5, 6967.0], [84.6, 6976.0], [84.7, 6977.0], [84.8, 6979.0], [84.9, 6979.0], [85.0, 7003.0], [85.1, 7022.0], [85.2, 7022.0], [85.3, 7028.0], [85.4, 7030.0], [85.5, 7043.0], [85.6, 7051.0], [85.7, 7053.0], [85.8, 7057.0], [85.9, 7093.0], [86.0, 7094.0], [86.1, 7097.0], [86.2, 7097.0], [86.3, 7097.0], [86.4, 7101.0], [86.5, 7118.0], [86.6, 7126.0], [86.7, 7171.0], [86.8, 7193.0], [86.9, 7206.0], [87.0, 7208.0], [87.1, 7209.0], [87.2, 7210.0], [87.3, 7212.0], [87.4, 7221.0], [87.5, 7225.0], [87.6, 7228.0], [87.7, 7240.0], [87.8, 7241.0], [87.9, 7244.0], [88.0, 7245.0], [88.1, 7256.0], [88.2, 7262.0], [88.3, 7265.0], [88.4, 7269.0], [88.5, 7270.0], [88.6, 7276.0], [88.7, 7282.0], [88.8, 7291.0], [88.9, 7292.0], [89.0, 7295.0], [89.1, 7307.0], [89.2, 7310.0], [89.3, 7327.0], [89.4, 7330.0], [89.5, 7335.0], [89.6, 7342.0], [89.7, 7344.0], [89.8, 7366.0], [89.9, 7366.0], [90.0, 7369.0], [90.1, 7377.0], [90.2, 7379.0], [90.3, 7383.0], [90.4, 7407.0], [90.5, 7420.0], [90.6, 7426.0], [90.7, 7427.0], [90.8, 7434.0], [90.9, 7437.0], [91.0, 7446.0], [91.1, 7451.0], [91.2, 7469.0], [91.3, 7471.0], [91.4, 7477.0], [91.5, 7485.0], [91.6, 7533.0], [91.7, 7551.0], [91.8, 7593.0], [91.9, 7614.0], [92.0, 7627.0], [92.1, 7628.0], [92.2, 7629.0], [92.3, 7633.0], [92.4, 7636.0], [92.5, 7661.0], [92.6, 7663.0], [92.7, 7669.0], [92.8, 7675.0], [92.9, 7685.0], [93.0, 7685.0], [93.1, 7687.0], [93.2, 7701.0], [93.3, 7703.0], [93.4, 7704.0], [93.5, 7708.0], [93.6, 7716.0], [93.7, 7719.0], [93.8, 7719.0], [93.9, 7756.0], [94.0, 7758.0], [94.1, 7762.0], [94.2, 7778.0], [94.3, 7779.0], [94.4, 7799.0], [94.5, 7801.0], [94.6, 7807.0], [94.7, 7837.0], [94.8, 7871.0], [94.9, 7880.0], [95.0, 7891.0], [95.1, 7900.0], [95.2, 7907.0], [95.3, 7919.0], [95.4, 8012.0], [95.5, 8012.0], [95.6, 8048.0], [95.7, 8068.0], [95.8, 8092.0], [95.9, 8099.0], [96.0, 8109.0], [96.1, 8164.0], [96.2, 8168.0], [96.3, 8169.0], [96.4, 8193.0], [96.5, 8211.0], [96.6, 8217.0], [96.7, 8217.0], [96.8, 8218.0], [96.9, 8221.0], [97.0, 8248.0], [97.1, 8252.0], [97.2, 8257.0], [97.3, 8307.0], [97.4, 8356.0], [97.5, 8359.0], [97.6, 8369.0], [97.7, 8378.0], [97.8, 8383.0], [97.9, 8383.0], [98.0, 8383.0], [98.1, 8413.0], [98.2, 8526.0], [98.3, 8554.0], [98.4, 8615.0], [98.5, 8617.0], [98.6, 8619.0], [98.7, 8621.0], [98.8, 8626.0], [98.9, 8628.0], [99.0, 8670.0], [99.1, 8675.0], [99.2, 8695.0], [99.3, 8699.0], [99.4, 8713.0], [99.5, 8739.0], [99.6, 8817.0], [99.7, 8897.0], [99.8, 9014.0], [99.9, 9228.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 70.0, "series": [{"data": [[400.0, 4.0], [500.0, 3.0], [600.0, 16.0], [700.0, 15.0], [800.0, 9.0], [900.0, 6.0], [1000.0, 7.0], [1100.0, 10.0], [1200.0, 3.0], [1300.0, 6.0], [1400.0, 7.0], [1500.0, 14.0], [1600.0, 4.0], [1700.0, 6.0], [1800.0, 3.0], [1900.0, 5.0], [2000.0, 3.0], [2100.0, 7.0], [2300.0, 3.0], [2200.0, 3.0], [2400.0, 5.0], [2600.0, 4.0], [2700.0, 3.0], [2800.0, 5.0], [2900.0, 1.0], [3000.0, 2.0], [3100.0, 7.0], [3200.0, 4.0], [3300.0, 2.0], [3400.0, 6.0], [3500.0, 6.0], [3600.0, 2.0], [3800.0, 3.0], [3900.0, 6.0], [4000.0, 4.0], [4200.0, 5.0], [4100.0, 9.0], [4300.0, 13.0], [4500.0, 10.0], [4600.0, 12.0], [4400.0, 6.0], [4800.0, 8.0], [4700.0, 10.0], [5100.0, 11.0], [5000.0, 4.0], [4900.0, 6.0], [5300.0, 6.0], [5200.0, 4.0], [5600.0, 9.0], [5500.0, 8.0], [5400.0, 10.0], [5700.0, 14.0], [5800.0, 11.0], [5900.0, 10.0], [6000.0, 22.0], [6100.0, 9.0], [6200.0, 20.0], [6300.0, 10.0], [6400.0, 20.0], [6500.0, 19.0], [6600.0, 23.0], [6900.0, 29.0], [6800.0, 17.0], [6700.0, 19.0], [7000.0, 24.0], [7100.0, 26.0], [7200.0, 28.0], [7300.0, 21.0], [7400.0, 20.0], [7600.0, 14.0], [7500.0, 33.0], [7900.0, 29.0], [7700.0, 17.0], [7800.0, 19.0], [8000.0, 21.0], [8100.0, 26.0], [8300.0, 13.0], [8500.0, 13.0], [8600.0, 12.0], [8700.0, 7.0], [8200.0, 15.0], [8400.0, 9.0], [9000.0, 16.0], [8900.0, 17.0], [9100.0, 9.0], [8800.0, 11.0], [9200.0, 2.0], [9300.0, 11.0], [9500.0, 9.0], [9600.0, 5.0], [9400.0, 2.0], [9700.0, 1.0], [9800.0, 2.0], [10000.0, 6.0], [9900.0, 4.0], [10200.0, 3.0], [10300.0, 2.0], [10500.0, 1.0], [10900.0, 1.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[0.0, 70.0], [600.0, 6.0], [700.0, 5.0], [800.0, 11.0], [900.0, 7.0], [1000.0, 8.0], [1100.0, 10.0], [1200.0, 4.0], [1300.0, 7.0], [1500.0, 4.0], [1600.0, 4.0], [1700.0, 3.0], [1800.0, 1.0], [1900.0, 1.0], [2000.0, 4.0], [2300.0, 5.0], [2200.0, 1.0], [2400.0, 5.0], [2500.0, 3.0], [2600.0, 4.0], [2700.0, 9.0], [2800.0, 9.0], [2900.0, 5.0], [3000.0, 4.0], [3100.0, 9.0], [3200.0, 13.0], [3300.0, 11.0], [3400.0, 10.0], [3500.0, 14.0], [3700.0, 11.0], [3600.0, 15.0], [3800.0, 10.0], [3900.0, 10.0], [4000.0, 12.0], [4100.0, 3.0], [4200.0, 11.0], [4300.0, 13.0], [4500.0, 7.0], [4400.0, 9.0], [4600.0, 6.0], [4800.0, 13.0], [4700.0, 5.0], [5100.0, 16.0], [5000.0, 18.0], [4900.0, 14.0], [5200.0, 15.0], [5300.0, 16.0], [5600.0, 23.0], [5500.0, 18.0], [5400.0, 11.0], [5700.0, 28.0], [5800.0, 24.0], [6000.0, 30.0], [5900.0, 33.0], [6100.0, 22.0], [6300.0, 28.0], [6200.0, 18.0], [6400.0, 20.0], [6600.0, 30.0], [6500.0, 29.0], [6900.0, 16.0], [6700.0, 26.0], [6800.0, 30.0], [7000.0, 15.0], [7100.0, 5.0], [7400.0, 12.0], [7300.0, 14.0], [7200.0, 22.0], [7600.0, 13.0], [7500.0, 3.0], [7800.0, 7.0], [7700.0, 13.0], [7900.0, 3.0], [8000.0, 6.0], [8100.0, 5.0], [8300.0, 8.0], [8200.0, 8.0], [8400.0, 1.0], [8600.0, 10.0], [8500.0, 2.0], [8700.0, 2.0], [9000.0, 1.0], [8800.0, 2.0], [9200.0, 2.0], [100.0, 6.0], [200.0, 2.0], [300.0, 7.0], [400.0, 2.0], [500.0, 12.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 91.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1774.0, "series": [{"data": [[0.0, 91.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 152.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1774.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.2131147540983607, "minX": 1.69850352E12, "maxY": 60.0, "series": [{"data": [[1.6985037E12, 60.0], [1.69850352E12, 3.2131147540983607], [1.69850358E12, 18.387665198237894], [1.69850376E12, 56.53333333333335], [1.69850364E12, 48.33950617283946]], "isOverall": false, "label": "OnlineConversion", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69850376E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13.125, "minX": 1.0, "maxY": 9450.125, "series": [{"data": [[2.0, 2163.0], [3.0, 1518.625], [4.0, 1242.8461538461538], [5.0, 1226.6153846153848], [6.0, 1382.75], [7.0, 1455.3333333333335], [8.0, 1829.6999999999998], [9.0, 1966.9999999999998], [10.0, 2325.714285714286], [11.0, 1826.8888888888891], [12.0, 2721.5], [13.0, 2013.75], [14.0, 1641.25], [15.0, 2286.923076923077], [16.0, 2297.916666666667], [17.0, 2073.8333333333335], [18.0, 3684.4], [19.0, 4296.166666666666], [20.0, 5790.4], [21.0, 6520.2], [22.0, 5407.25], [23.0, 5117.4], [24.0, 6682.4], [25.0, 7615.5], [26.0, 7092.25], [27.0, 6976.2], [28.0, 6751.428571428571], [29.0, 5677.6], [30.0, 4101.875], [31.0, 3846.9], [32.0, 4182.888888888889], [33.0, 4011.099999999999], [34.0, 3808.909090909091], [35.0, 4523.200000000001], [36.0, 4915.571428571428], [37.0, 4582.625], [38.0, 4431.454545454546], [39.0, 4943.800000000001], [40.0, 5174.625], [41.0, 4798.0], [42.0, 5279.909090909092], [43.0, 5679.100000000001], [44.0, 5697.999999999999], [45.0, 4842.555555555556], [46.0, 5001.142857142858], [47.0, 5475.555555555556], [48.0, 6643.375], [49.0, 7279.0999999999985], [50.0, 6996.5], [51.0, 6424.4], [52.0, 6632.625], [53.0, 7191.222222222223], [54.0, 7803.6], [55.0, 8437.5], [56.0, 9450.125], [57.0, 9032.000000000002], [58.0, 8490.857142857143], [59.0, 7211.545454545454], [60.0, 7651.021442495126], [1.0, 2308.25]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[45.25376128385155, 6104.074222668004]], "isOverall": false, "label": "Cargar Tareas-Aggregated", "isController": false}, {"data": [[2.0, 13.5], [3.0, 13.125], [4.0, 21.384615384615383], [5.0, 25.76923076923077], [6.0, 206.83333333333331], [7.0, 240.10000000000002], [8.0, 257.375], [9.0, 460.6], [10.0, 16.0], [11.0, 1008.4166666666667], [12.0, 1150.1538461538462], [13.0, 1325.4999999999998], [14.0, 1793.0], [15.0, 938.9999999999999], [16.0, 911.0833333333334], [17.0, 1899.111111111111], [18.0, 1382.4], [19.0, 3848.6666666666665], [20.0, 4072.5], [21.0, 3326.2], [22.0, 3808.8333333333335], [23.0, 4537.666666666667], [24.0, 4346.6], [25.0, 4851.0], [26.0, 4453.099999999999], [27.0, 4006.0], [28.0, 4827.142857142858], [29.0, 4025.1000000000004], [30.0, 2325.3636363636365], [31.0, 2782.777777777778], [32.0, 3378.6666666666665], [33.0, 3009.1428571428573], [34.0, 2426.1428571428573], [35.0, 3606.7], [36.0, 3786.666666666666], [37.0, 3431.6666666666665], [38.0, 3791.8749999999995], [39.0, 3665.909090909091], [40.0, 3589.583333333333], [41.0, 3585.571428571429], [42.0, 3971.25], [43.0, 4578.166666666666], [44.0, 4039.1666666666665], [45.0, 3579.4], [46.0, 3832.0], [47.0, 4826.666666666667], [48.0, 5390.5], [49.0, 5937.833333333333], [50.0, 5202.545454545454], [51.0, 4898.0], [52.0, 5380.555555555555], [53.0, 6424.4], [54.0, 6610.571428571429], [55.0, 5819.0], [56.0, 7887.09090909091], [57.0, 7569.466666666666], [58.0, 6113.076923076923], [59.0, 5864.166666666667], [60.0, 6475.280701754388], [1.0, 32.666666666666664]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[45.206862745098, 4845.787254901966]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 60.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 422.6333333333333, "minX": 1.69850352E12, "maxY": 6.869797161666666E7, "series": [{"data": [[1.6985037E12, 3472.4], [1.69850352E12, 422.6333333333333], [1.69850358E12, 3128.7166666666667], [1.69850376E12, 3485.9166666666665], [1.69850364E12, 3345.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6985037E12, 6.63291334E7], [1.69850352E12, 7369924.1], [1.69850358E12, 5.764323071666667E7], [1.69850376E12, 6.869797161666666E7], [1.69850364E12, 6.238101335E7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69850376E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18.757575757575765, "minX": 1.69850352E12, "maxY": 7806.0873015873, "series": [{"data": [[1.6985037E12, 7806.0873015873], [1.69850352E12, 709.357142857143], [1.69850358E12, 3087.6621004566205], [1.69850376E12, 7419.371647509582], [1.69850364E12, 6270.514767932489]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.6985037E12, 6575.488188976376], [1.69850352E12, 18.757575757575765], [1.69850358E12, 1829.582978723404], [1.69850376E12, 6331.694779116465], [1.69850364E12, 5081.7911646586335]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69850376E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18.48484848484848, "minX": 1.69850352E12, "maxY": 7806.0753968253985, "series": [{"data": [[1.6985037E12, 7806.0753968253985], [1.69850352E12, 709.2857142857143], [1.69850358E12, 3087.607305936073], [1.69850376E12, 7419.356321839085], [1.69850364E12, 6270.49789029536]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.6985037E12, 6575.472440944879], [1.69850352E12, 18.48484848484848], [1.69850358E12, 1829.5021276595746], [1.69850376E12, 6331.674698795177], [1.69850364E12, 5081.771084337353]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69850376E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69850352E12, "maxY": 1.5757575757575757, "series": [{"data": [[1.6985037E12, 0.4047619047619047], [1.69850352E12, 0.0], [1.69850358E12, 0.0], [1.69850376E12, 0.36398467432950216], [1.69850364E12, 0.2278481012658229]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.6985037E12, 0.3031496062992124], [1.69850352E12, 1.5757575757575757], [1.69850358E12, 0.3829787234042553], [1.69850376E12, 0.2690763052208837], [1.69850364E12, 0.46586345381526106]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69850376E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.69850352E12, "maxY": 10922.0, "series": [{"data": [[1.6985037E12, 10072.0], [1.69850352E12, 1065.0], [1.69850358E12, 9337.0], [1.69850376E12, 10922.0], [1.69850364E12, 10351.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6985037E12, 8711.6], [1.69850352E12, 776.4000000000001], [1.69850358E12, 5132.5], [1.69850376E12, 8570.2], [1.69850364E12, 7987.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6985037E12, 9674.12], [1.69850352E12, 1065.0], [1.69850358E12, 7765.699999999997], [1.69850376E12, 10185.069999999998], [1.69850364E12, 9863.939999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6985037E12, 9132.65], [1.69850352E12, 867.0], [1.69850358E12, 6253.0], [1.69850376E12, 9005.45], [1.69850364E12, 8586.949999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6985037E12, 4232.0], [1.69850352E12, 9.0], [1.69850358E12, 11.0], [1.69850376E12, 4076.0], [1.69850364E12, 2864.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6985037E12, 7159.0], [1.69850352E12, 31.0], [1.69850358E12, 1993.5], [1.69850376E12, 6773.0], [1.69850364E12, 5495.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69850376E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 767.0, "minX": 1.0, "maxY": 7816.0, "series": [{"data": [[8.0, 6025.5], [2.0, 7570.5], [9.0, 6347.5], [10.0, 6283.5], [11.0, 5603.0], [3.0, 6509.0], [12.0, 767.0], [13.0, 6272.0], [14.0, 5998.5], [15.0, 2269.0], [1.0, 5821.5], [4.0, 5494.0], [16.0, 5364.0], [17.0, 6279.0], [18.0, 5637.5], [5.0, 7393.0], [21.0, 7816.0], [6.0, 6715.0], [7.0, 6050.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 767.0, "minX": 1.0, "maxY": 7816.0, "series": [{"data": [[8.0, 6025.5], [2.0, 7570.5], [9.0, 6347.5], [10.0, 6283.5], [11.0, 5603.0], [3.0, 6509.0], [12.0, 767.0], [13.0, 6272.0], [14.0, 5998.5], [15.0, 2269.0], [1.0, 5821.5], [4.0, 5494.0], [16.0, 5364.0], [17.0, 6279.0], [18.0, 5637.0], [5.0, 7393.0], [21.0, 7816.0], [6.0, 6715.0], [7.0, 6050.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.69850352E12, "maxY": 8.533333333333333, "series": [{"data": [[1.6985037E12, 8.433333333333334], [1.69850352E12, 1.1], [1.69850358E12, 8.05], [1.69850376E12, 7.5], [1.69850364E12, 8.533333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69850376E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.69850352E12, "maxY": 8.5, "series": [{"data": [[1.6985037E12, 8.433333333333334], [1.69850352E12, 1.0166666666666666], [1.69850358E12, 7.566666666666666], [1.69850376E12, 8.5], [1.69850364E12, 8.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69850376E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4666666666666667, "minX": 1.69850352E12, "maxY": 4.35, "series": [{"data": [[1.6985037E12, 4.2], [1.69850352E12, 0.4666666666666667], [1.69850358E12, 3.65], [1.69850376E12, 4.35], [1.69850364E12, 3.95]], "isOverall": false, "label": "Cargar Tareas-success", "isController": false}, {"data": [[1.6985037E12, 4.233333333333333], [1.69850352E12, 0.55], [1.69850358E12, 3.9166666666666665], [1.69850376E12, 4.15], [1.69850364E12, 4.15]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69850376E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.69850352E12, "maxY": 8.5, "series": [{"data": [[1.6985037E12, 8.433333333333334], [1.69850352E12, 1.0166666666666666], [1.69850358E12, 7.566666666666666], [1.69850376E12, 8.5], [1.69850364E12, 8.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69850376E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

