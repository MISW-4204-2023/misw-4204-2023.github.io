/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 5966.0, "series": [{"data": [[0.0, 65.0], [0.1, 82.0], [0.2, 89.0], [0.3, 95.0], [0.4, 103.0], [0.5, 107.0], [0.6, 112.0], [0.7, 119.0], [0.8, 128.0], [0.9, 136.0], [1.0, 141.0], [1.1, 146.0], [1.2, 154.0], [1.3, 163.0], [1.4, 166.0], [1.5, 173.0], [1.6, 180.0], [1.7, 201.0], [1.8, 206.0], [1.9, 223.0], [2.0, 228.0], [2.1, 237.0], [2.2, 245.0], [2.3, 258.0], [2.4, 261.0], [2.5, 265.0], [2.6, 268.0], [2.7, 274.0], [2.8, 281.0], [2.9, 289.0], [3.0, 292.0], [3.1, 300.0], [3.2, 308.0], [3.3, 313.0], [3.4, 322.0], [3.5, 327.0], [3.6, 330.0], [3.7, 336.0], [3.8, 339.0], [3.9, 342.0], [4.0, 349.0], [4.1, 352.0], [4.2, 358.0], [4.3, 365.0], [4.4, 368.0], [4.5, 374.0], [4.6, 378.0], [4.7, 382.0], [4.8, 389.0], [4.9, 395.0], [5.0, 400.0], [5.1, 410.0], [5.2, 418.0], [5.3, 426.0], [5.4, 431.0], [5.5, 438.0], [5.6, 441.0], [5.7, 446.0], [5.8, 448.0], [5.9, 455.0], [6.0, 461.0], [6.1, 469.0], [6.2, 476.0], [6.3, 478.0], [6.4, 485.0], [6.5, 492.0], [6.6, 498.0], [6.7, 508.0], [6.8, 512.0], [6.9, 515.0], [7.0, 520.0], [7.1, 525.0], [7.2, 532.0], [7.3, 540.0], [7.4, 545.0], [7.5, 552.0], [7.6, 558.0], [7.7, 561.0], [7.8, 564.0], [7.9, 569.0], [8.0, 576.0], [8.1, 582.0], [8.2, 586.0], [8.3, 590.0], [8.4, 595.0], [8.5, 599.0], [8.6, 607.0], [8.7, 611.0], [8.8, 615.0], [8.9, 618.0], [9.0, 625.0], [9.1, 632.0], [9.2, 639.0], [9.3, 644.0], [9.4, 650.0], [9.5, 655.0], [9.6, 662.0], [9.7, 665.0], [9.8, 672.0], [9.9, 677.0], [10.0, 686.0], [10.1, 690.0], [10.2, 698.0], [10.3, 701.0], [10.4, 706.0], [10.5, 712.0], [10.6, 719.0], [10.7, 725.0], [10.8, 733.0], [10.9, 739.0], [11.0, 747.0], [11.1, 750.0], [11.2, 755.0], [11.3, 758.0], [11.4, 760.0], [11.5, 764.0], [11.6, 766.0], [11.7, 769.0], [11.8, 773.0], [11.9, 779.0], [12.0, 783.0], [12.1, 788.0], [12.2, 795.0], [12.3, 799.0], [12.4, 802.0], [12.5, 807.0], [12.6, 812.0], [12.7, 815.0], [12.8, 823.0], [12.9, 827.0], [13.0, 832.0], [13.1, 839.0], [13.2, 846.0], [13.3, 850.0], [13.4, 855.0], [13.5, 861.0], [13.6, 868.0], [13.7, 873.0], [13.8, 879.0], [13.9, 885.0], [14.0, 889.0], [14.1, 893.0], [14.2, 897.0], [14.3, 903.0], [14.4, 906.0], [14.5, 911.0], [14.6, 913.0], [14.7, 915.0], [14.8, 921.0], [14.9, 924.0], [15.0, 933.0], [15.1, 940.0], [15.2, 949.0], [15.3, 952.0], [15.4, 956.0], [15.5, 961.0], [15.6, 971.0], [15.7, 975.0], [15.8, 982.0], [15.9, 989.0], [16.0, 993.0], [16.1, 1000.0], [16.2, 1003.0], [16.3, 1006.0], [16.4, 1012.0], [16.5, 1013.0], [16.6, 1020.0], [16.7, 1029.0], [16.8, 1030.0], [16.9, 1035.0], [17.0, 1040.0], [17.1, 1047.0], [17.2, 1051.0], [17.3, 1054.0], [17.4, 1060.0], [17.5, 1065.0], [17.6, 1076.0], [17.7, 1084.0], [17.8, 1086.0], [17.9, 1092.0], [18.0, 1096.0], [18.1, 1102.0], [18.2, 1106.0], [18.3, 1110.0], [18.4, 1113.0], [18.5, 1119.0], [18.6, 1120.0], [18.7, 1124.0], [18.8, 1127.0], [18.9, 1136.0], [19.0, 1138.0], [19.1, 1145.0], [19.2, 1149.0], [19.3, 1154.0], [19.4, 1158.0], [19.5, 1165.0], [19.6, 1171.0], [19.7, 1175.0], [19.8, 1177.0], [19.9, 1180.0], [20.0, 1182.0], [20.1, 1189.0], [20.2, 1191.0], [20.3, 1197.0], [20.4, 1203.0], [20.5, 1209.0], [20.6, 1216.0], [20.7, 1222.0], [20.8, 1226.0], [20.9, 1230.0], [21.0, 1233.0], [21.1, 1239.0], [21.2, 1245.0], [21.3, 1249.0], [21.4, 1255.0], [21.5, 1258.0], [21.6, 1264.0], [21.7, 1272.0], [21.8, 1273.0], [21.9, 1280.0], [22.0, 1285.0], [22.1, 1288.0], [22.2, 1291.0], [22.3, 1295.0], [22.4, 1298.0], [22.5, 1300.0], [22.6, 1305.0], [22.7, 1310.0], [22.8, 1316.0], [22.9, 1319.0], [23.0, 1322.0], [23.1, 1329.0], [23.2, 1333.0], [23.3, 1336.0], [23.4, 1343.0], [23.5, 1347.0], [23.6, 1350.0], [23.7, 1356.0], [23.8, 1361.0], [23.9, 1364.0], [24.0, 1367.0], [24.1, 1374.0], [24.2, 1379.0], [24.3, 1384.0], [24.4, 1389.0], [24.5, 1392.0], [24.6, 1395.0], [24.7, 1400.0], [24.8, 1404.0], [24.9, 1412.0], [25.0, 1416.0], [25.1, 1422.0], [25.2, 1428.0], [25.3, 1433.0], [25.4, 1439.0], [25.5, 1448.0], [25.6, 1455.0], [25.7, 1461.0], [25.8, 1471.0], [25.9, 1475.0], [26.0, 1481.0], [26.1, 1490.0], [26.2, 1500.0], [26.3, 1504.0], [26.4, 1513.0], [26.5, 1521.0], [26.6, 1535.0], [26.7, 1544.0], [26.8, 1556.0], [26.9, 1562.0], [27.0, 1570.0], [27.1, 1580.0], [27.2, 1587.0], [27.3, 1594.0], [27.4, 1608.0], [27.5, 1623.0], [27.6, 1631.0], [27.7, 1644.0], [27.8, 1652.0], [27.9, 1658.0], [28.0, 1667.0], [28.1, 1673.0], [28.2, 1687.0], [28.3, 1692.0], [28.4, 1702.0], [28.5, 1713.0], [28.6, 1725.0], [28.7, 1734.0], [28.8, 1738.0], [28.9, 1742.0], [29.0, 1756.0], [29.1, 1764.0], [29.2, 1775.0], [29.3, 1781.0], [29.4, 1784.0], [29.5, 1786.0], [29.6, 1791.0], [29.7, 1793.0], [29.8, 1796.0], [29.9, 1801.0], [30.0, 1803.0], [30.1, 1807.0], [30.2, 1811.0], [30.3, 1814.0], [30.4, 1818.0], [30.5, 1820.0], [30.6, 1825.0], [30.7, 1829.0], [30.8, 1832.0], [30.9, 1836.0], [31.0, 1839.0], [31.1, 1843.0], [31.2, 1844.0], [31.3, 1847.0], [31.4, 1851.0], [31.5, 1852.0], [31.6, 1854.0], [31.7, 1856.0], [31.8, 1859.0], [31.9, 1860.0], [32.0, 1864.0], [32.1, 1865.0], [32.2, 1869.0], [32.3, 1873.0], [32.4, 1876.0], [32.5, 1878.0], [32.6, 1882.0], [32.7, 1885.0], [32.8, 1886.0], [32.9, 1890.0], [33.0, 1894.0], [33.1, 1895.0], [33.2, 1898.0], [33.3, 1900.0], [33.4, 1903.0], [33.5, 1906.0], [33.6, 1908.0], [33.7, 1910.0], [33.8, 1912.0], [33.9, 1914.0], [34.0, 1916.0], [34.1, 1921.0], [34.2, 1923.0], [34.3, 1925.0], [34.4, 1926.0], [34.5, 1929.0], [34.6, 1933.0], [34.7, 1935.0], [34.8, 1938.0], [34.9, 1941.0], [35.0, 1943.0], [35.1, 1946.0], [35.2, 1951.0], [35.3, 1954.0], [35.4, 1955.0], [35.5, 1958.0], [35.6, 1959.0], [35.7, 1960.0], [35.8, 1962.0], [35.9, 1965.0], [36.0, 1966.0], [36.1, 1970.0], [36.2, 1971.0], [36.3, 1973.0], [36.4, 1974.0], [36.5, 1977.0], [36.6, 1979.0], [36.7, 1983.0], [36.8, 1986.0], [36.9, 1988.0], [37.0, 1990.0], [37.1, 1993.0], [37.2, 1994.0], [37.3, 1998.0], [37.4, 2000.0], [37.5, 2002.0], [37.6, 2004.0], [37.7, 2008.0], [37.8, 2008.0], [37.9, 2009.0], [38.0, 2010.0], [38.1, 2012.0], [38.2, 2013.0], [38.3, 2015.0], [38.4, 2015.0], [38.5, 2017.0], [38.6, 2018.0], [38.7, 2020.0], [38.8, 2022.0], [38.9, 2023.0], [39.0, 2025.0], [39.1, 2026.0], [39.2, 2028.0], [39.3, 2029.0], [39.4, 2031.0], [39.5, 2032.0], [39.6, 2033.0], [39.7, 2035.0], [39.8, 2036.0], [39.9, 2038.0], [40.0, 2039.0], [40.1, 2041.0], [40.2, 2042.0], [40.3, 2044.0], [40.4, 2048.0], [40.5, 2049.0], [40.6, 2050.0], [40.7, 2053.0], [40.8, 2054.0], [40.9, 2056.0], [41.0, 2057.0], [41.1, 2058.0], [41.2, 2060.0], [41.3, 2062.0], [41.4, 2063.0], [41.5, 2065.0], [41.6, 2066.0], [41.7, 2068.0], [41.8, 2069.0], [41.9, 2070.0], [42.0, 2072.0], [42.1, 2073.0], [42.2, 2074.0], [42.3, 2075.0], [42.4, 2076.0], [42.5, 2077.0], [42.6, 2079.0], [42.7, 2080.0], [42.8, 2081.0], [42.9, 2082.0], [43.0, 2083.0], [43.1, 2084.0], [43.2, 2087.0], [43.3, 2087.0], [43.4, 2088.0], [43.5, 2090.0], [43.6, 2091.0], [43.7, 2093.0], [43.8, 2094.0], [43.9, 2095.0], [44.0, 2097.0], [44.1, 2098.0], [44.2, 2100.0], [44.3, 2101.0], [44.4, 2102.0], [44.5, 2103.0], [44.6, 2104.0], [44.7, 2105.0], [44.8, 2107.0], [44.9, 2109.0], [45.0, 2110.0], [45.1, 2111.0], [45.2, 2112.0], [45.3, 2113.0], [45.4, 2114.0], [45.5, 2115.0], [45.6, 2116.0], [45.7, 2118.0], [45.8, 2119.0], [45.9, 2120.0], [46.0, 2121.0], [46.1, 2121.0], [46.2, 2122.0], [46.3, 2124.0], [46.4, 2125.0], [46.5, 2127.0], [46.6, 2128.0], [46.7, 2130.0], [46.8, 2131.0], [46.9, 2133.0], [47.0, 2134.0], [47.1, 2136.0], [47.2, 2137.0], [47.3, 2138.0], [47.4, 2139.0], [47.5, 2140.0], [47.6, 2141.0], [47.7, 2142.0], [47.8, 2144.0], [47.9, 2145.0], [48.0, 2147.0], [48.1, 2148.0], [48.2, 2150.0], [48.3, 2151.0], [48.4, 2152.0], [48.5, 2153.0], [48.6, 2154.0], [48.7, 2155.0], [48.8, 2156.0], [48.9, 2157.0], [49.0, 2159.0], [49.1, 2160.0], [49.2, 2161.0], [49.3, 2162.0], [49.4, 2163.0], [49.5, 2165.0], [49.6, 2166.0], [49.7, 2168.0], [49.8, 2168.0], [49.9, 2169.0], [50.0, 2170.0], [50.1, 2172.0], [50.2, 2173.0], [50.3, 2174.0], [50.4, 2175.0], [50.5, 2178.0], [50.6, 2179.0], [50.7, 2180.0], [50.8, 2182.0], [50.9, 2184.0], [51.0, 2185.0], [51.1, 2186.0], [51.2, 2187.0], [51.3, 2188.0], [51.4, 2188.0], [51.5, 2190.0], [51.6, 2191.0], [51.7, 2192.0], [51.8, 2194.0], [51.9, 2196.0], [52.0, 2197.0], [52.1, 2199.0], [52.2, 2200.0], [52.3, 2201.0], [52.4, 2202.0], [52.5, 2204.0], [52.6, 2205.0], [52.7, 2206.0], [52.8, 2207.0], [52.9, 2210.0], [53.0, 2211.0], [53.1, 2212.0], [53.2, 2212.0], [53.3, 2214.0], [53.4, 2215.0], [53.5, 2217.0], [53.6, 2219.0], [53.7, 2221.0], [53.8, 2222.0], [53.9, 2224.0], [54.0, 2226.0], [54.1, 2228.0], [54.2, 2229.0], [54.3, 2229.0], [54.4, 2230.0], [54.5, 2232.0], [54.6, 2233.0], [54.7, 2234.0], [54.8, 2235.0], [54.9, 2238.0], [55.0, 2239.0], [55.1, 2240.0], [55.2, 2241.0], [55.3, 2243.0], [55.4, 2243.0], [55.5, 2245.0], [55.6, 2246.0], [55.7, 2246.0], [55.8, 2248.0], [55.9, 2248.0], [56.0, 2249.0], [56.1, 2250.0], [56.2, 2251.0], [56.3, 2251.0], [56.4, 2252.0], [56.5, 2253.0], [56.6, 2254.0], [56.7, 2254.0], [56.8, 2255.0], [56.9, 2256.0], [57.0, 2258.0], [57.1, 2259.0], [57.2, 2260.0], [57.3, 2261.0], [57.4, 2262.0], [57.5, 2264.0], [57.6, 2264.0], [57.7, 2265.0], [57.8, 2266.0], [57.9, 2268.0], [58.0, 2269.0], [58.1, 2270.0], [58.2, 2271.0], [58.3, 2273.0], [58.4, 2275.0], [58.5, 2276.0], [58.6, 2278.0], [58.7, 2279.0], [58.8, 2280.0], [58.9, 2281.0], [59.0, 2284.0], [59.1, 2286.0], [59.2, 2287.0], [59.3, 2288.0], [59.4, 2289.0], [59.5, 2291.0], [59.6, 2294.0], [59.7, 2295.0], [59.8, 2296.0], [59.9, 2296.0], [60.0, 2298.0], [60.1, 2299.0], [60.2, 2301.0], [60.3, 2302.0], [60.4, 2303.0], [60.5, 2304.0], [60.6, 2305.0], [60.7, 2307.0], [60.8, 2309.0], [60.9, 2310.0], [61.0, 2311.0], [61.1, 2312.0], [61.2, 2314.0], [61.3, 2316.0], [61.4, 2318.0], [61.5, 2319.0], [61.6, 2319.0], [61.7, 2321.0], [61.8, 2323.0], [61.9, 2324.0], [62.0, 2326.0], [62.1, 2327.0], [62.2, 2328.0], [62.3, 2329.0], [62.4, 2330.0], [62.5, 2332.0], [62.6, 2333.0], [62.7, 2334.0], [62.8, 2335.0], [62.9, 2336.0], [63.0, 2339.0], [63.1, 2340.0], [63.2, 2341.0], [63.3, 2342.0], [63.4, 2343.0], [63.5, 2345.0], [63.6, 2347.0], [63.7, 2348.0], [63.8, 2349.0], [63.9, 2351.0], [64.0, 2354.0], [64.1, 2355.0], [64.2, 2356.0], [64.3, 2358.0], [64.4, 2359.0], [64.5, 2361.0], [64.6, 2363.0], [64.7, 2364.0], [64.8, 2366.0], [64.9, 2368.0], [65.0, 2368.0], [65.1, 2370.0], [65.2, 2371.0], [65.3, 2371.0], [65.4, 2374.0], [65.5, 2376.0], [65.6, 2377.0], [65.7, 2378.0], [65.8, 2379.0], [65.9, 2381.0], [66.0, 2382.0], [66.1, 2384.0], [66.2, 2386.0], [66.3, 2388.0], [66.4, 2389.0], [66.5, 2390.0], [66.6, 2392.0], [66.7, 2393.0], [66.8, 2394.0], [66.9, 2396.0], [67.0, 2399.0], [67.1, 2402.0], [67.2, 2403.0], [67.3, 2405.0], [67.4, 2406.0], [67.5, 2407.0], [67.6, 2408.0], [67.7, 2409.0], [67.8, 2410.0], [67.9, 2412.0], [68.0, 2414.0], [68.1, 2416.0], [68.2, 2418.0], [68.3, 2419.0], [68.4, 2420.0], [68.5, 2421.0], [68.6, 2422.0], [68.7, 2424.0], [68.8, 2425.0], [68.9, 2426.0], [69.0, 2430.0], [69.1, 2430.0], [69.2, 2432.0], [69.3, 2433.0], [69.4, 2434.0], [69.5, 2436.0], [69.6, 2438.0], [69.7, 2441.0], [69.8, 2442.0], [69.9, 2443.0], [70.0, 2445.0], [70.1, 2446.0], [70.2, 2447.0], [70.3, 2449.0], [70.4, 2451.0], [70.5, 2453.0], [70.6, 2454.0], [70.7, 2457.0], [70.8, 2459.0], [70.9, 2461.0], [71.0, 2462.0], [71.1, 2464.0], [71.2, 2465.0], [71.3, 2467.0], [71.4, 2468.0], [71.5, 2469.0], [71.6, 2471.0], [71.7, 2473.0], [71.8, 2474.0], [71.9, 2476.0], [72.0, 2478.0], [72.1, 2479.0], [72.2, 2481.0], [72.3, 2482.0], [72.4, 2483.0], [72.5, 2485.0], [72.6, 2487.0], [72.7, 2490.0], [72.8, 2492.0], [72.9, 2494.0], [73.0, 2498.0], [73.1, 2500.0], [73.2, 2502.0], [73.3, 2503.0], [73.4, 2505.0], [73.5, 2506.0], [73.6, 2508.0], [73.7, 2510.0], [73.8, 2512.0], [73.9, 2514.0], [74.0, 2516.0], [74.1, 2518.0], [74.2, 2521.0], [74.3, 2524.0], [74.4, 2526.0], [74.5, 2527.0], [74.6, 2532.0], [74.7, 2536.0], [74.8, 2538.0], [74.9, 2542.0], [75.0, 2545.0], [75.1, 2546.0], [75.2, 2547.0], [75.3, 2550.0], [75.4, 2552.0], [75.5, 2553.0], [75.6, 2553.0], [75.7, 2555.0], [75.8, 2557.0], [75.9, 2559.0], [76.0, 2562.0], [76.1, 2563.0], [76.2, 2567.0], [76.3, 2570.0], [76.4, 2571.0], [76.5, 2574.0], [76.6, 2576.0], [76.7, 2580.0], [76.8, 2581.0], [76.9, 2583.0], [77.0, 2586.0], [77.1, 2588.0], [77.2, 2591.0], [77.3, 2594.0], [77.4, 2598.0], [77.5, 2599.0], [77.6, 2602.0], [77.7, 2607.0], [77.8, 2611.0], [77.9, 2613.0], [78.0, 2614.0], [78.1, 2617.0], [78.2, 2619.0], [78.3, 2621.0], [78.4, 2628.0], [78.5, 2629.0], [78.6, 2631.0], [78.7, 2633.0], [78.8, 2637.0], [78.9, 2638.0], [79.0, 2639.0], [79.1, 2644.0], [79.2, 2647.0], [79.3, 2649.0], [79.4, 2652.0], [79.5, 2654.0], [79.6, 2656.0], [79.7, 2658.0], [79.8, 2661.0], [79.9, 2662.0], [80.0, 2664.0], [80.1, 2666.0], [80.2, 2668.0], [80.3, 2670.0], [80.4, 2673.0], [80.5, 2675.0], [80.6, 2677.0], [80.7, 2679.0], [80.8, 2685.0], [80.9, 2688.0], [81.0, 2690.0], [81.1, 2692.0], [81.2, 2694.0], [81.3, 2699.0], [81.4, 2701.0], [81.5, 2703.0], [81.6, 2707.0], [81.7, 2710.0], [81.8, 2713.0], [81.9, 2716.0], [82.0, 2720.0], [82.1, 2725.0], [82.2, 2730.0], [82.3, 2733.0], [82.4, 2736.0], [82.5, 2739.0], [82.6, 2742.0], [82.7, 2744.0], [82.8, 2747.0], [82.9, 2749.0], [83.0, 2753.0], [83.1, 2758.0], [83.2, 2762.0], [83.3, 2765.0], [83.4, 2768.0], [83.5, 2771.0], [83.6, 2774.0], [83.7, 2775.0], [83.8, 2776.0], [83.9, 2778.0], [84.0, 2779.0], [84.1, 2785.0], [84.2, 2788.0], [84.3, 2792.0], [84.4, 2797.0], [84.5, 2802.0], [84.6, 2805.0], [84.7, 2808.0], [84.8, 2811.0], [84.9, 2814.0], [85.0, 2816.0], [85.1, 2820.0], [85.2, 2822.0], [85.3, 2825.0], [85.4, 2828.0], [85.5, 2831.0], [85.6, 2833.0], [85.7, 2837.0], [85.8, 2840.0], [85.9, 2844.0], [86.0, 2846.0], [86.1, 2849.0], [86.2, 2852.0], [86.3, 2855.0], [86.4, 2858.0], [86.5, 2860.0], [86.6, 2862.0], [86.7, 2864.0], [86.8, 2870.0], [86.9, 2876.0], [87.0, 2880.0], [87.1, 2884.0], [87.2, 2887.0], [87.3, 2892.0], [87.4, 2893.0], [87.5, 2896.0], [87.6, 2900.0], [87.7, 2902.0], [87.8, 2908.0], [87.9, 2910.0], [88.0, 2915.0], [88.1, 2917.0], [88.2, 2921.0], [88.3, 2927.0], [88.4, 2934.0], [88.5, 2940.0], [88.6, 2943.0], [88.7, 2945.0], [88.8, 2950.0], [88.9, 2954.0], [89.0, 2957.0], [89.1, 2965.0], [89.2, 2970.0], [89.3, 2976.0], [89.4, 2981.0], [89.5, 2985.0], [89.6, 2989.0], [89.7, 2994.0], [89.8, 3000.0], [89.9, 3003.0], [90.0, 3010.0], [90.1, 3012.0], [90.2, 3018.0], [90.3, 3021.0], [90.4, 3030.0], [90.5, 3034.0], [90.6, 3041.0], [90.7, 3046.0], [90.8, 3048.0], [90.9, 3055.0], [91.0, 3062.0], [91.1, 3068.0], [91.2, 3072.0], [91.3, 3077.0], [91.4, 3082.0], [91.5, 3090.0], [91.6, 3094.0], [91.7, 3097.0], [91.8, 3108.0], [91.9, 3113.0], [92.0, 3120.0], [92.1, 3127.0], [92.2, 3131.0], [92.3, 3132.0], [92.4, 3135.0], [92.5, 3139.0], [92.6, 3144.0], [92.7, 3149.0], [92.8, 3158.0], [92.9, 3161.0], [93.0, 3166.0], [93.1, 3168.0], [93.2, 3173.0], [93.3, 3178.0], [93.4, 3182.0], [93.5, 3186.0], [93.6, 3197.0], [93.7, 3202.0], [93.8, 3212.0], [93.9, 3220.0], [94.0, 3232.0], [94.1, 3236.0], [94.2, 3243.0], [94.3, 3248.0], [94.4, 3252.0], [94.5, 3258.0], [94.6, 3270.0], [94.7, 3274.0], [94.8, 3284.0], [94.9, 3291.0], [95.0, 3306.0], [95.1, 3316.0], [95.2, 3328.0], [95.3, 3332.0], [95.4, 3339.0], [95.5, 3344.0], [95.6, 3348.0], [95.7, 3355.0], [95.8, 3364.0], [95.9, 3370.0], [96.0, 3379.0], [96.1, 3389.0], [96.2, 3403.0], [96.3, 3410.0], [96.4, 3414.0], [96.5, 3428.0], [96.6, 3446.0], [96.7, 3455.0], [96.8, 3463.0], [96.9, 3482.0], [97.0, 3507.0], [97.1, 3521.0], [97.2, 3543.0], [97.3, 3552.0], [97.4, 3563.0], [97.5, 3580.0], [97.6, 3593.0], [97.7, 3602.0], [97.8, 3619.0], [97.9, 3660.0], [98.0, 3688.0], [98.1, 3703.0], [98.2, 3729.0], [98.3, 3745.0], [98.4, 3785.0], [98.5, 3806.0], [98.6, 3884.0], [98.7, 3918.0], [98.8, 3954.0], [98.9, 3987.0], [99.0, 4032.0], [99.1, 4063.0], [99.2, 4123.0], [99.3, 4196.0], [99.4, 4250.0], [99.5, 4282.0], [99.6, 4335.0], [99.7, 4405.0], [99.8, 4603.0], [99.9, 4855.0], [100.0, 5966.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[0.0, 10.0], [0.1, 10.0], [0.2, 11.0], [0.3, 11.0], [0.4, 11.0], [0.5, 11.0], [0.6, 12.0], [0.7, 12.0], [0.8, 12.0], [0.9, 12.0], [1.0, 13.0], [1.1, 13.0], [1.2, 13.0], [1.3, 14.0], [1.4, 14.0], [1.5, 14.0], [1.6, 14.0], [1.7, 15.0], [1.8, 15.0], [1.9, 15.0], [2.0, 16.0], [2.1, 16.0], [2.2, 17.0], [2.3, 17.0], [2.4, 17.0], [2.5, 18.0], [2.6, 18.0], [2.7, 18.0], [2.8, 19.0], [2.9, 19.0], [3.0, 20.0], [3.1, 20.0], [3.2, 22.0], [3.3, 22.0], [3.4, 23.0], [3.5, 23.0], [3.6, 24.0], [3.7, 25.0], [3.8, 25.0], [3.9, 26.0], [4.0, 26.0], [4.1, 27.0], [4.2, 28.0], [4.3, 28.0], [4.4, 29.0], [4.5, 30.0], [4.6, 30.0], [4.7, 32.0], [4.8, 32.0], [4.9, 33.0], [5.0, 33.0], [5.1, 34.0], [5.2, 35.0], [5.3, 35.0], [5.4, 37.0], [5.5, 37.0], [5.6, 38.0], [5.7, 39.0], [5.8, 40.0], [5.9, 41.0], [6.0, 42.0], [6.1, 43.0], [6.2, 44.0], [6.3, 44.0], [6.4, 45.0], [6.5, 45.0], [6.6, 46.0], [6.7, 47.0], [6.8, 48.0], [6.9, 49.0], [7.0, 50.0], [7.1, 51.0], [7.2, 51.0], [7.3, 52.0], [7.4, 53.0], [7.5, 53.0], [7.6, 54.0], [7.7, 55.0], [7.8, 55.0], [7.9, 56.0], [8.0, 57.0], [8.1, 57.0], [8.2, 58.0], [8.3, 59.0], [8.4, 60.0], [8.5, 61.0], [8.6, 61.0], [8.7, 62.0], [8.8, 62.0], [8.9, 63.0], [9.0, 64.0], [9.1, 64.0], [9.2, 65.0], [9.3, 65.0], [9.4, 65.0], [9.5, 66.0], [9.6, 67.0], [9.7, 67.0], [9.8, 68.0], [9.9, 69.0], [10.0, 70.0], [10.1, 70.0], [10.2, 71.0], [10.3, 72.0], [10.4, 73.0], [10.5, 73.0], [10.6, 74.0], [10.7, 74.0], [10.8, 76.0], [10.9, 77.0], [11.0, 77.0], [11.1, 78.0], [11.2, 79.0], [11.3, 81.0], [11.4, 81.0], [11.5, 82.0], [11.6, 83.0], [11.7, 84.0], [11.8, 85.0], [11.9, 86.0], [12.0, 87.0], [12.1, 87.0], [12.2, 88.0], [12.3, 89.0], [12.4, 90.0], [12.5, 91.0], [12.6, 92.0], [12.7, 93.0], [12.8, 94.0], [12.9, 94.0], [13.0, 96.0], [13.1, 96.0], [13.2, 97.0], [13.3, 98.0], [13.4, 100.0], [13.5, 100.0], [13.6, 101.0], [13.7, 102.0], [13.8, 103.0], [13.9, 104.0], [14.0, 105.0], [14.1, 107.0], [14.2, 108.0], [14.3, 109.0], [14.4, 110.0], [14.5, 111.0], [14.6, 113.0], [14.7, 114.0], [14.8, 115.0], [14.9, 117.0], [15.0, 118.0], [15.1, 119.0], [15.2, 120.0], [15.3, 121.0], [15.4, 122.0], [15.5, 123.0], [15.6, 125.0], [15.7, 126.0], [15.8, 128.0], [15.9, 128.0], [16.0, 130.0], [16.1, 132.0], [16.2, 133.0], [16.3, 135.0], [16.4, 136.0], [16.5, 137.0], [16.6, 139.0], [16.7, 140.0], [16.8, 142.0], [16.9, 143.0], [17.0, 144.0], [17.1, 145.0], [17.2, 147.0], [17.3, 148.0], [17.4, 150.0], [17.5, 151.0], [17.6, 153.0], [17.7, 155.0], [17.8, 158.0], [17.9, 161.0], [18.0, 163.0], [18.1, 165.0], [18.2, 169.0], [18.3, 172.0], [18.4, 175.0], [18.5, 177.0], [18.6, 180.0], [18.7, 181.0], [18.8, 184.0], [18.9, 187.0], [19.0, 188.0], [19.1, 190.0], [19.2, 192.0], [19.3, 195.0], [19.4, 198.0], [19.5, 200.0], [19.6, 202.0], [19.7, 204.0], [19.8, 208.0], [19.9, 212.0], [20.0, 213.0], [20.1, 215.0], [20.2, 218.0], [20.3, 221.0], [20.4, 225.0], [20.5, 229.0], [20.6, 233.0], [20.7, 236.0], [20.8, 238.0], [20.9, 240.0], [21.0, 243.0], [21.1, 246.0], [21.2, 249.0], [21.3, 252.0], [21.4, 255.0], [21.5, 257.0], [21.6, 260.0], [21.7, 262.0], [21.8, 264.0], [21.9, 266.0], [22.0, 268.0], [22.1, 271.0], [22.2, 276.0], [22.3, 278.0], [22.4, 281.0], [22.5, 283.0], [22.6, 286.0], [22.7, 290.0], [22.8, 295.0], [22.9, 296.0], [23.0, 299.0], [23.1, 303.0], [23.2, 307.0], [23.3, 312.0], [23.4, 315.0], [23.5, 320.0], [23.6, 325.0], [23.7, 328.0], [23.8, 334.0], [23.9, 341.0], [24.0, 345.0], [24.1, 352.0], [24.2, 354.0], [24.3, 363.0], [24.4, 371.0], [24.5, 378.0], [24.6, 382.0], [24.7, 389.0], [24.8, 401.0], [24.9, 406.0], [25.0, 415.0], [25.1, 424.0], [25.2, 430.0], [25.3, 436.0], [25.4, 445.0], [25.5, 453.0], [25.6, 461.0], [25.7, 469.0], [25.8, 478.0], [25.9, 492.0], [26.0, 503.0], [26.1, 524.0], [26.2, 531.0], [26.3, 549.0], [26.4, 562.0], [26.5, 583.0], [26.6, 610.0], [26.7, 626.0], [26.8, 653.0], [26.9, 666.0], [27.0, 679.0], [27.1, 699.0], [27.2, 709.0], [27.3, 730.0], [27.4, 748.0], [27.5, 757.0], [27.6, 772.0], [27.7, 784.0], [27.8, 804.0], [27.9, 824.0], [28.0, 872.0], [28.1, 932.0], [28.2, 1052.0], [28.3, 1099.0], [28.4, 1149.0], [28.5, 1161.0], [28.6, 1184.0], [28.7, 1194.0], [28.8, 1207.0], [28.9, 1218.0], [29.0, 1228.0], [29.1, 1247.0], [29.2, 1257.0], [29.3, 1267.0], [29.4, 1273.0], [29.5, 1280.0], [29.6, 1288.0], [29.7, 1291.0], [29.8, 1294.0], [29.9, 1300.0], [30.0, 1306.0], [30.1, 1311.0], [30.2, 1316.0], [30.3, 1321.0], [30.4, 1326.0], [30.5, 1332.0], [30.6, 1337.0], [30.7, 1340.0], [30.8, 1345.0], [30.9, 1348.0], [31.0, 1352.0], [31.1, 1354.0], [31.2, 1356.0], [31.3, 1358.0], [31.4, 1359.0], [31.5, 1362.0], [31.6, 1363.0], [31.7, 1366.0], [31.8, 1367.0], [31.9, 1371.0], [32.0, 1374.0], [32.1, 1378.0], [32.2, 1379.0], [32.3, 1381.0], [32.4, 1382.0], [32.5, 1383.0], [32.6, 1385.0], [32.7, 1387.0], [32.8, 1388.0], [32.9, 1389.0], [33.0, 1391.0], [33.1, 1392.0], [33.2, 1394.0], [33.3, 1395.0], [33.4, 1396.0], [33.5, 1399.0], [33.6, 1401.0], [33.7, 1402.0], [33.8, 1404.0], [33.9, 1406.0], [34.0, 1407.0], [34.1, 1409.0], [34.2, 1411.0], [34.3, 1412.0], [34.4, 1414.0], [34.5, 1415.0], [34.6, 1416.0], [34.7, 1419.0], [34.8, 1421.0], [34.9, 1422.0], [35.0, 1424.0], [35.1, 1426.0], [35.2, 1427.0], [35.3, 1428.0], [35.4, 1431.0], [35.5, 1432.0], [35.6, 1433.0], [35.7, 1433.0], [35.8, 1434.0], [35.9, 1436.0], [36.0, 1438.0], [36.1, 1439.0], [36.2, 1441.0], [36.3, 1443.0], [36.4, 1443.0], [36.5, 1444.0], [36.6, 1445.0], [36.7, 1446.0], [36.8, 1447.0], [36.9, 1448.0], [37.0, 1449.0], [37.1, 1450.0], [37.2, 1451.0], [37.3, 1452.0], [37.4, 1453.0], [37.5, 1454.0], [37.6, 1455.0], [37.7, 1456.0], [37.8, 1457.0], [37.9, 1459.0], [38.0, 1459.0], [38.1, 1461.0], [38.2, 1463.0], [38.3, 1463.0], [38.4, 1464.0], [38.5, 1466.0], [38.6, 1467.0], [38.7, 1467.0], [38.8, 1468.0], [38.9, 1469.0], [39.0, 1470.0], [39.1, 1471.0], [39.2, 1471.0], [39.3, 1472.0], [39.4, 1473.0], [39.5, 1474.0], [39.6, 1475.0], [39.7, 1476.0], [39.8, 1476.0], [39.9, 1477.0], [40.0, 1478.0], [40.1, 1479.0], [40.2, 1480.0], [40.3, 1480.0], [40.4, 1481.0], [40.5, 1482.0], [40.6, 1483.0], [40.7, 1484.0], [40.8, 1485.0], [40.9, 1486.0], [41.0, 1487.0], [41.1, 1488.0], [41.2, 1489.0], [41.3, 1490.0], [41.4, 1490.0], [41.5, 1491.0], [41.6, 1492.0], [41.7, 1493.0], [41.8, 1494.0], [41.9, 1495.0], [42.0, 1496.0], [42.1, 1496.0], [42.2, 1497.0], [42.3, 1498.0], [42.4, 1499.0], [42.5, 1499.0], [42.6, 1500.0], [42.7, 1501.0], [42.8, 1502.0], [42.9, 1503.0], [43.0, 1503.0], [43.1, 1504.0], [43.2, 1505.0], [43.3, 1506.0], [43.4, 1507.0], [43.5, 1508.0], [43.6, 1509.0], [43.7, 1509.0], [43.8, 1510.0], [43.9, 1511.0], [44.0, 1512.0], [44.1, 1513.0], [44.2, 1514.0], [44.3, 1515.0], [44.4, 1516.0], [44.5, 1517.0], [44.6, 1518.0], [44.7, 1519.0], [44.8, 1520.0], [44.9, 1520.0], [45.0, 1521.0], [45.1, 1522.0], [45.2, 1523.0], [45.3, 1523.0], [45.4, 1525.0], [45.5, 1526.0], [45.6, 1527.0], [45.7, 1528.0], [45.8, 1529.0], [45.9, 1529.0], [46.0, 1530.0], [46.1, 1531.0], [46.2, 1532.0], [46.3, 1533.0], [46.4, 1534.0], [46.5, 1535.0], [46.6, 1536.0], [46.7, 1536.0], [46.8, 1537.0], [46.9, 1538.0], [47.0, 1539.0], [47.1, 1540.0], [47.2, 1541.0], [47.3, 1542.0], [47.4, 1544.0], [47.5, 1544.0], [47.6, 1545.0], [47.7, 1545.0], [47.8, 1546.0], [47.9, 1547.0], [48.0, 1548.0], [48.1, 1548.0], [48.2, 1549.0], [48.3, 1550.0], [48.4, 1551.0], [48.5, 1552.0], [48.6, 1552.0], [48.7, 1553.0], [48.8, 1554.0], [48.9, 1554.0], [49.0, 1555.0], [49.1, 1556.0], [49.2, 1557.0], [49.3, 1558.0], [49.4, 1559.0], [49.5, 1559.0], [49.6, 1560.0], [49.7, 1561.0], [49.8, 1562.0], [49.9, 1563.0], [50.0, 1563.0], [50.1, 1564.0], [50.2, 1565.0], [50.3, 1566.0], [50.4, 1566.0], [50.5, 1567.0], [50.6, 1568.0], [50.7, 1569.0], [50.8, 1569.0], [50.9, 1570.0], [51.0, 1571.0], [51.1, 1571.0], [51.2, 1572.0], [51.3, 1573.0], [51.4, 1574.0], [51.5, 1575.0], [51.6, 1575.0], [51.7, 1576.0], [51.8, 1577.0], [51.9, 1578.0], [52.0, 1579.0], [52.1, 1580.0], [52.2, 1580.0], [52.3, 1582.0], [52.4, 1583.0], [52.5, 1583.0], [52.6, 1584.0], [52.7, 1585.0], [52.8, 1586.0], [52.9, 1587.0], [53.0, 1587.0], [53.1, 1588.0], [53.2, 1589.0], [53.3, 1589.0], [53.4, 1590.0], [53.5, 1590.0], [53.6, 1591.0], [53.7, 1592.0], [53.8, 1593.0], [53.9, 1593.0], [54.0, 1594.0], [54.1, 1595.0], [54.2, 1595.0], [54.3, 1596.0], [54.4, 1597.0], [54.5, 1598.0], [54.6, 1598.0], [54.7, 1599.0], [54.8, 1599.0], [54.9, 1600.0], [55.0, 1600.0], [55.1, 1601.0], [55.2, 1602.0], [55.3, 1602.0], [55.4, 1603.0], [55.5, 1604.0], [55.6, 1605.0], [55.7, 1606.0], [55.8, 1607.0], [55.9, 1608.0], [56.0, 1609.0], [56.1, 1610.0], [56.2, 1610.0], [56.3, 1611.0], [56.4, 1611.0], [56.5, 1612.0], [56.6, 1613.0], [56.7, 1613.0], [56.8, 1614.0], [56.9, 1614.0], [57.0, 1615.0], [57.1, 1615.0], [57.2, 1616.0], [57.3, 1617.0], [57.4, 1618.0], [57.5, 1619.0], [57.6, 1620.0], [57.7, 1620.0], [57.8, 1620.0], [57.9, 1621.0], [58.0, 1622.0], [58.1, 1623.0], [58.2, 1623.0], [58.3, 1624.0], [58.4, 1625.0], [58.5, 1625.0], [58.6, 1626.0], [58.7, 1626.0], [58.8, 1627.0], [58.9, 1627.0], [59.0, 1628.0], [59.1, 1628.0], [59.2, 1629.0], [59.3, 1629.0], [59.4, 1630.0], [59.5, 1631.0], [59.6, 1632.0], [59.7, 1633.0], [59.8, 1635.0], [59.9, 1636.0], [60.0, 1636.0], [60.1, 1637.0], [60.2, 1637.0], [60.3, 1638.0], [60.4, 1639.0], [60.5, 1639.0], [60.6, 1640.0], [60.7, 1641.0], [60.8, 1641.0], [60.9, 1642.0], [61.0, 1643.0], [61.1, 1643.0], [61.2, 1645.0], [61.3, 1646.0], [61.4, 1647.0], [61.5, 1648.0], [61.6, 1648.0], [61.7, 1649.0], [61.8, 1649.0], [61.9, 1650.0], [62.0, 1651.0], [62.1, 1651.0], [62.2, 1652.0], [62.3, 1652.0], [62.4, 1653.0], [62.5, 1653.0], [62.6, 1654.0], [62.7, 1655.0], [62.8, 1656.0], [62.9, 1656.0], [63.0, 1657.0], [63.1, 1657.0], [63.2, 1658.0], [63.3, 1659.0], [63.4, 1660.0], [63.5, 1660.0], [63.6, 1661.0], [63.7, 1662.0], [63.8, 1662.0], [63.9, 1663.0], [64.0, 1663.0], [64.1, 1664.0], [64.2, 1665.0], [64.3, 1665.0], [64.4, 1666.0], [64.5, 1666.0], [64.6, 1666.0], [64.7, 1667.0], [64.8, 1668.0], [64.9, 1669.0], [65.0, 1669.0], [65.1, 1670.0], [65.2, 1670.0], [65.3, 1671.0], [65.4, 1672.0], [65.5, 1672.0], [65.6, 1673.0], [65.7, 1673.0], [65.8, 1674.0], [65.9, 1674.0], [66.0, 1675.0], [66.1, 1676.0], [66.2, 1676.0], [66.3, 1677.0], [66.4, 1678.0], [66.5, 1678.0], [66.6, 1679.0], [66.7, 1680.0], [66.8, 1680.0], [66.9, 1681.0], [67.0, 1681.0], [67.1, 1682.0], [67.2, 1683.0], [67.3, 1683.0], [67.4, 1685.0], [67.5, 1685.0], [67.6, 1687.0], [67.7, 1688.0], [67.8, 1689.0], [67.9, 1690.0], [68.0, 1691.0], [68.1, 1691.0], [68.2, 1691.0], [68.3, 1692.0], [68.4, 1693.0], [68.5, 1693.0], [68.6, 1695.0], [68.7, 1695.0], [68.8, 1696.0], [68.9, 1697.0], [69.0, 1698.0], [69.1, 1699.0], [69.2, 1699.0], [69.3, 1701.0], [69.4, 1701.0], [69.5, 1702.0], [69.6, 1703.0], [69.7, 1703.0], [69.8, 1704.0], [69.9, 1705.0], [70.0, 1706.0], [70.1, 1707.0], [70.2, 1707.0], [70.3, 1708.0], [70.4, 1708.0], [70.5, 1709.0], [70.6, 1710.0], [70.7, 1711.0], [70.8, 1712.0], [70.9, 1712.0], [71.0, 1713.0], [71.1, 1714.0], [71.2, 1715.0], [71.3, 1715.0], [71.4, 1716.0], [71.5, 1717.0], [71.6, 1718.0], [71.7, 1719.0], [71.8, 1720.0], [71.9, 1720.0], [72.0, 1721.0], [72.1, 1722.0], [72.2, 1723.0], [72.3, 1724.0], [72.4, 1724.0], [72.5, 1725.0], [72.6, 1726.0], [72.7, 1727.0], [72.8, 1729.0], [72.9, 1730.0], [73.0, 1731.0], [73.1, 1731.0], [73.2, 1732.0], [73.3, 1733.0], [73.4, 1733.0], [73.5, 1734.0], [73.6, 1735.0], [73.7, 1736.0], [73.8, 1737.0], [73.9, 1738.0], [74.0, 1739.0], [74.1, 1740.0], [74.2, 1741.0], [74.3, 1741.0], [74.4, 1742.0], [74.5, 1742.0], [74.6, 1742.0], [74.7, 1744.0], [74.8, 1745.0], [74.9, 1745.0], [75.0, 1746.0], [75.1, 1747.0], [75.2, 1748.0], [75.3, 1749.0], [75.4, 1750.0], [75.5, 1751.0], [75.6, 1751.0], [75.7, 1752.0], [75.8, 1753.0], [75.9, 1754.0], [76.0, 1755.0], [76.1, 1755.0], [76.2, 1757.0], [76.3, 1758.0], [76.4, 1758.0], [76.5, 1759.0], [76.6, 1760.0], [76.7, 1761.0], [76.8, 1762.0], [76.9, 1763.0], [77.0, 1764.0], [77.1, 1765.0], [77.2, 1766.0], [77.3, 1767.0], [77.4, 1768.0], [77.5, 1769.0], [77.6, 1769.0], [77.7, 1770.0], [77.8, 1771.0], [77.9, 1772.0], [78.0, 1773.0], [78.1, 1774.0], [78.2, 1775.0], [78.3, 1776.0], [78.4, 1776.0], [78.5, 1777.0], [78.6, 1779.0], [78.7, 1779.0], [78.8, 1780.0], [78.9, 1781.0], [79.0, 1782.0], [79.1, 1783.0], [79.2, 1783.0], [79.3, 1784.0], [79.4, 1785.0], [79.5, 1785.0], [79.6, 1786.0], [79.7, 1787.0], [79.8, 1788.0], [79.9, 1789.0], [80.0, 1791.0], [80.1, 1792.0], [80.2, 1792.0], [80.3, 1793.0], [80.4, 1794.0], [80.5, 1795.0], [80.6, 1796.0], [80.7, 1797.0], [80.8, 1798.0], [80.9, 1799.0], [81.0, 1800.0], [81.1, 1801.0], [81.2, 1802.0], [81.3, 1803.0], [81.4, 1804.0], [81.5, 1805.0], [81.6, 1805.0], [81.7, 1806.0], [81.8, 1808.0], [81.9, 1808.0], [82.0, 1810.0], [82.1, 1811.0], [82.2, 1813.0], [82.3, 1813.0], [82.4, 1814.0], [82.5, 1815.0], [82.6, 1816.0], [82.7, 1818.0], [82.8, 1820.0], [82.9, 1821.0], [83.0, 1822.0], [83.1, 1822.0], [83.2, 1824.0], [83.3, 1825.0], [83.4, 1827.0], [83.5, 1828.0], [83.6, 1829.0], [83.7, 1830.0], [83.8, 1831.0], [83.9, 1831.0], [84.0, 1832.0], [84.1, 1833.0], [84.2, 1834.0], [84.3, 1834.0], [84.4, 1835.0], [84.5, 1837.0], [84.6, 1838.0], [84.7, 1840.0], [84.8, 1841.0], [84.9, 1843.0], [85.0, 1843.0], [85.1, 1844.0], [85.2, 1845.0], [85.3, 1847.0], [85.4, 1848.0], [85.5, 1849.0], [85.6, 1850.0], [85.7, 1851.0], [85.8, 1852.0], [85.9, 1853.0], [86.0, 1855.0], [86.1, 1856.0], [86.2, 1857.0], [86.3, 1859.0], [86.4, 1860.0], [86.5, 1861.0], [86.6, 1861.0], [86.7, 1864.0], [86.8, 1865.0], [86.9, 1867.0], [87.0, 1869.0], [87.1, 1871.0], [87.2, 1873.0], [87.3, 1874.0], [87.4, 1875.0], [87.5, 1876.0], [87.6, 1877.0], [87.7, 1878.0], [87.8, 1881.0], [87.9, 1882.0], [88.0, 1884.0], [88.1, 1884.0], [88.2, 1886.0], [88.3, 1888.0], [88.4, 1889.0], [88.5, 1892.0], [88.6, 1893.0], [88.7, 1895.0], [88.8, 1895.0], [88.9, 1898.0], [89.0, 1899.0], [89.1, 1901.0], [89.2, 1902.0], [89.3, 1903.0], [89.4, 1905.0], [89.5, 1907.0], [89.6, 1910.0], [89.7, 1911.0], [89.8, 1913.0], [89.9, 1914.0], [90.0, 1916.0], [90.1, 1919.0], [90.2, 1920.0], [90.3, 1921.0], [90.4, 1925.0], [90.5, 1927.0], [90.6, 1930.0], [90.7, 1931.0], [90.8, 1934.0], [90.9, 1936.0], [91.0, 1941.0], [91.1, 1944.0], [91.2, 1948.0], [91.3, 1951.0], [91.4, 1954.0], [91.5, 1957.0], [91.6, 1961.0], [91.7, 1967.0], [91.8, 1972.0], [91.9, 1977.0], [92.0, 1980.0], [92.1, 1989.0], [92.2, 1992.0], [92.3, 1995.0], [92.4, 2001.0], [92.5, 2007.0], [92.6, 2010.0], [92.7, 2018.0], [92.8, 2021.0], [92.9, 2026.0], [93.0, 2038.0], [93.1, 2042.0], [93.2, 2051.0], [93.3, 2061.0], [93.4, 2071.0], [93.5, 2076.0], [93.6, 2090.0], [93.7, 2104.0], [93.8, 2115.0], [93.9, 2124.0], [94.0, 2140.0], [94.1, 2156.0], [94.2, 2170.0], [94.3, 2200.0], [94.4, 2218.0], [94.5, 2240.0], [94.6, 2261.0], [94.7, 2279.0], [94.8, 2296.0], [94.9, 2307.0], [95.0, 2317.0], [95.1, 2330.0], [95.2, 2344.0], [95.3, 2351.0], [95.4, 2376.0], [95.5, 2387.0], [95.6, 2408.0], [95.7, 2419.0], [95.8, 2440.0], [95.9, 2459.0], [96.0, 2471.0], [96.1, 2478.0], [96.2, 2494.0], [96.3, 2513.0], [96.4, 2523.0], [96.5, 2533.0], [96.6, 2548.0], [96.7, 2565.0], [96.8, 2594.0], [96.9, 2609.0], [97.0, 2623.0], [97.1, 2631.0], [97.2, 2648.0], [97.3, 2665.0], [97.4, 2675.0], [97.5, 2699.0], [97.6, 2726.0], [97.7, 2733.0], [97.8, 2763.0], [97.9, 2777.0], [98.0, 2788.0], [98.1, 2815.0], [98.2, 2826.0], [98.3, 2836.0], [98.4, 2857.0], [98.5, 2880.0], [98.6, 2903.0], [98.7, 2916.0], [98.8, 2933.0], [98.9, 2944.0], [99.0, 2976.0], [99.1, 3000.0], [99.2, 3035.0], [99.3, 3077.0], [99.4, 3128.0], [99.5, 3204.0], [99.6, 3248.0], [99.7, 3291.0], [99.8, 3350.0], [99.9, 3560.0], [100.0, 3834.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 938.0, "series": [{"data": [[0.0, 24.0], [600.0, 114.0], [700.0, 134.0], [800.0, 126.0], [900.0, 118.0], [1000.0, 130.0], [1100.0, 146.0], [1200.0, 138.0], [1300.0, 146.0], [1400.0, 97.0], [1500.0, 73.0], [1600.0, 68.0], [1700.0, 96.0], [1800.0, 222.0], [1900.0, 268.0], [2000.0, 442.0], [2100.0, 515.0], [2300.0, 450.0], [2200.0, 518.0], [2400.0, 393.0], [2500.0, 287.0], [2600.0, 249.0], [2800.0, 202.0], [2700.0, 201.0], [2900.0, 146.0], [3000.0, 126.0], [3100.0, 124.0], [3200.0, 87.0], [3300.0, 78.0], [3400.0, 52.0], [3500.0, 46.0], [3700.0, 27.0], [3600.0, 25.0], [3800.0, 10.0], [3900.0, 20.0], [4000.0, 14.0], [4100.0, 9.0], [4200.0, 16.0], [4300.0, 9.0], [4500.0, 1.0], [4400.0, 6.0], [4600.0, 4.0], [4800.0, 3.0], [4700.0, 1.0], [4900.0, 1.0], [5300.0, 1.0], [5600.0, 1.0], [5500.0, 1.0], [5900.0, 1.0], [100.0, 86.0], [200.0, 91.0], [300.0, 123.0], [400.0, 106.0], [500.0, 122.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[0.0, 876.0], [600.0, 35.0], [700.0, 42.0], [800.0, 19.0], [900.0, 10.0], [1000.0, 7.0], [1100.0, 29.0], [1200.0, 75.0], [1300.0, 236.0], [1400.0, 591.0], [1500.0, 807.0], [100.0, 399.0], [1600.0, 938.0], [1700.0, 766.0], [1800.0, 530.0], [1900.0, 218.0], [2000.0, 83.0], [2100.0, 43.0], [2200.0, 37.0], [2300.0, 45.0], [2400.0, 47.0], [2500.0, 37.0], [2600.0, 45.0], [2700.0, 33.0], [2800.0, 37.0], [2900.0, 33.0], [3000.0, 16.0], [3100.0, 10.0], [200.0, 232.0], [3200.0, 15.0], [3300.0, 5.0], [3400.0, 5.0], [3500.0, 3.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 3.0], [300.0, 114.0], [400.0, 78.0], [500.0, 39.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2129.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8539.0, "series": [{"data": [[0.0, 2129.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2366.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8539.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.31762652705061, "minX": 1.69850682E12, "maxY": 120.0, "series": [{"data": [[1.69850694E12, 105.09434654919234], [1.69850706E12, 117.56353591160219], [1.69850688E12, 39.487248724872465], [1.698507E12, 120.0], [1.69850682E12, 7.31762652705061]], "isOverall": false, "label": "OnlineConversion", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69850706E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13.157894736842106, "minX": 1.0, "maxY": 4088.5333333333347, "series": [{"data": [[2.0, 315.29999999999995], [3.0, 207.0], [4.0, 240.82608695652175], [5.0, 181.16666666666666], [6.0, 282.61538461538464], [7.0, 378.4642857142857], [8.0, 277.47999999999996], [9.0, 408.1034482758621], [10.0, 381.1000000000001], [11.0, 391.1935483870969], [12.0, 435.3793103448275], [13.0, 470.62068965517244], [14.0, 469.1379310344828], [15.0, 519.2592592592592], [16.0, 592.8999999999999], [17.0, 652.4333333333334], [18.0, 623.625], [19.0, 522.1923076923076], [20.0, 705.7777777777778], [21.0, 601.0322580645162], [22.0, 723.8125], [23.0, 681.8965517241379], [24.0, 718.6250000000001], [25.0, 874.1785714285712], [26.0, 847.3939393939393], [27.0, 801.0909090909091], [28.0, 853.090909090909], [29.0, 830.0000000000001], [30.0, 930.1212121212121], [31.0, 815.4242424242425], [32.0, 838.0357142857143], [33.0, 1049.9393939393938], [34.0, 1106.4857142857143], [35.0, 946.2972972972973], [36.0, 802.9705882352941], [37.0, 958.4666666666667], [38.0, 965.8888888888888], [39.0, 957.9411764705882], [40.0, 929.6551724137929], [41.0, 1089.0], [42.0, 1187.1153846153848], [43.0, 1340.148148148148], [44.0, 1387.3142857142855], [45.0, 1321.4054054054056], [46.0, 1446.3939393939397], [47.0, 1480.3235294117649], [48.0, 1411.6756756756756], [49.0, 1347.4242424242425], [50.0, 1301.0], [51.0, 1364.0689655172414], [52.0, 1441.2500000000002], [53.0, 1405.4399999999998], [54.0, 1322.9999999999998], [55.0, 1329.71875], [56.0, 1263.5454545454545], [57.0, 1300.029411764706], [58.0, 1242.814814814815], [59.0, 1295.3529411764705], [60.0, 1371.2413793103447], [61.0, 1287.4285714285716], [62.0, 1500.0666666666666], [63.0, 1752.0000000000002], [64.0, 2136.9166666666665], [65.0, 2615.0000000000005], [66.0, 2997.6428571428564], [67.0, 2392.8181818181815], [68.0, 2853.8333333333335], [69.0, 3402.666666666667], [70.0, 2687.0000000000005], [71.0, 2415.846153846154], [72.0, 2673.727272727273], [73.0, 3112.2499999999995], [74.0, 3150.133333333333], [75.0, 3117.4166666666665], [76.0, 3088.2777777777774], [77.0, 3013.8], [78.0, 3136.1], [79.0, 3469.1578947368425], [80.0, 3216.5], [81.0, 2961.1538461538457], [82.0, 3010.764705882353], [83.0, 3166.1818181818185], [84.0, 3736.3846153846157], [85.0, 3350.4], [86.0, 3427.4117647058824], [87.0, 3402.3999999999996], [88.0, 3119.7999999999993], [89.0, 3573.2499999999995], [90.0, 3701.8666666666663], [91.0, 3397.5], [92.0, 4088.5333333333347], [93.0, 3761.642857142857], [94.0, 3589.3888888888887], [95.0, 3935.5], [96.0, 3083.0588235294113], [97.0, 2731.904761904762], [98.0, 3103.5263157894738], [99.0, 2506.054054054054], [100.0, 1931.0000000000002], [101.0, 1984.8666666666666], [102.0, 2003.3428571428572], [103.0, 2002.2142857142856], [104.0, 1929.0937499999998], [105.0, 2038.3333333333335], [106.0, 2170.6], [107.0, 2056.1000000000004], [108.0, 2033.4516129032256], [109.0, 2148.23076923077], [110.0, 2226.266666666667], [111.0, 2077.1176470588243], [112.0, 2189.3461538461534], [113.0, 2227.375], [114.0, 2278.757575757576], [115.0, 2170.2580645161293], [116.0, 2354.8799999999997], [117.0, 2166.689655172413], [118.0, 2367.689655172414], [119.0, 2625.0322580645166], [120.0, 2433.9159999999956], [1.0, 188.25]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[90.82630120110862, 2024.1924853711112]], "isOverall": false, "label": "Leer Archivo-Aggregated", "isController": false}, {"data": [[2.0, 13.157894736842106], [3.0, 18.5], [4.0, 17.708333333333332], [5.0, 20.8], [6.0, 21.923076923076927], [7.0, 23.851851851851844], [8.0, 30.807692307692307], [9.0, 37.89655172413793], [10.0, 26.724137931034484], [11.0, 38.38709677419356], [12.0, 40.75862068965517], [13.0, 41.068965517241395], [14.0, 48.344827586206904], [15.0, 63.64285714285716], [16.0, 48.36666666666668], [17.0, 42.111111111111114], [18.0, 47.33333333333332], [19.0, 111.89285714285714], [20.0, 54.735294117647065], [21.0, 87.49999999999999], [22.0, 69.28571428571428], [23.0, 67.15625], [24.0, 132.03125], [25.0, 49.666666666666664], [26.0, 75.90322580645162], [27.0, 105.60000000000001], [28.0, 98.28125], [29.0, 99.93333333333335], [30.0, 80.26470588235293], [31.0, 107.99999999999999], [32.0, 241.06666666666666], [33.0, 94.96969696969697], [34.0, 83.64516129032259], [35.0, 164.9166666666667], [36.0, 230.80555555555554], [37.0, 290.28125], [38.0, 262.06060606060606], [39.0, 275.88888888888886], [40.0, 361.14814814814815], [41.0, 308.1891891891892], [42.0, 242.9655172413793], [43.0, 135.03333333333333], [44.0, 128.88571428571427], [45.0, 149.02439024390242], [46.0, 103.87096774193547], [47.0, 163.72222222222223], [48.0, 143.00000000000003], [49.0, 202.35294117647055], [50.0, 259.264705882353], [51.0, 239.66666666666666], [52.0, 269.2750000000001], [53.0, 316.4999999999999], [54.0, 346.0370370370371], [55.0, 432.68965517241384], [56.0, 539.6774193548388], [57.0, 591.1025641025641], [58.0, 707.7142857142859], [59.0, 639.8235294117646], [60.0, 616.4230769230769], [61.0, 867.9230769230769], [62.0, 1160.6000000000001], [63.0, 1407.1], [64.0, 1635.5], [65.0, 2136.5454545454536], [66.0, 1900.7058823529412], [67.0, 1871.5], [68.0, 2148.5], [69.0, 2440.7], [70.0, 1777.4375000000002], [71.0, 1875.4705882352941], [72.0, 2262.25], [73.0, 2535.5454545454545], [74.0, 2557.692307692308], [75.0, 2390.500000000001], [76.0, 2150.5333333333333], [77.0, 2494.0], [78.0, 2274.6666666666665], [79.0, 2777.0588235294117], [80.0, 2383.411764705883], [81.0, 2259.0], [82.0, 2362.722222222222], [83.0, 2841.222222222222], [84.0, 2894.230769230769], [85.0, 2852.47619047619], [86.0, 2584.6], [87.0, 2681.5], [88.0, 2693.0000000000005], [89.0, 2805.782608695652], [90.0, 2376.0], [91.0, 2975.0909090909086], [92.0, 3106.714285714286], [93.0, 3197.444444444445], [94.0, 3017.454545454545], [95.0, 2765.870967741935], [96.0, 2558.1], [97.0, 2193.210526315789], [98.0, 2072.4615384615386], [99.0, 1580.7], [100.0, 1357.878787878788], [101.0, 1356.27027027027], [102.0, 1458.8076923076924], [103.0, 1401.828571428571], [104.0, 1332.8571428571427], [105.0, 1446.7307692307693], [106.0, 1515.5675675675677], [107.0, 1316.3913043478265], [108.0, 1443.8275862068963], [109.0, 1593.6249999999995], [110.0, 1423.9333333333334], [111.0, 1484.2424242424238], [112.0, 1541.3870967741934], [113.0, 1475.3125000000002], [114.0, 1562.5199999999998], [115.0, 1576.1000000000001], [116.0, 1474.4], [117.0, 1553.1538461538462], [118.0, 1683.047619047619], [119.0, 1752.731707317073], [120.0, 1668.431590974005], [1.0, 24.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[90.77660550458718, 1292.4354740061149]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 120.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3265.766666666667, "minX": 1.69850682E12, "maxY": 4.6192426195E8, "series": [{"data": [[1.69850694E12, 3.5532655701666665E8], [1.69850706E12, 3.8322594106666666E8], [1.69850688E12, 4.3481441995E8], [1.698507E12, 4.6192426195E8], [1.69850682E12, 7.396061228333333E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69850694E12, 15575.2], [1.69850706E12, 16632.0], [1.69850688E12, 19057.966666666667], [1.698507E12, 20116.066666666666], [1.69850682E12, 3265.766666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69850706E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 27.400684931506834, "minX": 1.69850682E12, "maxY": 2516.254074074072, "series": [{"data": [[1.69850694E12, 2516.254074074072], [1.69850706E12, 2465.45398351648], [1.69850688E12, 1103.8904358353507], [1.698507E12, 2430.9310541310538], [1.69850682E12, 243.95373665480406]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.69850694E12, 1853.2590975254745], [1.69850706E12, 1654.1388888888905], [1.69850688E12, 334.6127305175486], [1.698507E12, 1684.9429549343984], [1.69850682E12, 27.400684931506834]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69850706E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18.89323843416369, "minX": 1.69850682E12, "maxY": 1853.2292576419184, "series": [{"data": [[1.69850694E12, 1786.7037037037026], [1.69850706E12, 1628.7376373626382], [1.69850688E12, 283.559927360775], [1.698507E12, 1657.3584045584064], [1.69850682E12, 18.89323843416369]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.69850694E12, 1853.2292576419184], [1.69850706E12, 1654.1291666666655], [1.69850688E12, 334.5734681737063], [1.698507E12, 1684.930975470625], [1.69850682E12, 27.328767123287665]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69850706E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69850682E12, "maxY": 0.9702558001189776, "series": [{"data": [[1.69850694E12, 0.10740740740740735], [1.69850706E12, 0.134615384615385], [1.69850688E12, 0.0], [1.698507E12, 0.14814814814814822], [1.69850682E12, 0.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.69850694E12, 0.6717612809315858], [1.69850706E12, 0.4874999999999989], [1.69850688E12, 0.9702558001189776], [1.698507E12, 0.4580718767826571], [1.69850682E12, 0.2808219178082195]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69850706E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.69850682E12, "maxY": 5966.0, "series": [{"data": [[1.69850694E12, 5966.0], [1.69850706E12, 4335.0], [1.69850688E12, 5692.0], [1.698507E12, 4855.0], [1.69850682E12, 769.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69850694E12, 3135.0], [1.69850706E12, 2822.3], [1.69850688E12, 1499.6], [1.698507E12, 2739.2], [1.69850682E12, 338.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69850694E12, 4290.25], [1.69850706E12, 3507.5100000000034], [1.69850688E12, 2875.3199999999997], [1.698507E12, 3381.1899999999987], [1.69850682E12, 479.8599999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69850694E12, 3526.75], [1.69850706E12, 3107.15], [1.69850688E12, 1887.0], [1.698507E12, 2992.5499999999997], [1.69850682E12, 381.29999999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69850694E12, 1086.0], [1.69850706E12, 1193.0], [1.69850688E12, 10.0], [1.698507E12, 1272.0], [1.69850682E12, 10.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69850694E12, 2059.5], [1.69850706E12, 1910.0], [1.69850688E12, 568.0], [1.698507E12, 1935.0], [1.69850682E12, 66.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69850706E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 61.0, "minX": 1.0, "maxY": 3588.0, "series": [{"data": [[12.0, 2015.0], [15.0, 1512.5], [17.0, 2233.0], [18.0, 2648.5], [19.0, 3588.0], [20.0, 3201.0], [22.0, 2949.0], [23.0, 2612.0], [24.0, 1992.5], [25.0, 2506.0], [26.0, 2834.5], [27.0, 2842.0], [28.0, 3285.5], [30.0, 1617.5], [31.0, 2635.0], [32.0, 2611.5], [33.0, 2631.0], [34.0, 3046.0], [35.0, 2987.0], [37.0, 1303.0], [39.0, 1223.0], [38.0, 1862.0], [40.0, 1884.5], [41.0, 1903.0], [43.0, 1676.0], [42.0, 1994.5], [45.0, 2169.0], [44.0, 2002.0], [47.0, 2038.5], [49.0, 1746.0], [48.0, 1615.5], [51.0, 302.0], [50.0, 1905.5], [52.0, 1634.0], [53.0, 1784.0], [55.0, 1522.0], [54.0, 1834.0], [56.0, 1777.0], [57.0, 1613.0], [59.0, 1791.0], [58.0, 1587.0], [60.0, 1634.5], [61.0, 1675.0], [62.0, 531.5], [63.0, 1149.0], [65.0, 1447.0], [66.0, 1633.0], [67.0, 1333.5], [64.0, 1738.0], [68.0, 1759.5], [69.0, 1715.5], [71.0, 760.0], [70.0, 1881.0], [72.0, 1914.0], [74.0, 1766.5], [81.0, 1837.0], [1.0, 61.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 81.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 57.0, "minX": 1.0, "maxY": 3055.0, "series": [{"data": [[12.0, 1432.0], [15.0, 1186.5], [17.0, 1901.0], [18.0, 2226.0], [19.0, 3042.0], [20.0, 3055.0], [22.0, 2901.0], [23.0, 2290.0], [24.0, 1825.5], [25.0, 2288.0], [26.0, 2391.0], [27.0, 2440.0], [28.0, 2787.5], [30.0, 1261.5], [31.0, 2537.0], [32.0, 2380.0], [33.0, 2375.0], [34.0, 2812.5], [35.0, 2854.0], [37.0, 1157.0], [39.0, 1108.0], [38.0, 1625.5], [40.0, 1570.5], [41.0, 1738.0], [43.0, 1451.0], [42.0, 1476.5], [45.0, 1847.0], [44.0, 1730.5], [47.0, 1654.0], [49.0, 1562.0], [48.0, 1474.0], [51.0, 199.0], [50.0, 1580.5], [52.0, 1468.0], [53.0, 1600.0], [55.0, 1465.0], [54.0, 1600.0], [56.0, 1537.5], [57.0, 1462.0], [59.0, 1653.0], [58.0, 1424.0], [60.0, 1552.0], [61.0, 1548.0], [62.0, 99.5], [63.0, 610.0], [65.0, 1357.0], [66.0, 1504.0], [67.0, 854.5], [64.0, 1595.5], [68.0, 1520.0], [69.0, 1633.0], [71.0, 572.0], [70.0, 1706.0], [72.0, 1651.0], [74.0, 1650.5], [81.0, 1708.0], [1.0, 57.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 81.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9.766666666666667, "minX": 1.69850682E12, "maxY": 58.46666666666667, "series": [{"data": [[1.69850694E12, 46.21666666666667], [1.69850706E12, 46.266666666666666], [1.69850688E12, 56.516666666666666], [1.698507E12, 58.46666666666667], [1.69850682E12, 9.766666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69850706E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 9.55, "minX": 1.69850682E12, "maxY": 58.46666666666667, "series": [{"data": [[1.69850694E12, 45.4], [1.69850706E12, 48.266666666666666], [1.69850688E12, 55.55], [1.698507E12, 58.46666666666667], [1.69850682E12, 9.55]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69850706E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.683333333333334, "minX": 1.69850682E12, "maxY": 29.25, "series": [{"data": [[1.69850694E12, 22.5], [1.69850706E12, 24.266666666666666], [1.69850688E12, 27.533333333333335], [1.698507E12, 29.25], [1.69850682E12, 4.683333333333334]], "isOverall": false, "label": "Leer Archivo-success", "isController": false}, {"data": [[1.69850694E12, 22.9], [1.69850706E12, 24.0], [1.69850688E12, 28.016666666666666], [1.698507E12, 29.216666666666665], [1.69850682E12, 4.866666666666666]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69850706E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9.55, "minX": 1.69850682E12, "maxY": 58.46666666666667, "series": [{"data": [[1.69850694E12, 45.4], [1.69850706E12, 48.266666666666666], [1.69850688E12, 55.55], [1.698507E12, 58.46666666666667], [1.69850682E12, 9.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69850706E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

