/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 74007.0, "series": [{"data": [[0.0, 61.0], [0.1, 73.0], [0.2, 76.0], [0.3, 85.0], [0.4, 106.0], [0.5, 126.0], [0.6, 157.0], [0.7, 174.0], [0.8, 204.0], [0.9, 396.0], [1.0, 417.0], [1.1, 424.0], [1.2, 430.0], [1.3, 432.0], [1.4, 437.0], [1.5, 441.0], [1.6, 443.0], [1.7, 446.0], [1.8, 450.0], [1.9, 452.0], [2.0, 453.0], [2.1, 456.0], [2.2, 459.0], [2.3, 461.0], [2.4, 462.0], [2.5, 463.0], [2.6, 465.0], [2.7, 467.0], [2.8, 467.0], [2.9, 468.0], [3.0, 469.0], [3.1, 472.0], [3.2, 473.0], [3.3, 474.0], [3.4, 475.0], [3.5, 478.0], [3.6, 479.0], [3.7, 480.0], [3.8, 481.0], [3.9, 483.0], [4.0, 484.0], [4.1, 485.0], [4.2, 485.0], [4.3, 486.0], [4.4, 487.0], [4.5, 488.0], [4.6, 488.0], [4.7, 489.0], [4.8, 489.0], [4.9, 491.0], [5.0, 491.0], [5.1, 492.0], [5.2, 493.0], [5.3, 494.0], [5.4, 494.0], [5.5, 495.0], [5.6, 496.0], [5.7, 496.0], [5.8, 497.0], [5.9, 498.0], [6.0, 499.0], [6.1, 500.0], [6.2, 500.0], [6.3, 501.0], [6.4, 502.0], [6.5, 503.0], [6.6, 503.0], [6.7, 504.0], [6.8, 505.0], [6.9, 506.0], [7.0, 507.0], [7.1, 508.0], [7.2, 508.0], [7.3, 509.0], [7.4, 509.0], [7.5, 510.0], [7.6, 511.0], [7.7, 511.0], [7.8, 513.0], [7.9, 513.0], [8.0, 514.0], [8.1, 515.0], [8.2, 516.0], [8.3, 517.0], [8.4, 517.0], [8.5, 518.0], [8.6, 518.0], [8.7, 518.0], [8.8, 519.0], [8.9, 519.0], [9.0, 520.0], [9.1, 520.0], [9.2, 522.0], [9.3, 522.0], [9.4, 523.0], [9.5, 524.0], [9.6, 524.0], [9.7, 525.0], [9.8, 526.0], [9.9, 527.0], [10.0, 528.0], [10.1, 529.0], [10.2, 529.0], [10.3, 529.0], [10.4, 530.0], [10.5, 530.0], [10.6, 531.0], [10.7, 531.0], [10.8, 532.0], [10.9, 532.0], [11.0, 533.0], [11.1, 533.0], [11.2, 534.0], [11.3, 534.0], [11.4, 534.0], [11.5, 535.0], [11.6, 535.0], [11.7, 535.0], [11.8, 536.0], [11.9, 537.0], [12.0, 538.0], [12.1, 538.0], [12.2, 538.0], [12.3, 538.0], [12.4, 539.0], [12.5, 539.0], [12.6, 540.0], [12.7, 541.0], [12.8, 542.0], [12.9, 542.0], [13.0, 543.0], [13.1, 544.0], [13.2, 544.0], [13.3, 545.0], [13.4, 546.0], [13.5, 547.0], [13.6, 547.0], [13.7, 548.0], [13.8, 548.0], [13.9, 549.0], [14.0, 549.0], [14.1, 550.0], [14.2, 550.0], [14.3, 551.0], [14.4, 551.0], [14.5, 552.0], [14.6, 552.0], [14.7, 553.0], [14.8, 553.0], [14.9, 554.0], [15.0, 554.0], [15.1, 555.0], [15.2, 555.0], [15.3, 556.0], [15.4, 557.0], [15.5, 558.0], [15.6, 559.0], [15.7, 559.0], [15.8, 560.0], [15.9, 560.0], [16.0, 561.0], [16.1, 562.0], [16.2, 562.0], [16.3, 563.0], [16.4, 563.0], [16.5, 564.0], [16.6, 564.0], [16.7, 565.0], [16.8, 565.0], [16.9, 566.0], [17.0, 566.0], [17.1, 567.0], [17.2, 568.0], [17.3, 568.0], [17.4, 568.0], [17.5, 569.0], [17.6, 570.0], [17.7, 571.0], [17.8, 571.0], [17.9, 571.0], [18.0, 572.0], [18.1, 573.0], [18.2, 573.0], [18.3, 574.0], [18.4, 575.0], [18.5, 575.0], [18.6, 576.0], [18.7, 576.0], [18.8, 577.0], [18.9, 577.0], [19.0, 578.0], [19.1, 579.0], [19.2, 579.0], [19.3, 580.0], [19.4, 581.0], [19.5, 581.0], [19.6, 582.0], [19.7, 583.0], [19.8, 584.0], [19.9, 584.0], [20.0, 584.0], [20.1, 585.0], [20.2, 586.0], [20.3, 587.0], [20.4, 587.0], [20.5, 588.0], [20.6, 588.0], [20.7, 589.0], [20.8, 590.0], [20.9, 592.0], [21.0, 592.0], [21.1, 593.0], [21.2, 593.0], [21.3, 594.0], [21.4, 595.0], [21.5, 595.0], [21.6, 597.0], [21.7, 597.0], [21.8, 598.0], [21.9, 599.0], [22.0, 600.0], [22.1, 600.0], [22.2, 601.0], [22.3, 602.0], [22.4, 602.0], [22.5, 603.0], [22.6, 603.0], [22.7, 604.0], [22.8, 605.0], [22.9, 605.0], [23.0, 606.0], [23.1, 607.0], [23.2, 607.0], [23.3, 608.0], [23.4, 608.0], [23.5, 609.0], [23.6, 610.0], [23.7, 611.0], [23.8, 611.0], [23.9, 613.0], [24.0, 613.0], [24.1, 614.0], [24.2, 615.0], [24.3, 616.0], [24.4, 617.0], [24.5, 617.0], [24.6, 619.0], [24.7, 619.0], [24.8, 620.0], [24.9, 620.0], [25.0, 621.0], [25.1, 622.0], [25.2, 623.0], [25.3, 624.0], [25.4, 625.0], [25.5, 625.0], [25.6, 626.0], [25.7, 627.0], [25.8, 628.0], [25.9, 629.0], [26.0, 629.0], [26.1, 631.0], [26.2, 632.0], [26.3, 633.0], [26.4, 634.0], [26.5, 634.0], [26.6, 636.0], [26.7, 636.0], [26.8, 637.0], [26.9, 637.0], [27.0, 638.0], [27.1, 638.0], [27.2, 639.0], [27.3, 641.0], [27.4, 641.0], [27.5, 643.0], [27.6, 643.0], [27.7, 644.0], [27.8, 645.0], [27.9, 646.0], [28.0, 646.0], [28.1, 647.0], [28.2, 649.0], [28.3, 650.0], [28.4, 651.0], [28.5, 652.0], [28.6, 653.0], [28.7, 654.0], [28.8, 654.0], [28.9, 655.0], [29.0, 656.0], [29.1, 657.0], [29.2, 657.0], [29.3, 659.0], [29.4, 660.0], [29.5, 661.0], [29.6, 662.0], [29.7, 663.0], [29.8, 663.0], [29.9, 664.0], [30.0, 665.0], [30.1, 666.0], [30.2, 667.0], [30.3, 668.0], [30.4, 669.0], [30.5, 669.0], [30.6, 670.0], [30.7, 671.0], [30.8, 672.0], [30.9, 674.0], [31.0, 676.0], [31.1, 677.0], [31.2, 678.0], [31.3, 679.0], [31.4, 680.0], [31.5, 681.0], [31.6, 682.0], [31.7, 682.0], [31.8, 683.0], [31.9, 685.0], [32.0, 686.0], [32.1, 687.0], [32.2, 689.0], [32.3, 690.0], [32.4, 691.0], [32.5, 692.0], [32.6, 693.0], [32.7, 694.0], [32.8, 695.0], [32.9, 695.0], [33.0, 696.0], [33.1, 697.0], [33.2, 698.0], [33.3, 700.0], [33.4, 701.0], [33.5, 702.0], [33.6, 702.0], [33.7, 703.0], [33.8, 705.0], [33.9, 707.0], [34.0, 710.0], [34.1, 710.0], [34.2, 711.0], [34.3, 712.0], [34.4, 714.0], [34.5, 715.0], [34.6, 716.0], [34.7, 718.0], [34.8, 718.0], [34.9, 719.0], [35.0, 722.0], [35.1, 722.0], [35.2, 723.0], [35.3, 724.0], [35.4, 726.0], [35.5, 728.0], [35.6, 728.0], [35.7, 730.0], [35.8, 731.0], [35.9, 732.0], [36.0, 734.0], [36.1, 735.0], [36.2, 737.0], [36.3, 738.0], [36.4, 739.0], [36.5, 741.0], [36.6, 742.0], [36.7, 743.0], [36.8, 745.0], [36.9, 747.0], [37.0, 747.0], [37.1, 748.0], [37.2, 749.0], [37.3, 750.0], [37.4, 753.0], [37.5, 755.0], [37.6, 756.0], [37.7, 757.0], [37.8, 759.0], [37.9, 762.0], [38.0, 763.0], [38.1, 765.0], [38.2, 767.0], [38.3, 768.0], [38.4, 771.0], [38.5, 772.0], [38.6, 774.0], [38.7, 777.0], [38.8, 781.0], [38.9, 782.0], [39.0, 784.0], [39.1, 785.0], [39.2, 787.0], [39.3, 787.0], [39.4, 788.0], [39.5, 791.0], [39.6, 792.0], [39.7, 795.0], [39.8, 800.0], [39.9, 804.0], [40.0, 806.0], [40.1, 808.0], [40.2, 811.0], [40.3, 812.0], [40.4, 812.0], [40.5, 815.0], [40.6, 817.0], [40.7, 817.0], [40.8, 822.0], [40.9, 825.0], [41.0, 826.0], [41.1, 828.0], [41.2, 832.0], [41.3, 833.0], [41.4, 834.0], [41.5, 836.0], [41.6, 839.0], [41.7, 842.0], [41.8, 846.0], [41.9, 847.0], [42.0, 852.0], [42.1, 854.0], [42.2, 860.0], [42.3, 864.0], [42.4, 865.0], [42.5, 867.0], [42.6, 871.0], [42.7, 873.0], [42.8, 877.0], [42.9, 878.0], [43.0, 886.0], [43.1, 888.0], [43.2, 889.0], [43.3, 893.0], [43.4, 896.0], [43.5, 898.0], [43.6, 902.0], [43.7, 907.0], [43.8, 912.0], [43.9, 916.0], [44.0, 920.0], [44.1, 923.0], [44.2, 927.0], [44.3, 931.0], [44.4, 937.0], [44.5, 944.0], [44.6, 954.0], [44.7, 957.0], [44.8, 963.0], [44.9, 966.0], [45.0, 972.0], [45.1, 975.0], [45.2, 983.0], [45.3, 988.0], [45.4, 995.0], [45.5, 1002.0], [45.6, 1010.0], [45.7, 1012.0], [45.8, 1026.0], [45.9, 1031.0], [46.0, 1040.0], [46.1, 1045.0], [46.2, 1062.0], [46.3, 1070.0], [46.4, 1075.0], [46.5, 1098.0], [46.6, 1102.0], [46.7, 1122.0], [46.8, 1129.0], [46.9, 1139.0], [47.0, 1160.0], [47.1, 1169.0], [47.2, 1197.0], [47.3, 1236.0], [47.4, 1251.0], [47.5, 1269.0], [47.6, 1310.0], [47.7, 1350.0], [47.8, 1387.0], [47.9, 1449.0], [48.0, 1516.0], [48.1, 1629.0], [48.2, 1802.0], [48.3, 1837.0], [48.4, 1869.0], [48.5, 1996.0], [48.6, 2073.0], [48.7, 2135.0], [48.8, 2216.0], [48.9, 2378.0], [49.0, 2423.0], [49.1, 2560.0], [49.2, 2622.0], [49.3, 2880.0], [49.4, 3020.0], [49.5, 3163.0], [49.6, 3419.0], [49.7, 4093.0], [49.8, 4568.0], [49.9, 6592.0], [50.0, 8319.0], [50.1, 9138.0], [50.2, 9554.0], [50.3, 9895.0], [50.4, 10443.0], [50.5, 10801.0], [50.6, 11569.0], [50.7, 12034.0], [50.8, 12949.0], [50.9, 13489.0], [51.0, 14627.0], [51.1, 14987.0], [51.2, 15560.0], [51.3, 15908.0], [51.4, 16404.0], [51.5, 17029.0], [51.6, 17775.0], [51.7, 18123.0], [51.8, 18512.0], [51.9, 18630.0], [52.0, 19004.0], [52.1, 19766.0], [52.2, 20599.0], [52.3, 20946.0], [52.4, 21479.0], [52.5, 22961.0], [52.6, 24417.0], [52.7, 25045.0], [52.8, 25480.0], [52.9, 26082.0], [53.0, 26688.0], [53.1, 27043.0], [53.2, 28140.0], [53.3, 28670.0], [53.4, 29016.0], [53.5, 29389.0], [53.6, 29567.0], [53.7, 29851.0], [53.8, 30066.0], [53.9, 30095.0], [54.0, 30182.0], [54.1, 30226.0], [54.2, 30250.0], [54.3, 30291.0], [54.4, 30313.0], [54.5, 30345.0], [54.6, 30426.0], [54.7, 30445.0], [54.8, 30467.0], [54.9, 30479.0], [55.0, 30545.0], [55.1, 30575.0], [55.2, 30590.0], [55.3, 30615.0], [55.4, 30715.0], [55.5, 30744.0], [55.6, 30767.0], [55.7, 30821.0], [55.8, 30838.0], [55.9, 30884.0], [56.0, 30924.0], [56.1, 30996.0], [56.2, 31039.0], [56.3, 31063.0], [56.4, 31109.0], [56.5, 31144.0], [56.6, 31214.0], [56.7, 31264.0], [56.8, 31321.0], [56.9, 31349.0], [57.0, 31369.0], [57.1, 31453.0], [57.2, 31485.0], [57.3, 31502.0], [57.4, 31520.0], [57.5, 31562.0], [57.6, 31576.0], [57.7, 31611.0], [57.8, 31656.0], [57.9, 31698.0], [58.0, 31736.0], [58.1, 31778.0], [58.2, 31796.0], [58.3, 31852.0], [58.4, 31879.0], [58.5, 31910.0], [58.6, 31978.0], [58.7, 31995.0], [58.8, 32056.0], [58.9, 32113.0], [59.0, 32157.0], [59.1, 32177.0], [59.2, 32219.0], [59.3, 32245.0], [59.4, 32266.0], [59.5, 32347.0], [59.6, 32397.0], [59.7, 32445.0], [59.8, 32488.0], [59.9, 32496.0], [60.0, 32503.0], [60.1, 32514.0], [60.2, 32579.0], [60.3, 32600.0], [60.4, 32614.0], [60.5, 32670.0], [60.6, 32701.0], [60.7, 32733.0], [60.8, 32751.0], [60.9, 32803.0], [61.0, 32876.0], [61.1, 32926.0], [61.2, 32952.0], [61.3, 32979.0], [61.4, 33002.0], [61.5, 33015.0], [61.6, 33077.0], [61.7, 33154.0], [61.8, 33216.0], [61.9, 33224.0], [62.0, 33239.0], [62.1, 33246.0], [62.2, 33266.0], [62.3, 33277.0], [62.4, 33300.0], [62.5, 33330.0], [62.6, 33407.0], [62.7, 33487.0], [62.8, 33496.0], [62.9, 33520.0], [63.0, 33534.0], [63.1, 33567.0], [63.2, 33640.0], [63.3, 33679.0], [63.4, 33711.0], [63.5, 33728.0], [63.6, 33749.0], [63.7, 33764.0], [63.8, 33800.0], [63.9, 33819.0], [64.0, 33936.0], [64.1, 33965.0], [64.2, 33968.0], [64.3, 33976.0], [64.4, 33980.0], [64.5, 33998.0], [64.6, 34007.0], [64.7, 34026.0], [64.8, 34061.0], [64.9, 34116.0], [65.0, 34158.0], [65.1, 34198.0], [65.2, 34221.0], [65.3, 34231.0], [65.4, 34242.0], [65.5, 34288.0], [65.6, 34298.0], [65.7, 34387.0], [65.8, 34425.0], [65.9, 34466.0], [66.0, 34478.0], [66.1, 34492.0], [66.2, 34511.0], [66.3, 34528.0], [66.4, 34593.0], [66.5, 34648.0], [66.6, 34683.0], [66.7, 34692.0], [66.8, 34706.0], [66.9, 34721.0], [67.0, 34729.0], [67.1, 34736.0], [67.2, 34741.0], [67.3, 34746.0], [67.4, 34754.0], [67.5, 34794.0], [67.6, 34889.0], [67.7, 34933.0], [67.8, 34953.0], [67.9, 34963.0], [68.0, 34978.0], [68.1, 34984.0], [68.2, 34987.0], [68.3, 34993.0], [68.4, 35007.0], [68.5, 35014.0], [68.6, 35036.0], [68.7, 35091.0], [68.8, 35113.0], [68.9, 35154.0], [69.0, 35189.0], [69.1, 35205.0], [69.2, 35223.0], [69.3, 35238.0], [69.4, 35245.0], [69.5, 35252.0], [69.6, 35261.0], [69.7, 35286.0], [69.8, 35436.0], [69.9, 35454.0], [70.0, 35472.0], [70.1, 35480.0], [70.2, 35487.0], [70.3, 35496.0], [70.4, 35505.0], [70.5, 35514.0], [70.6, 35520.0], [70.7, 35557.0], [70.8, 35592.0], [70.9, 35667.0], [71.0, 35688.0], [71.1, 35711.0], [71.2, 35724.0], [71.3, 35727.0], [71.4, 35740.0], [71.5, 35745.0], [71.6, 35753.0], [71.7, 35761.0], [71.8, 35778.0], [71.9, 35803.0], [72.0, 35853.0], [72.1, 35908.0], [72.2, 35937.0], [72.3, 35959.0], [72.4, 35967.0], [72.5, 35971.0], [72.6, 35978.0], [72.7, 35983.0], [72.8, 35989.0], [72.9, 35992.0], [73.0, 36001.0], [73.1, 36031.0], [73.2, 36101.0], [73.3, 36154.0], [73.4, 36178.0], [73.5, 36189.0], [73.6, 36200.0], [73.7, 36221.0], [73.8, 36227.0], [73.9, 36234.0], [74.0, 36248.0], [74.1, 36253.0], [74.2, 36257.0], [74.3, 36276.0], [74.4, 36286.0], [74.5, 36314.0], [74.6, 36407.0], [74.7, 36433.0], [74.8, 36445.0], [74.9, 36461.0], [75.0, 36465.0], [75.1, 36474.0], [75.2, 36482.0], [75.3, 36487.0], [75.4, 36490.0], [75.5, 36494.0], [75.6, 36499.0], [75.7, 36506.0], [75.8, 36516.0], [75.9, 36529.0], [76.0, 36552.0], [76.1, 36652.0], [76.2, 36667.0], [76.3, 36689.0], [76.4, 36703.0], [76.5, 36705.0], [76.6, 36711.0], [76.7, 36718.0], [76.8, 36727.0], [76.9, 36730.0], [77.0, 36737.0], [77.1, 36749.0], [77.2, 36755.0], [77.3, 36764.0], [77.4, 36772.0], [77.5, 36801.0], [77.6, 36826.0], [77.7, 36880.0], [77.8, 36910.0], [77.9, 36928.0], [78.0, 36950.0], [78.1, 36956.0], [78.2, 36964.0], [78.3, 36971.0], [78.4, 36975.0], [78.5, 36980.0], [78.6, 36990.0], [78.7, 36993.0], [78.8, 36997.0], [78.9, 37003.0], [79.0, 37008.0], [79.1, 37023.0], [79.2, 37030.0], [79.3, 37057.0], [79.4, 37151.0], [79.5, 37177.0], [79.6, 37190.0], [79.7, 37200.0], [79.8, 37207.0], [79.9, 37221.0], [80.0, 37222.0], [80.1, 37229.0], [80.2, 37238.0], [80.3, 37243.0], [80.4, 37245.0], [80.5, 37250.0], [80.6, 37255.0], [80.7, 37261.0], [80.8, 37274.0], [80.9, 37296.0], [81.0, 37369.0], [81.1, 37439.0], [81.2, 37447.0], [81.3, 37449.0], [81.4, 37454.0], [81.5, 37466.0], [81.6, 37477.0], [81.7, 37483.0], [81.8, 37489.0], [81.9, 37500.0], [82.0, 37518.0], [82.1, 37527.0], [82.2, 37557.0], [82.3, 37595.0], [82.4, 37681.0], [82.5, 37703.0], [82.6, 37713.0], [82.7, 37727.0], [82.8, 37735.0], [82.9, 37744.0], [83.0, 37750.0], [83.1, 37770.0], [83.2, 37780.0], [83.3, 37867.0], [83.4, 37899.0], [83.5, 37917.0], [83.6, 37939.0], [83.7, 37956.0], [83.8, 37961.0], [83.9, 37971.0], [84.0, 37978.0], [84.1, 37986.0], [84.2, 37992.0], [84.3, 37995.0], [84.4, 38003.0], [84.5, 38013.0], [84.6, 38033.0], [84.7, 38062.0], [84.8, 38110.0], [84.9, 38146.0], [85.0, 38169.0], [85.1, 38188.0], [85.2, 38210.0], [85.3, 38222.0], [85.4, 38235.0], [85.5, 38242.0], [85.6, 38257.0], [85.7, 38260.0], [85.8, 38280.0], [85.9, 38413.0], [86.0, 38449.0], [86.1, 38453.0], [86.2, 38460.0], [86.3, 38464.0], [86.4, 38485.0], [86.5, 38491.0], [86.6, 38506.0], [86.7, 38512.0], [86.8, 38527.0], [86.9, 38538.0], [87.0, 38617.0], [87.1, 38688.0], [87.2, 38698.0], [87.3, 38713.0], [87.4, 38734.0], [87.5, 38738.0], [87.6, 38745.0], [87.7, 38758.0], [87.8, 38767.0], [87.9, 38784.0], [88.0, 38892.0], [88.1, 38947.0], [88.2, 38957.0], [88.3, 38973.0], [88.4, 38979.0], [88.5, 38983.0], [88.6, 38989.0], [88.7, 39001.0], [88.8, 39008.0], [88.9, 39017.0], [89.0, 39026.0], [89.1, 39054.0], [89.2, 39104.0], [89.3, 39189.0], [89.4, 39198.0], [89.5, 39218.0], [89.6, 39231.0], [89.7, 39239.0], [89.8, 39246.0], [89.9, 39253.0], [90.0, 39268.0], [90.1, 39309.0], [90.2, 39442.0], [90.3, 39455.0], [90.4, 39462.0], [90.5, 39472.0], [90.6, 39477.0], [90.7, 39488.0], [90.8, 39527.0], [90.9, 39692.0], [91.0, 39700.0], [91.1, 39715.0], [91.2, 39719.0], [91.3, 39731.0], [91.4, 39747.0], [91.5, 39763.0], [91.6, 39848.0], [91.7, 39961.0], [91.8, 39973.0], [91.9, 39984.0], [92.0, 39988.0], [92.1, 39992.0], [92.2, 39999.0], [92.3, 40008.0], [92.4, 40051.0], [92.5, 40155.0], [92.6, 40207.0], [92.7, 40219.0], [92.8, 40221.0], [92.9, 40234.0], [93.0, 40273.0], [93.1, 40362.0], [93.2, 40417.0], [93.3, 40444.0], [93.4, 40461.0], [93.5, 40480.0], [93.6, 40493.0], [93.7, 40504.0], [93.8, 40506.0], [93.9, 40670.0], [94.0, 40703.0], [94.1, 40725.0], [94.2, 40736.0], [94.3, 40745.0], [94.4, 40804.0], [94.5, 40943.0], [94.6, 40957.0], [94.7, 40961.0], [94.8, 40978.0], [94.9, 40987.0], [95.0, 41002.0], [95.1, 41012.0], [95.2, 41031.0], [95.3, 41198.0], [95.4, 41220.0], [95.5, 41238.0], [95.6, 41254.0], [95.7, 41374.0], [95.8, 41469.0], [95.9, 41477.0], [96.0, 41492.0], [96.1, 41519.0], [96.2, 41550.0], [96.3, 41675.0], [96.4, 41707.0], [96.5, 41724.0], [96.6, 41744.0], [96.7, 41760.0], [96.8, 41922.0], [96.9, 41958.0], [97.0, 41978.0], [97.1, 42039.0], [97.2, 42219.0], [97.3, 42234.0], [97.4, 42278.0], [97.5, 42450.0], [97.6, 42483.0], [97.7, 42514.0], [97.8, 42615.0], [97.9, 42747.0], [98.0, 42849.0], [98.1, 42970.0], [98.2, 43001.0], [98.3, 43188.0], [98.4, 43243.0], [98.5, 43249.0], [98.6, 43478.0], [98.7, 43701.0], [98.8, 43755.0], [98.9, 43984.0], [99.0, 44033.0], [99.1, 44441.0], [99.2, 44967.0], [99.3, 45749.0], [99.4, 46466.0], [99.5, 46978.0], [99.6, 47696.0], [99.7, 48942.0], [99.8, 50022.0], [99.9, 54732.0], [100.0, 74007.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[0.0, 8.0], [0.1, 8.0], [0.2, 8.0], [0.3, 9.0], [0.4, 9.0], [0.5, 9.0], [0.6, 9.0], [0.7, 9.0], [0.8, 9.0], [0.9, 9.0], [1.0, 9.0], [1.1, 9.0], [1.2, 9.0], [1.3, 9.0], [1.4, 9.0], [1.5, 9.0], [1.6, 9.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 10.0], [2.8, 10.0], [2.9, 10.0], [3.0, 10.0], [3.1, 10.0], [3.2, 10.0], [3.3, 10.0], [3.4, 10.0], [3.5, 10.0], [3.6, 10.0], [3.7, 10.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 10.0], [5.9, 10.0], [6.0, 10.0], [6.1, 10.0], [6.2, 10.0], [6.3, 10.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 10.0], [6.8, 10.0], [6.9, 10.0], [7.0, 10.0], [7.1, 10.0], [7.2, 10.0], [7.3, 10.0], [7.4, 10.0], [7.5, 10.0], [7.6, 10.0], [7.7, 11.0], [7.8, 11.0], [7.9, 11.0], [8.0, 11.0], [8.1, 11.0], [8.2, 11.0], [8.3, 11.0], [8.4, 11.0], [8.5, 11.0], [8.6, 11.0], [8.7, 11.0], [8.8, 11.0], [8.9, 11.0], [9.0, 11.0], [9.1, 11.0], [9.2, 11.0], [9.3, 11.0], [9.4, 11.0], [9.5, 11.0], [9.6, 11.0], [9.7, 11.0], [9.8, 11.0], [9.9, 11.0], [10.0, 11.0], [10.1, 11.0], [10.2, 11.0], [10.3, 11.0], [10.4, 11.0], [10.5, 11.0], [10.6, 11.0], [10.7, 11.0], [10.8, 11.0], [10.9, 11.0], [11.0, 11.0], [11.1, 11.0], [11.2, 11.0], [11.3, 11.0], [11.4, 11.0], [11.5, 11.0], [11.6, 11.0], [11.7, 11.0], [11.8, 11.0], [11.9, 11.0], [12.0, 11.0], [12.1, 11.0], [12.2, 11.0], [12.3, 11.0], [12.4, 11.0], [12.5, 11.0], [12.6, 11.0], [12.7, 11.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 11.0], [13.7, 11.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 11.0], [14.2, 11.0], [14.3, 11.0], [14.4, 11.0], [14.5, 11.0], [14.6, 11.0], [14.7, 11.0], [14.8, 11.0], [14.9, 11.0], [15.0, 11.0], [15.1, 11.0], [15.2, 11.0], [15.3, 11.0], [15.4, 11.0], [15.5, 11.0], [15.6, 11.0], [15.7, 11.0], [15.8, 11.0], [15.9, 11.0], [16.0, 11.0], [16.1, 11.0], [16.2, 11.0], [16.3, 11.0], [16.4, 11.0], [16.5, 11.0], [16.6, 11.0], [16.7, 11.0], [16.8, 11.0], [16.9, 11.0], [17.0, 11.0], [17.1, 11.0], [17.2, 11.0], [17.3, 12.0], [17.4, 12.0], [17.5, 12.0], [17.6, 12.0], [17.7, 12.0], [17.8, 12.0], [17.9, 12.0], [18.0, 12.0], [18.1, 12.0], [18.2, 12.0], [18.3, 12.0], [18.4, 12.0], [18.5, 12.0], [18.6, 12.0], [18.7, 12.0], [18.8, 12.0], [18.9, 12.0], [19.0, 12.0], [19.1, 12.0], [19.2, 12.0], [19.3, 12.0], [19.4, 12.0], [19.5, 12.0], [19.6, 12.0], [19.7, 12.0], [19.8, 12.0], [19.9, 12.0], [20.0, 12.0], [20.1, 12.0], [20.2, 12.0], [20.3, 12.0], [20.4, 12.0], [20.5, 12.0], [20.6, 12.0], [20.7, 12.0], [20.8, 12.0], [20.9, 12.0], [21.0, 12.0], [21.1, 12.0], [21.2, 12.0], [21.3, 12.0], [21.4, 12.0], [21.5, 12.0], [21.6, 12.0], [21.7, 12.0], [21.8, 12.0], [21.9, 12.0], [22.0, 12.0], [22.1, 12.0], [22.2, 12.0], [22.3, 12.0], [22.4, 12.0], [22.5, 12.0], [22.6, 12.0], [22.7, 12.0], [22.8, 12.0], [22.9, 12.0], [23.0, 12.0], [23.1, 12.0], [23.2, 12.0], [23.3, 12.0], [23.4, 12.0], [23.5, 12.0], [23.6, 12.0], [23.7, 12.0], [23.8, 12.0], [23.9, 12.0], [24.0, 12.0], [24.1, 12.0], [24.2, 12.0], [24.3, 12.0], [24.4, 12.0], [24.5, 12.0], [24.6, 12.0], [24.7, 12.0], [24.8, 12.0], [24.9, 12.0], [25.0, 12.0], [25.1, 12.0], [25.2, 12.0], [25.3, 12.0], [25.4, 12.0], [25.5, 12.0], [25.6, 12.0], [25.7, 12.0], [25.8, 12.0], [25.9, 12.0], [26.0, 12.0], [26.1, 12.0], [26.2, 12.0], [26.3, 12.0], [26.4, 12.0], [26.5, 12.0], [26.6, 12.0], [26.7, 12.0], [26.8, 12.0], [26.9, 12.0], [27.0, 12.0], [27.1, 12.0], [27.2, 12.0], [27.3, 12.0], [27.4, 12.0], [27.5, 12.0], [27.6, 12.0], [27.7, 12.0], [27.8, 12.0], [27.9, 12.0], [28.0, 12.0], [28.1, 12.0], [28.2, 12.0], [28.3, 12.0], [28.4, 12.0], [28.5, 12.0], [28.6, 13.0], [28.7, 13.0], [28.8, 13.0], [28.9, 13.0], [29.0, 13.0], [29.1, 13.0], [29.2, 13.0], [29.3, 13.0], [29.4, 13.0], [29.5, 13.0], [29.6, 13.0], [29.7, 13.0], [29.8, 13.0], [29.9, 13.0], [30.0, 13.0], [30.1, 13.0], [30.2, 13.0], [30.3, 13.0], [30.4, 13.0], [30.5, 13.0], [30.6, 13.0], [30.7, 13.0], [30.8, 13.0], [30.9, 13.0], [31.0, 13.0], [31.1, 13.0], [31.2, 13.0], [31.3, 13.0], [31.4, 13.0], [31.5, 13.0], [31.6, 13.0], [31.7, 13.0], [31.8, 13.0], [31.9, 13.0], [32.0, 13.0], [32.1, 13.0], [32.2, 13.0], [32.3, 13.0], [32.4, 13.0], [32.5, 13.0], [32.6, 13.0], [32.7, 13.0], [32.8, 13.0], [32.9, 13.0], [33.0, 13.0], [33.1, 13.0], [33.2, 13.0], [33.3, 13.0], [33.4, 13.0], [33.5, 13.0], [33.6, 13.0], [33.7, 13.0], [33.8, 13.0], [33.9, 13.0], [34.0, 13.0], [34.1, 13.0], [34.2, 13.0], [34.3, 13.0], [34.4, 13.0], [34.5, 13.0], [34.6, 13.0], [34.7, 13.0], [34.8, 13.0], [34.9, 13.0], [35.0, 13.0], [35.1, 13.0], [35.2, 13.0], [35.3, 13.0], [35.4, 13.0], [35.5, 13.0], [35.6, 13.0], [35.7, 13.0], [35.8, 13.0], [35.9, 13.0], [36.0, 13.0], [36.1, 13.0], [36.2, 13.0], [36.3, 13.0], [36.4, 13.0], [36.5, 13.0], [36.6, 13.0], [36.7, 13.0], [36.8, 13.0], [36.9, 13.0], [37.0, 13.0], [37.1, 13.0], [37.2, 13.0], [37.3, 13.0], [37.4, 13.0], [37.5, 13.0], [37.6, 13.0], [37.7, 13.0], [37.8, 13.0], [37.9, 13.0], [38.0, 13.0], [38.1, 13.0], [38.2, 13.0], [38.3, 13.0], [38.4, 13.0], [38.5, 13.0], [38.6, 13.0], [38.7, 13.0], [38.8, 13.0], [38.9, 14.0], [39.0, 14.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 14.0], [39.7, 14.0], [39.8, 14.0], [39.9, 14.0], [40.0, 14.0], [40.1, 14.0], [40.2, 14.0], [40.3, 14.0], [40.4, 14.0], [40.5, 14.0], [40.6, 14.0], [40.7, 14.0], [40.8, 14.0], [40.9, 14.0], [41.0, 14.0], [41.1, 14.0], [41.2, 14.0], [41.3, 14.0], [41.4, 14.0], [41.5, 14.0], [41.6, 14.0], [41.7, 14.0], [41.8, 14.0], [41.9, 14.0], [42.0, 14.0], [42.1, 14.0], [42.2, 14.0], [42.3, 14.0], [42.4, 14.0], [42.5, 14.0], [42.6, 14.0], [42.7, 14.0], [42.8, 14.0], [42.9, 14.0], [43.0, 14.0], [43.1, 14.0], [43.2, 14.0], [43.3, 14.0], [43.4, 14.0], [43.5, 14.0], [43.6, 14.0], [43.7, 14.0], [43.8, 14.0], [43.9, 14.0], [44.0, 14.0], [44.1, 14.0], [44.2, 14.0], [44.3, 14.0], [44.4, 14.0], [44.5, 14.0], [44.6, 14.0], [44.7, 14.0], [44.8, 14.0], [44.9, 14.0], [45.0, 14.0], [45.1, 14.0], [45.2, 14.0], [45.3, 14.0], [45.4, 14.0], [45.5, 14.0], [45.6, 14.0], [45.7, 14.0], [45.8, 14.0], [45.9, 14.0], [46.0, 14.0], [46.1, 14.0], [46.2, 14.0], [46.3, 14.0], [46.4, 14.0], [46.5, 14.0], [46.6, 14.0], [46.7, 14.0], [46.8, 14.0], [46.9, 14.0], [47.0, 14.0], [47.1, 14.0], [47.2, 14.0], [47.3, 14.0], [47.4, 14.0], [47.5, 14.0], [47.6, 14.0], [47.7, 14.0], [47.8, 14.0], [47.9, 14.0], [48.0, 15.0], [48.1, 15.0], [48.2, 15.0], [48.3, 15.0], [48.4, 15.0], [48.5, 15.0], [48.6, 15.0], [48.7, 15.0], [48.8, 15.0], [48.9, 15.0], [49.0, 15.0], [49.1, 15.0], [49.2, 15.0], [49.3, 15.0], [49.4, 15.0], [49.5, 15.0], [49.6, 15.0], [49.7, 15.0], [49.8, 15.0], [49.9, 15.0], [50.0, 15.0], [50.1, 15.0], [50.2, 15.0], [50.3, 15.0], [50.4, 15.0], [50.5, 15.0], [50.6, 15.0], [50.7, 15.0], [50.8, 15.0], [50.9, 15.0], [51.0, 15.0], [51.1, 15.0], [51.2, 15.0], [51.3, 15.0], [51.4, 15.0], [51.5, 15.0], [51.6, 15.0], [51.7, 15.0], [51.8, 15.0], [51.9, 15.0], [52.0, 15.0], [52.1, 15.0], [52.2, 15.0], [52.3, 15.0], [52.4, 15.0], [52.5, 15.0], [52.6, 15.0], [52.7, 15.0], [52.8, 15.0], [52.9, 15.0], [53.0, 15.0], [53.1, 15.0], [53.2, 15.0], [53.3, 15.0], [53.4, 15.0], [53.5, 15.0], [53.6, 15.0], [53.7, 15.0], [53.8, 15.0], [53.9, 15.0], [54.0, 16.0], [54.1, 16.0], [54.2, 16.0], [54.3, 16.0], [54.4, 16.0], [54.5, 16.0], [54.6, 16.0], [54.7, 16.0], [54.8, 16.0], [54.9, 16.0], [55.0, 16.0], [55.1, 16.0], [55.2, 16.0], [55.3, 16.0], [55.4, 16.0], [55.5, 16.0], [55.6, 16.0], [55.7, 16.0], [55.8, 16.0], [55.9, 16.0], [56.0, 16.0], [56.1, 16.0], [56.2, 16.0], [56.3, 16.0], [56.4, 16.0], [56.5, 16.0], [56.6, 16.0], [56.7, 16.0], [56.8, 16.0], [56.9, 16.0], [57.0, 16.0], [57.1, 16.0], [57.2, 16.0], [57.3, 16.0], [57.4, 16.0], [57.5, 16.0], [57.6, 16.0], [57.7, 16.0], [57.8, 16.0], [57.9, 16.0], [58.0, 16.0], [58.1, 16.0], [58.2, 17.0], [58.3, 17.0], [58.4, 17.0], [58.5, 17.0], [58.6, 17.0], [58.7, 17.0], [58.8, 17.0], [58.9, 17.0], [59.0, 17.0], [59.1, 17.0], [59.2, 17.0], [59.3, 17.0], [59.4, 17.0], [59.5, 17.0], [59.6, 17.0], [59.7, 17.0], [59.8, 17.0], [59.9, 17.0], [60.0, 17.0], [60.1, 17.0], [60.2, 17.0], [60.3, 17.0], [60.4, 17.0], [60.5, 17.0], [60.6, 17.0], [60.7, 17.0], [60.8, 17.0], [60.9, 17.0], [61.0, 17.0], [61.1, 17.0], [61.2, 18.0], [61.3, 18.0], [61.4, 18.0], [61.5, 18.0], [61.6, 18.0], [61.7, 18.0], [61.8, 18.0], [61.9, 18.0], [62.0, 18.0], [62.1, 18.0], [62.2, 18.0], [62.3, 18.0], [62.4, 18.0], [62.5, 18.0], [62.6, 18.0], [62.7, 19.0], [62.8, 19.0], [62.9, 19.0], [63.0, 19.0], [63.1, 19.0], [63.2, 19.0], [63.3, 19.0], [63.4, 19.0], [63.5, 19.0], [63.6, 19.0], [63.7, 19.0], [63.8, 19.0], [63.9, 19.0], [64.0, 19.0], [64.1, 19.0], [64.2, 20.0], [64.3, 20.0], [64.4, 20.0], [64.5, 20.0], [64.6, 20.0], [64.7, 20.0], [64.8, 20.0], [64.9, 20.0], [65.0, 20.0], [65.1, 20.0], [65.2, 20.0], [65.3, 21.0], [65.4, 21.0], [65.5, 21.0], [65.6, 21.0], [65.7, 21.0], [65.8, 21.0], [65.9, 21.0], [66.0, 21.0], [66.1, 21.0], [66.2, 22.0], [66.3, 22.0], [66.4, 22.0], [66.5, 22.0], [66.6, 22.0], [66.7, 22.0], [66.8, 23.0], [66.9, 23.0], [67.0, 23.0], [67.1, 23.0], [67.2, 23.0], [67.3, 23.0], [67.4, 23.0], [67.5, 23.0], [67.6, 24.0], [67.7, 24.0], [67.8, 24.0], [67.9, 24.0], [68.0, 24.0], [68.1, 25.0], [68.2, 25.0], [68.3, 25.0], [68.4, 25.0], [68.5, 25.0], [68.6, 26.0], [68.7, 26.0], [68.8, 26.0], [68.9, 26.0], [69.0, 26.0], [69.1, 27.0], [69.2, 27.0], [69.3, 27.0], [69.4, 27.0], [69.5, 27.0], [69.6, 28.0], [69.7, 28.0], [69.8, 28.0], [69.9, 28.0], [70.0, 28.0], [70.1, 29.0], [70.2, 29.0], [70.3, 29.0], [70.4, 29.0], [70.5, 30.0], [70.6, 30.0], [70.7, 31.0], [70.8, 31.0], [70.9, 31.0], [71.0, 31.0], [71.1, 32.0], [71.2, 32.0], [71.3, 33.0], [71.4, 33.0], [71.5, 34.0], [71.6, 34.0], [71.7, 35.0], [71.8, 36.0], [71.9, 37.0], [72.0, 38.0], [72.1, 39.0], [72.2, 40.0], [72.3, 41.0], [72.4, 42.0], [72.5, 43.0], [72.6, 44.0], [72.7, 46.0], [72.8, 47.0], [72.9, 47.0], [73.0, 48.0], [73.1, 49.0], [73.2, 50.0], [73.3, 53.0], [73.4, 62.0], [73.5, 79.0], [73.6, 108.0], [73.7, 251.0], [73.8, 323.0], [73.9, 460.0], [74.0, 579.0], [74.1, 719.0], [74.2, 1076.0], [74.3, 1176.0], [74.4, 1453.0], [74.5, 1786.0], [74.6, 2251.0], [74.7, 2909.0], [74.8, 3712.0], [74.9, 4458.0], [75.0, 6972.0], [75.1, 7390.0], [75.2, 8527.0], [75.3, 9753.0], [75.4, 9995.0], [75.5, 10359.0], [75.6, 10940.0], [75.7, 11694.0], [75.8, 12426.0], [75.9, 12622.0], [76.0, 13278.0], [76.1, 13731.0], [76.2, 14086.0], [76.3, 14154.0], [76.4, 14609.0], [76.5, 15451.0], [76.6, 16351.0], [76.7, 16811.0], [76.8, 17071.0], [76.9, 17384.0], [77.0, 17991.0], [77.1, 18456.0], [77.2, 19735.0], [77.3, 20178.0], [77.4, 21041.0], [77.5, 21831.0], [77.6, 22502.0], [77.7, 22935.0], [77.8, 23830.0], [77.9, 24243.0], [78.0, 24534.0], [78.1, 24689.0], [78.2, 25189.0], [78.3, 25360.0], [78.4, 25486.0], [78.5, 25681.0], [78.6, 25749.0], [78.7, 25826.0], [78.8, 25883.0], [78.9, 25975.0], [79.0, 26052.0], [79.1, 26079.0], [79.2, 26109.0], [79.3, 26142.0], [79.4, 26175.0], [79.5, 26232.0], [79.6, 26286.0], [79.7, 26310.0], [79.8, 26425.0], [79.9, 26459.0], [80.0, 26491.0], [80.1, 26517.0], [80.2, 26527.0], [80.3, 26564.0], [80.4, 26638.0], [80.5, 26695.0], [80.6, 26745.0], [80.7, 26767.0], [80.8, 26836.0], [80.9, 26854.0], [81.0, 26887.0], [81.1, 26938.0], [81.2, 26961.0], [81.3, 26977.0], [81.4, 26993.0], [81.5, 27037.0], [81.6, 27058.0], [81.7, 27121.0], [81.8, 27151.0], [81.9, 27192.0], [82.0, 27224.0], [82.1, 27256.0], [82.2, 27269.0], [82.3, 27279.0], [82.4, 27293.0], [82.5, 27336.0], [82.6, 27375.0], [82.7, 27399.0], [82.8, 27428.0], [82.9, 27447.0], [83.0, 27467.0], [83.1, 27484.0], [83.2, 27493.0], [83.3, 27516.0], [83.4, 27522.0], [83.5, 27531.0], [83.6, 27538.0], [83.7, 27547.0], [83.8, 27572.0], [83.9, 27595.0], [84.0, 27608.0], [84.1, 27642.0], [84.2, 27657.0], [84.3, 27693.0], [84.4, 27711.0], [84.5, 27741.0], [84.6, 27750.0], [84.7, 27757.0], [84.8, 27777.0], [84.9, 27785.0], [85.0, 27792.0], [85.1, 27832.0], [85.2, 27856.0], [85.3, 27876.0], [85.4, 27883.0], [85.5, 27897.0], [85.6, 27908.0], [85.7, 27919.0], [85.8, 27940.0], [85.9, 27949.0], [86.0, 27965.0], [86.1, 27974.0], [86.2, 27985.0], [86.3, 27997.0], [86.4, 28008.0], [86.5, 28018.0], [86.6, 28026.0], [86.7, 28034.0], [86.8, 28043.0], [86.9, 28048.0], [87.0, 28085.0], [87.1, 28098.0], [87.2, 28111.0], [87.3, 28120.0], [87.4, 28136.0], [87.5, 28144.0], [87.6, 28162.0], [87.7, 28180.0], [87.8, 28192.0], [87.9, 28212.0], [88.0, 28223.0], [88.1, 28231.0], [88.2, 28241.0], [88.3, 28246.0], [88.4, 28253.0], [88.5, 28258.0], [88.6, 28266.0], [88.7, 28269.0], [88.8, 28278.0], [88.9, 28290.0], [89.0, 28301.0], [89.1, 28305.0], [89.2, 28320.0], [89.3, 28334.0], [89.4, 28347.0], [89.5, 28368.0], [89.6, 28388.0], [89.7, 28397.0], [89.8, 28408.0], [89.9, 28435.0], [90.0, 28442.0], [90.1, 28455.0], [90.2, 28462.0], [90.3, 28473.0], [90.4, 28487.0], [90.5, 28499.0], [90.6, 28512.0], [90.7, 28515.0], [90.8, 28523.0], [90.9, 28538.0], [91.0, 28553.0], [91.1, 28566.0], [91.2, 28575.0], [91.3, 28600.0], [91.4, 28611.0], [91.5, 28628.0], [91.6, 28639.0], [91.7, 28651.0], [91.8, 28675.0], [91.9, 28690.0], [92.0, 28699.0], [92.1, 28719.0], [92.2, 28731.0], [92.3, 28736.0], [92.4, 28748.0], [92.5, 28758.0], [92.6, 28766.0], [92.7, 28793.0], [92.8, 28798.0], [92.9, 28805.0], [93.0, 28816.0], [93.1, 28823.0], [93.2, 28848.0], [93.3, 28856.0], [93.4, 28873.0], [93.5, 28887.0], [93.6, 28908.0], [93.7, 28922.0], [93.8, 28938.0], [93.9, 28947.0], [94.0, 28954.0], [94.1, 28964.0], [94.2, 28972.0], [94.3, 28983.0], [94.4, 28985.0], [94.5, 29003.0], [94.6, 29015.0], [94.7, 29027.0], [94.8, 29042.0], [94.9, 29062.0], [95.0, 29072.0], [95.1, 29088.0], [95.2, 29102.0], [95.3, 29137.0], [95.4, 29152.0], [95.5, 29172.0], [95.6, 29185.0], [95.7, 29197.0], [95.8, 29221.0], [95.9, 29233.0], [96.0, 29249.0], [96.1, 29263.0], [96.2, 29281.0], [96.3, 29288.0], [96.4, 29304.0], [96.5, 29316.0], [96.6, 29322.0], [96.7, 29359.0], [96.8, 29403.0], [96.9, 29437.0], [97.0, 29462.0], [97.1, 29495.0], [97.2, 29501.0], [97.3, 29511.0], [97.4, 29523.0], [97.5, 29551.0], [97.6, 29600.0], [97.7, 29613.0], [97.8, 29641.0], [97.9, 29705.0], [98.0, 29720.0], [98.1, 29741.0], [98.2, 29753.0], [98.3, 29766.0], [98.4, 29790.0], [98.5, 29809.0], [98.6, 29856.0], [98.7, 29888.0], [98.8, 29954.0], [98.9, 29971.0], [99.0, 29979.0], [99.1, 29985.0], [99.2, 29993.0], [99.3, 29998.0], [99.4, 30003.0], [99.5, 30004.0], [99.6, 30004.0], [99.7, 30004.0], [99.8, 30005.0], [99.9, 30005.0], [100.0, 30009.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3062.0, "series": [{"data": [[0.0, 15.0], [100.0, 18.0], [34100.0, 12.0], [33300.0, 8.0], [34500.0, 11.0], [32900.0, 15.0], [33700.0, 17.0], [34900.0, 30.0], [36100.0, 17.0], [35700.0, 37.0], [36500.0, 16.0], [35300.0, 1.0], [38100.0, 17.0], [37300.0, 6.0], [38900.0, 28.0], [38500.0, 17.0], [36900.0, 44.0], [37700.0, 32.0], [40100.0, 5.0], [40500.0, 10.0], [40900.0, 23.0], [39300.0, 3.0], [39700.0, 24.0], [41300.0, 3.0], [42100.0, 3.0], [42500.0, 5.0], [42900.0, 7.0], [41700.0, 17.0], [44900.0, 3.0], [43700.0, 6.0], [43300.0, 1.0], [44500.0, 1.0], [44100.0, 1.0], [45700.0, 1.0], [46900.0, 3.0], [48900.0, 3.0], [200.0, 1.0], [52500.0, 1.0], [300.0, 4.0], [400.0, 211.0], [500.0, 662.0], [600.0, 467.0], [700.0, 270.0], [800.0, 156.0], [900.0, 80.0], [1000.0, 43.0], [1100.0, 29.0], [1200.0, 15.0], [1300.0, 10.0], [1400.0, 7.0], [1500.0, 3.0], [1600.0, 3.0], [1700.0, 2.0], [1800.0, 9.0], [1900.0, 5.0], [2000.0, 5.0], [2100.0, 5.0], [2300.0, 4.0], [2200.0, 4.0], [2400.0, 4.0], [2500.0, 3.0], [2600.0, 6.0], [2800.0, 2.0], [2900.0, 3.0], [3000.0, 3.0], [3100.0, 4.0], [3200.0, 1.0], [3400.0, 2.0], [3600.0, 1.0], [3900.0, 1.0], [4000.0, 2.0], [4200.0, 1.0], [4500.0, 2.0], [5300.0, 1.0], [5500.0, 1.0], [5800.0, 1.0], [6500.0, 1.0], [7800.0, 1.0], [8100.0, 1.0], [8000.0, 1.0], [8500.0, 1.0], [8200.0, 1.0], [8400.0, 1.0], [8300.0, 1.0], [9100.0, 2.0], [9700.0, 1.0], [9500.0, 1.0], [9300.0, 2.0], [9400.0, 1.0], [9600.0, 2.0], [10100.0, 2.0], [9800.0, 1.0], [10000.0, 1.0], [10500.0, 1.0], [10400.0, 2.0], [10600.0, 1.0], [11200.0, 1.0], [10900.0, 1.0], [11100.0, 1.0], [10800.0, 1.0], [11500.0, 1.0], [11600.0, 1.0], [12000.0, 2.0], [11800.0, 1.0], [11900.0, 1.0], [12500.0, 2.0], [13200.0, 2.0], [12900.0, 2.0], [13100.0, 1.0], [13400.0, 1.0], [13700.0, 1.0], [13500.0, 1.0], [14800.0, 1.0], [14600.0, 1.0], [14700.0, 2.0], [14500.0, 1.0], [14900.0, 1.0], [15200.0, 1.0], [15000.0, 2.0], [15700.0, 1.0], [15800.0, 1.0], [15500.0, 1.0], [15600.0, 1.0], [16200.0, 2.0], [15900.0, 1.0], [16300.0, 1.0], [16600.0, 1.0], [16400.0, 1.0], [17200.0, 2.0], [17000.0, 1.0], [18200.0, 2.0], [18000.0, 1.0], [18600.0, 5.0], [19000.0, 1.0], [20000.0, 1.0], [20400.0, 1.0], [20800.0, 1.0], [20600.0, 1.0], [21400.0, 1.0], [22200.0, 1.0], [22800.0, 1.0], [24400.0, 1.0], [24200.0, 1.0], [24800.0, 2.0], [24600.0, 1.0], [25000.0, 1.0], [25400.0, 2.0], [26000.0, 2.0], [26600.0, 2.0], [25800.0, 1.0], [25600.0, 1.0], [26800.0, 1.0], [27000.0, 2.0], [28400.0, 1.0], [28600.0, 1.0], [28200.0, 1.0], [29200.0, 1.0], [28800.0, 1.0], [29400.0, 4.0], [29000.0, 2.0], [29600.0, 1.0], [30200.0, 14.0], [30400.0, 15.0], [30600.0, 7.0], [29800.0, 2.0], [30000.0, 5.0], [30800.0, 11.0], [31600.0, 12.0], [31400.0, 8.0], [31000.0, 12.0], [31200.0, 9.0], [32600.0, 12.0], [32000.0, 7.0], [32200.0, 11.0], [31800.0, 10.0], [32400.0, 14.0], [33600.0, 10.0], [34000.0, 14.0], [33200.0, 27.0], [32800.0, 6.0], [34800.0, 3.0], [34400.0, 16.0], [36400.0, 44.0], [36800.0, 12.0], [35600.0, 8.0], [35200.0, 28.0], [36000.0, 8.0], [38400.0, 31.0], [37200.0, 52.0], [38800.0, 4.0], [37600.0, 8.0], [38000.0, 17.0], [40400.0, 22.0], [40000.0, 10.0], [39200.0, 28.0], [39600.0, 6.0], [40800.0, 1.0], [41600.0, 6.0], [42400.0, 8.0], [41200.0, 12.0], [42800.0, 1.0], [42000.0, 2.0], [43200.0, 11.0], [44000.0, 3.0], [44400.0, 2.0], [46400.0, 1.0], [45600.0, 1.0], [47200.0, 1.0], [47600.0, 1.0], [50000.0, 1.0], [51200.0, 1.0], [55200.0, 1.0], [56400.0, 1.0], [33900.0, 23.0], [33500.0, 12.0], [33100.0, 5.0], [34700.0, 32.0], [34300.0, 6.0], [35900.0, 38.0], [36700.0, 46.0], [35100.0, 13.0], [35500.0, 20.0], [36300.0, 3.0], [37100.0, 14.0], [37500.0, 17.0], [37900.0, 39.0], [38700.0, 29.0], [38300.0, 1.0], [39900.0, 23.0], [39100.0, 9.0], [40700.0, 18.0], [40300.0, 4.0], [39500.0, 6.0], [42300.0, 2.0], [41100.0, 3.0], [41900.0, 11.0], [42700.0, 7.0], [41500.0, 7.0], [43900.0, 4.0], [43100.0, 3.0], [44300.0, 1.0], [45900.0, 1.0], [46700.0, 2.0], [47100.0, 1.0], [48700.0, 1.0], [54700.0, 1.0], [17300.0, 1.0], [16900.0, 1.0], [16700.0, 1.0], [16500.0, 1.0], [18100.0, 1.0], [17900.0, 2.0], [18300.0, 1.0], [17700.0, 1.0], [19100.0, 1.0], [19300.0, 2.0], [18500.0, 2.0], [18700.0, 1.0], [19900.0, 1.0], [19700.0, 2.0], [20900.0, 2.0], [20500.0, 1.0], [21300.0, 2.0], [21100.0, 1.0], [22500.0, 1.0], [22900.0, 1.0], [23300.0, 1.0], [24100.0, 1.0], [25100.0, 1.0], [25500.0, 1.0], [25300.0, 1.0], [26500.0, 1.0], [26100.0, 1.0], [26900.0, 2.0], [27300.0, 1.0], [27700.0, 1.0], [28100.0, 1.0], [28500.0, 1.0], [28900.0, 2.0], [29300.0, 2.0], [29500.0, 1.0], [30500.0, 12.0], [30300.0, 9.0], [30100.0, 4.0], [30700.0, 12.0], [29900.0, 3.0], [29700.0, 1.0], [31500.0, 15.0], [31300.0, 13.0], [31700.0, 12.0], [31100.0, 6.0], [30900.0, 7.0], [32700.0, 13.0], [32100.0, 11.0], [32500.0, 14.0], [31900.0, 11.0], [32300.0, 8.0], [34200.0, 20.0], [34600.0, 14.0], [33000.0, 9.0], [33800.0, 8.0], [33400.0, 10.0], [35800.0, 7.0], [35000.0, 18.0], [35400.0, 23.0], [36600.0, 16.0], [36200.0, 37.0], [37800.0, 6.0], [38600.0, 9.0], [37400.0, 33.0], [38200.0, 26.0], [37000.0, 21.0], [39800.0, 3.0], [40200.0, 19.0], [39000.0, 21.0], [39400.0, 23.0], [40600.0, 3.0], [41000.0, 12.0], [43000.0, 2.0], [42200.0, 10.0], [41400.0, 14.0], [42600.0, 2.0], [41800.0, 1.0], [43400.0, 4.0], [45000.0, 1.0], [44200.0, 1.0], [45800.0, 1.0], [46200.0, 1.0], [45400.0, 1.0], [48200.0, 1.0], [49000.0, 1.0], [50200.0, 1.0], [49400.0, 1.0], [65000.0, 1.0], [74000.0, 1.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[0.0, 3062.0], [100.0, 3.0], [200.0, 5.0], [300.0, 2.0], [400.0, 7.0], [500.0, 1.0], [600.0, 1.0], [700.0, 3.0], [900.0, 2.0], [1000.0, 2.0], [1100.0, 4.0], [1200.0, 1.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 1.0], [1600.0, 1.0], [1700.0, 1.0], [1900.0, 1.0], [2000.0, 1.0], [2300.0, 1.0], [2200.0, 3.0], [2400.0, 2.0], [2900.0, 1.0], [3000.0, 1.0], [3300.0, 1.0], [3400.0, 1.0], [3700.0, 1.0], [3800.0, 1.0], [4200.0, 1.0], [4400.0, 2.0], [6200.0, 1.0], [6600.0, 1.0], [6400.0, 1.0], [6900.0, 1.0], [7000.0, 1.0], [7400.0, 2.0], [7200.0, 2.0], [7300.0, 1.0], [8100.0, 2.0], [8600.0, 1.0], [8500.0, 1.0], [9200.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [9800.0, 1.0], [9900.0, 3.0], [10200.0, 1.0], [10600.0, 2.0], [10300.0, 3.0], [10700.0, 1.0], [10900.0, 1.0], [11100.0, 1.0], [11000.0, 1.0], [11300.0, 1.0], [11600.0, 1.0], [11700.0, 1.0], [12000.0, 1.0], [11900.0, 1.0], [12100.0, 1.0], [12400.0, 4.0], [12600.0, 1.0], [12700.0, 1.0], [13200.0, 1.0], [12900.0, 2.0], [13600.0, 1.0], [13400.0, 2.0], [13700.0, 1.0], [14100.0, 3.0], [14000.0, 4.0], [13900.0, 1.0], [14600.0, 2.0], [14400.0, 2.0], [14500.0, 1.0], [15200.0, 1.0], [14900.0, 1.0], [15600.0, 1.0], [15400.0, 2.0], [16300.0, 2.0], [16000.0, 1.0], [17400.0, 1.0], [17200.0, 1.0], [17000.0, 3.0], [17100.0, 1.0], [16700.0, 1.0], [16800.0, 1.0], [16900.0, 1.0], [16400.0, 1.0], [17300.0, 2.0], [16600.0, 1.0], [17600.0, 2.0], [17900.0, 1.0], [18000.0, 1.0], [18100.0, 1.0], [18400.0, 1.0], [18200.0, 2.0], [18900.0, 1.0], [18800.0, 1.0], [19000.0, 1.0], [19700.0, 1.0], [19800.0, 1.0], [19900.0, 1.0], [20100.0, 2.0], [20200.0, 1.0], [20800.0, 1.0], [21000.0, 1.0], [20700.0, 1.0], [21300.0, 1.0], [21700.0, 1.0], [22500.0, 2.0], [22400.0, 1.0], [22000.0, 1.0], [21800.0, 2.0], [22300.0, 1.0], [22700.0, 2.0], [22900.0, 1.0], [23000.0, 1.0], [22600.0, 1.0], [23400.0, 1.0], [24300.0, 1.0], [24000.0, 1.0], [23900.0, 1.0], [24200.0, 3.0], [23600.0, 1.0], [24100.0, 1.0], [23800.0, 1.0], [24500.0, 1.0], [24600.0, 4.0], [25400.0, 3.0], [25500.0, 2.0], [25000.0, 2.0], [25300.0, 4.0], [25200.0, 2.0], [24800.0, 1.0], [25100.0, 1.0], [25800.0, 7.0], [26000.0, 8.0], [25900.0, 5.0], [26300.0, 4.0], [26600.0, 9.0], [26100.0, 13.0], [26500.0, 12.0], [26200.0, 9.0], [25700.0, 5.0], [25600.0, 3.0], [26400.0, 11.0], [26800.0, 12.0], [27600.0, 16.0], [27400.0, 22.0], [27200.0, 20.0], [27000.0, 11.0], [27500.0, 29.0], [27300.0, 13.0], [26900.0, 15.0], [27100.0, 10.0], [26700.0, 10.0], [27900.0, 32.0], [28600.0, 31.0], [28200.0, 48.0], [28100.0, 30.0], [27700.0, 28.0], [28400.0, 34.0], [28300.0, 30.0], [28500.0, 31.0], [27800.0, 22.0], [28000.0, 34.0], [28900.0, 38.0], [28800.0, 31.0], [28700.0, 33.0], [29600.0, 12.0], [29300.0, 16.0], [29100.0, 23.0], [29200.0, 27.0], [29400.0, 17.0], [29000.0, 29.0], [29500.0, 18.0], [30000.0, 28.0], [29800.0, 10.0], [29900.0, 25.0], [29700.0, 25.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 74000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1344.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3302.0, "series": [{"data": [[0.0, 3302.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1747.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1344.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1910.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.056047197640119, "minX": 1.70032488E12, "maxY": 120.0, "series": [{"data": [[1.70032524E12, 120.0], [1.70032494E12, 52.87400000000002], [1.70032488E12, 13.056047197640119], [1.70032584E12, 22.5], [1.70032554E12, 120.0], [1.70032548E12, 120.0], [1.70032518E12, 120.0], [1.70032512E12, 120.0], [1.70032578E12, 110.80967741935481], [1.70032572E12, 120.0], [1.70032542E12, 120.0], [1.70032536E12, 120.0], [1.70032506E12, 120.0], [1.700325E12, 109.56052631578943], [1.70032566E12, 120.0], [1.7003256E12, 120.0], [1.7003253E12, 120.0]], "isOverall": false, "label": "OnlineConversion", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70032584E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.0, "maxY": 50022.0, "series": [{"data": [[2.0, 12914.333333333334], [3.0, 8181.8], [4.0, 6497.333333333333], [5.0, 5933.5714285714275], [6.0, 6004.0], [7.0, 4405.777777777777], [8.0, 3404.5714285714284], [9.0, 5020.0], [10.0, 5926.714285714286], [11.0, 4142.545454545454], [12.0, 4368.8], [13.0, 5042.900000000001], [14.0, 4367.0], [15.0, 5916.571428571428], [16.0, 4759.181818181818], [17.0, 7856.833333333333], [18.0, 9388.6], [19.0, 6371.888888888889], [20.0, 5586.8], [21.0, 4960.6], [22.0, 5727.9], [23.0, 7686.333333333333], [24.0, 11231.5], [25.0, 14829.333333333334], [26.0, 9052.75], [27.0, 7638.428571428571], [28.0, 10555.5], [29.0, 9629.6], [30.0, 14828.0], [31.0, 16219.0], [32.0, 2588.6], [33.0, 6207.555555555556], [34.0, 2961.625], [35.0, 4763.888888888889], [36.0, 3036.0], [37.0, 8504.285714285714], [38.0, 11992.75], [39.0, 10367.8], [40.0, 12249.0], [41.0, 11435.5], [42.0, 12379.0], [43.0, 13502.666666666666], [44.0, 9734.666666666668], [45.0, 11803.166666666666], [46.0, 19299.0], [47.0, 16244.0], [48.0, 11747.75], [49.0, 613.5], [50.0, 13903.5], [51.0, 11478.42857142857], [52.0, 13325.75], [53.0, 7408.5], [54.0, 23997.75], [55.0, 10478.142857142859], [56.0, 9333.5], [57.0, 17870.5], [58.0, 17392.333333333336], [59.0, 16939.5], [60.0, 19182.0], [61.0, 13723.285714285714], [62.0, 12441.833333333334], [63.0, 8423.181818181818], [64.0, 14582.5], [65.0, 10843.333333333332], [66.0, 8311.142857142857], [67.0, 10887.625], [68.0, 17169.25], [70.0, 16167.142857142859], [71.0, 23798.333333333332], [69.0, 36491.0], [72.0, 11537.2], [73.0, 26004.0], [74.0, 685.0], [75.0, 34688.0], [76.0, 13100.0], [77.0, 17891.666666666664], [78.0, 9712.75], [79.0, 19103.25], [81.0, 12265.8], [82.0, 17040.714285714286], [83.0, 5505.375], [84.0, 29028.5], [85.0, 12383.142857142859], [86.0, 14901.75], [88.0, 21742.25], [89.0, 18162.5], [90.0, 19919.333333333336], [91.0, 21968.4], [92.0, 7970.6], [93.0, 29892.5], [94.0, 18500.333333333336], [95.0, 27984.666666666668], [97.0, 22121.5], [98.0, 22848.333333333336], [99.0, 23039.333333333336], [96.0, 39234.0], [100.0, 18214.142857142855], [102.0, 28537.4], [103.0, 16687.0], [101.0, 39231.0], [104.0, 26483.5], [105.0, 14762.0], [106.0, 29457.0], [107.0, 21784.428571428572], [108.0, 8916.333333333334], [109.0, 22905.5], [111.0, 20804.333333333332], [110.0, 38949.0], [113.0, 31154.6], [114.0, 12533.666666666666], [115.0, 39706.0], [112.0, 37221.0], [117.0, 16666.5], [118.0, 655.5], [119.0, 30684.0], [116.0, 37735.0], [120.0, 19163.047793084097], [1.0, 50022.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[110.14534041525835, 18104.225012071398]], "isOverall": false, "label": "Cargar Tareas-Aggregated", "isController": false}, {"data": [[2.0, 27.333333333333332], [3.0, 18.2], [4.0, 20.333333333333332], [5.0, 20.142857142857142], [6.0, 16.999999999999996], [7.0, 24.666666666666668], [8.0, 18.57142857142857], [9.0, 15.714285714285714], [10.0, 149.42857142857144], [11.0, 78.5], [12.0, 120.18181818181822], [13.0, 15.5], [14.0, 259.6666666666667], [15.0, 304.8], [16.0, 646.6250000000001], [17.0, 16.0], [18.0, 14.0], [19.0, 895.1666666666667], [20.0, 582.5555555555555], [21.0, 337.22222222222223], [22.0, 561.75], [23.0, 856.7142857142858], [24.0, 14.5], [25.0, 2575.4444444444443], [26.0, 25.0], [27.0, 651.7142857142858], [28.0, 13.0], [29.0, 13.333333333333334], [30.0, 14.0], [31.0, 17.8], [32.0, 7000.0], [33.0, 3882.5454545454545], [34.0, 4168.428571428572], [35.0, 4163.25], [36.0, 6213.833333333333], [37.0, 16.666666666666668], [38.0, 1215.333333333333], [39.0, 2069.285714285714], [40.0, 2472.666666666667], [41.0, 3272.4], [42.0, 4299.0], [43.0, 17.0], [44.0, 3754.0], [45.0, 1982.6], [46.0, 5005.0], [47.0, 7783.0], [48.0, 13.25], [49.0, 9929.0], [50.0, 9931.0], [51.0, 5194.25], [52.0, 3390.166666666667], [53.0, 3592.6666666666665], [54.0, 15.5], [55.0, 6995.625], [56.0, 9686.0], [57.0, 12.666666666666666], [58.0, 12.5], [60.0, 22603.5], [61.0, 5307.875], [62.0, 9460.166666666666], [63.0, 3054.777777777778], [64.0, 12.0], [65.0, 10860.000000000002], [66.0, 4735.4], [67.0, 3435.4285714285716], [70.0, 5854.285714285715], [71.0, 7611.6], [72.0, 11.0], [73.0, 7877.6], [74.0, 7016.0], [75.0, 15.0], [76.0, 7221.5], [77.0, 11309.625], [78.0, 13.333333333333334], [79.0, 9449.333333333334], [81.0, 10462.2], [82.0, 13395.928571428572], [83.0, 14.25], [80.0, 28335.0], [84.0, 8370.25], [85.0, 9870.42857142857], [86.0, 4340.25], [87.0, 14265.0], [88.0, 7190.75], [89.0, 18901.0], [90.0, 14592.25], [91.0, 8215.285714285716], [92.0, 11.0], [93.0, 19.0], [94.0, 7311.2], [95.0, 12.0], [96.0, 14.0], [97.0, 6968.0], [98.0, 10.0], [99.0, 15832.125], [100.0, 5074.5], [101.0, 19.0], [102.0, 10.666666666666666], [103.0, 11257.5], [104.0, 13868.142857142857], [105.0, 14227.5], [106.0, 13146.5], [107.0, 17671.999999999996], [108.0, 27.5], [109.0, 11.666666666666666], [111.0, 7531.333333333333], [112.0, 19.0], [113.0, 10384.142857142857], [114.0, 13.5], [116.0, 13.0], [118.0, 15.0], [119.0, 23365.166666666668], [120.0, 7039.291457286422], [1.0, 93.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[110.36169190098532, 6716.3662581110075]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 120.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 131.46666666666667, "minX": 1.70032488E12, "maxY": 1.3555348686666667E8, "series": [{"data": [[1.70032524E12, 3436.766666666667], [1.70032494E12, 3419.766666666667], [1.70032488E12, 2313.866666666667], [1.70032584E12, 131.46666666666667], [1.70032554E12, 2067.5833333333335], [1.70032548E12, 2205.1833333333334], [1.70032518E12, 4722.95], [1.70032512E12, 6484.516666666666], [1.70032578E12, 1562.85], [1.70032572E12, 2246.5833333333335], [1.70032542E12, 2276.1], [1.70032536E12, 2794.15], [1.70032506E12, 6502.1], [1.700325E12, 2454.233333333333], [1.70032566E12, 2174.516666666667], [1.7003256E12, 2148.4333333333334], [1.7003253E12, 3140.6833333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70032524E12, 7.58046728E7], [1.70032494E12, 6.159145363333333E7], [1.70032488E12, 4.2377007516666666E7], [1.70032584E12, 1.026508705E7], [1.70032554E12, 5.027325125E7], [1.70032548E12, 5.237895938333333E7], [1.70032518E12, 9.79144494E7], [1.70032512E12, 1.3555348686666667E8], [1.70032578E12, 4.685134356666667E7], [1.70032572E12, 5.343178961666667E7], [1.70032542E12, 5.23789789E7], [1.70032536E12, 6.132815995E7], [1.70032506E12, 1.2923654288333334E8], [1.700325E12, 4.79044262E7], [1.70032566E12, 5.18525319E7], [1.7003256E12, 5.211571761666667E7], [1.7003253E12, 6.896125458333333E7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70032584E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 271.6910112359551, "minX": 1.70032488E12, "maxY": 37503.7435897436, "series": [{"data": [[1.70032524E12, 16011.625000000004], [1.70032494E12, 6421.350427350423], [1.70032488E12, 1188.4285714285709], [1.70032584E12, 37503.7435897436], [1.70032554E12, 31342.701570680627], [1.70032548E12, 30628.487437185915], [1.70032518E12, 11188.71505376345], [1.70032512E12, 9196.139805825245], [1.70032578E12, 32531.831460674144], [1.70032572E12, 28363.91625615763], [1.70032542E12, 27474.175879396986], [1.70032536E12, 21490.055793991414], [1.70032506E12, 8313.048879837072], [1.700325E12, 16708.456043956037], [1.70032566E12, 31656.73604060915], [1.7003256E12, 29854.73737373738], [1.7003253E12, 18880.488549618316]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.70032524E12, 8609.20629370629], [1.70032494E12, 3946.379699248119], [1.70032488E12, 271.6910112359551], [1.70032584E12, 29133.8], [1.70032554E12, 5602.272727272729], [1.70032548E12, 5996.920398009954], [1.70032518E12, 6715.608247422679], [1.70032512E12, 5544.832669322715], [1.70032578E12, 8626.499999999998], [1.70032572E12, 7162.423645320198], [1.70032542E12, 7379.487922705316], [1.70032536E12, 9074.337448559667], [1.70032506E12, 6531.577689243023], [1.700325E12, 10843.712121212122], [1.70032566E12, 6132.439393939392], [1.7003256E12, 6230.914141414142], [1.7003253E12, 8986.865168539329]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70032584E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 271.5561797752809, "minX": 1.70032488E12, "maxY": 37503.7435897436, "series": [{"data": [[1.70032524E12, 16011.611111111115], [1.70032494E12, 6421.324786324783], [1.70032488E12, 1188.3726708074532], [1.70032584E12, 37503.7435897436], [1.70032554E12, 31342.701570680627], [1.70032548E12, 30628.477386934668], [1.70032518E12, 11188.709677419356], [1.70032512E12, 9196.116504854373], [1.70032578E12, 32531.831460674144], [1.70032572E12, 28363.906403940888], [1.70032542E12, 27474.175879396986], [1.70032536E12, 21490.038626609436], [1.70032506E12, 8313.034623217925], [1.700325E12, 16708.43956043956], [1.70032566E12, 31656.725888324883], [1.7003256E12, 29854.73737373738], [1.7003253E12, 18880.480916030552]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.70032524E12, 8609.185314685312], [1.70032494E12, 3946.312030075187], [1.70032488E12, 271.5561797752809], [1.70032584E12, 29133.8], [1.70032554E12, 5602.262032085558], [1.70032548E12, 5996.9154228855705], [1.70032518E12, 6715.590206185563], [1.70032512E12, 5544.810756972105], [1.70032578E12, 8626.492424242424], [1.70032572E12, 7162.423645320198], [1.70032542E12, 7379.46376811594], [1.70032536E12, 9074.316872427982], [1.70032506E12, 6531.555776892434], [1.700325E12, 10843.702020202025], [1.70032566E12, 6132.424242424243], [1.7003256E12, 6230.898989898991], [1.7003253E12, 8986.84644194756]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70032584E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70032488E12, "maxY": 1.2803030303030305, "series": [{"data": [[1.70032524E12, 0.4479166666666665], [1.70032494E12, 0.0726495726495727], [1.70032488E12, 0.0], [1.70032584E12, 0.0], [1.70032554E12, 0.18324607329842937], [1.70032548E12, 0.2562814070351758], [1.70032518E12, 0.3010752688172041], [1.70032512E12, 0.30873786407766973], [1.70032578E12, 0.17977528089887643], [1.70032572E12, 0.25123152709359614], [1.70032542E12, 0.4723618090452262], [1.70032536E12, 0.26180257510729615], [1.70032506E12, 0.38289205702647644], [1.700325E12, 0.37362637362637363], [1.70032566E12, 0.1218274111675127], [1.7003256E12, 0.32323232323232315], [1.7003253E12, 0.29770992366412213]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.70032524E12, 0.7272727272727276], [1.70032494E12, 0.770676691729323], [1.70032488E12, 0.6966292134831458], [1.70032584E12, 0.0], [1.70032554E12, 1.0962566844919799], [1.70032548E12, 1.1492537313432831], [1.70032518E12, 0.6108247422680405], [1.70032512E12, 0.47011952191235085], [1.70032578E12, 1.2803030303030305], [1.70032572E12, 1.0443349753694577], [1.70032542E12, 1.0772946859903385], [1.70032536E12, 1.0246913580246908], [1.70032506E12, 0.4322709163346611], [1.700325E12, 1.272727272727272], [1.70032566E12, 1.2323232323232314], [1.7003256E12, 1.1363636363636367], [1.7003253E12, 0.8539325842696626]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70032584E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.70032488E12, "maxY": 38967.0, "series": [{"data": [[1.70032524E12, 29998.0], [1.70032494E12, 22961.0], [1.70032488E12, 5819.0], [1.70032584E12, 29720.0], [1.70032554E12, 29715.0], [1.70032548E12, 29230.0], [1.70032518E12, 29934.0], [1.70032512E12, 36826.0], [1.70032578E12, 29873.0], [1.70032572E12, 29975.0], [1.70032542E12, 29957.0], [1.70032536E12, 29986.0], [1.70032506E12, 38967.0], [1.700325E12, 36880.0], [1.70032566E12, 29792.0], [1.7003256E12, 29845.0], [1.7003253E12, 29993.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70032524E12, 28448.0], [1.70032494E12, 16280.800000000003], [1.70032488E12, 2073.0], [1.70032584E12, 29720.0], [1.70032554E12, 27964.9], [1.70032548E12, 28074.8], [1.70032518E12, 27503.999999999996], [1.70032512E12, 27944.0], [1.70032578E12, 28575.899999999998], [1.70032572E12, 27782.600000000002], [1.70032542E12, 28215.0], [1.70032536E12, 28260.4], [1.70032506E12, 28018.899999999998], [1.700325E12, 28944.6], [1.70032566E12, 28155.4], [1.7003256E12, 28368.4], [1.7003253E12, 28548.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70032524E12, 29794.3], [1.70032494E12, 19985.83], [1.70032488E12, 4163.800000000003], [1.70032584E12, 29720.0], [1.70032554E12, 29534.579999999998], [1.70032548E12, 29065.04], [1.70032518E12, 29283.0], [1.70032512E12, 32634.759999999995], [1.70032578E12, 29810.46], [1.70032572E12, 29758.28], [1.70032542E12, 29656.82], [1.70032536E12, 29405.419999999995], [1.70032506E12, 34033.149999999994], [1.700325E12, 36238.00000000001], [1.70032566E12, 29652.22], [1.7003256E12, 29740.72], [1.7003253E12, 29801.039999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70032524E12, 29024.0], [1.70032494E12, 17989.0], [1.70032488E12, 2686.0], [1.70032584E12, 29720.0], [1.70032554E12, 28776.7], [1.70032548E12, 28648.4], [1.70032518E12, 28503.899999999998], [1.70032512E12, 29444.5], [1.70032578E12, 28885.35], [1.70032572E12, 28558.399999999998], [1.70032542E12, 29019.1], [1.70032536E12, 28826.2], [1.70032506E12, 29806.849999999995], [1.700325E12, 30912.000000000007], [1.70032566E12, 28727.35], [1.7003256E12, 28967.399999999998], [1.7003253E12, 29232.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70032524E12, 8.0], [1.70032494E12, 9.0], [1.70032488E12, 10.0], [1.70032584E12, 27965.0], [1.70032554E12, 9.0], [1.70032548E12, 10.0], [1.70032518E12, 8.0], [1.70032512E12, 8.0], [1.70032578E12, 9.0], [1.70032572E12, 9.0], [1.70032542E12, 10.0], [1.70032536E12, 10.0], [1.70032506E12, 8.0], [1.700325E12, 8.0], [1.70032566E12, 10.0], [1.7003256E12, 9.0], [1.7003253E12, 9.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70032524E12, 495.5], [1.70032494E12, 658.5], [1.70032488E12, 537.0], [1.70032584E12, 28991.0], [1.70032554E12, 15.0], [1.70032548E12, 16.0], [1.70032518E12, 467.0], [1.70032512E12, 502.0], [1.70032578E12, 17.0], [1.70032572E12, 22.0], [1.70032542E12, 19.0], [1.70032536E12, 492.5], [1.70032506E12, 521.0], [1.700325E12, 670.0], [1.70032566E12, 15.0], [1.7003256E12, 15.0], [1.7003253E12, 513.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70032584E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 37740.0, "series": [{"data": [[2.0, 16.0], [34.0, 539.5], [3.0, 596.5], [4.0, 19.0], [5.0, 557.0], [6.0, 18.5], [7.0, 49.0], [8.0, 21.0], [9.0, 519.0], [10.0, 18.0], [11.0, 522.0], [12.0, 35.5], [13.0, 492.0], [14.0, 31.0], [15.0, 415.5], [1.0, 620.5], [16.0, 492.5], [17.0, 520.5], [18.0, 528.5], [19.0, 475.5], [20.0, 473.0], [21.0, 539.0], [22.0, 498.0], [23.0, 506.0], [24.0, 473.5], [25.0, 529.0], [26.0, 535.0], [27.0, 516.0], [28.0, 516.0], [29.0, 589.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 37160.5], [34.0, 31351.0], [3.0, 37740.0], [4.0, 37243.0], [5.0, 37265.0], [6.0, 37540.5], [7.0, 37495.0], [8.0, 37248.0], [9.0, 36977.0], [10.0, 37006.0], [11.0, 36144.0], [12.0, 36681.0], [13.0, 37223.5], [14.0, 37190.0], [15.0, 34708.5], [16.0, 35527.0], [1.0, 37665.5], [17.0, 35508.0], [18.0, 32817.5], [19.0, 34659.0], [20.0, 32157.0], [21.0, 36718.0], [22.0, 32715.0], [23.0, 30604.0], [24.0, 33078.5], [25.0, 30891.5], [26.0, 30445.0], [27.0, 31890.0], [28.0, 31583.5], [29.0, 30466.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 34.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 37740.0, "series": [{"data": [[2.0, 16.0], [34.0, 539.5], [3.0, 596.5], [4.0, 19.0], [5.0, 557.0], [6.0, 18.5], [7.0, 49.0], [8.0, 21.0], [9.0, 519.0], [10.0, 18.0], [11.0, 522.0], [12.0, 35.5], [13.0, 492.0], [14.0, 31.0], [15.0, 415.5], [1.0, 620.5], [16.0, 492.5], [17.0, 520.5], [18.0, 528.5], [19.0, 475.5], [20.0, 473.0], [21.0, 539.0], [22.0, 498.0], [23.0, 506.0], [24.0, 473.5], [25.0, 529.0], [26.0, 535.0], [27.0, 516.0], [28.0, 516.0], [29.0, 589.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 37160.5], [34.0, 31351.0], [3.0, 37740.0], [4.0, 37243.0], [5.0, 37265.0], [6.0, 37540.5], [7.0, 37495.0], [8.0, 37248.0], [9.0, 36977.0], [10.0, 37006.0], [11.0, 36144.0], [12.0, 36681.0], [13.0, 37223.5], [14.0, 37190.0], [15.0, 34708.5], [16.0, 35527.0], [1.0, 37665.5], [17.0, 35508.0], [18.0, 32817.5], [19.0, 34659.0], [20.0, 32157.0], [21.0, 36718.0], [22.0, 32715.0], [23.0, 30603.5], [24.0, 33078.5], [25.0, 30891.5], [26.0, 30445.0], [27.0, 31890.0], [28.0, 31583.5], [29.0, 30466.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 34.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.9, "minX": 1.70032488E12, "maxY": 16.95, "series": [{"data": [[1.70032524E12, 9.566666666666666], [1.70032494E12, 9.333333333333334], [1.70032488E12, 6.05], [1.70032554E12, 6.3], [1.70032548E12, 6.666666666666667], [1.70032518E12, 12.666666666666666], [1.70032512E12, 16.95], [1.70032578E12, 3.9], [1.70032572E12, 6.766666666666667], [1.70032542E12, 6.766666666666667], [1.70032536E12, 7.933333333333334], [1.70032506E12, 16.55], [1.700325E12, 6.933333333333334], [1.70032566E12, 6.583333333333333], [1.7003256E12, 6.6], [1.7003253E12, 8.816666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70032578E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70032488E12, "maxY": 15.333333333333334, "series": [{"data": [[1.70032524E12, 7.233333333333333], [1.70032494E12, 8.333333333333334], [1.70032488E12, 5.65], [1.70032584E12, 0.06666666666666667], [1.70032554E12, 3.7666666666666666], [1.70032548E12, 4.05], [1.70032518E12, 10.416666666666666], [1.70032512E12, 14.95], [1.70032578E12, 2.6333333333333333], [1.70032572E12, 4.183333333333334], [1.70032542E12, 4.283333333333333], [1.70032536E12, 5.666666666666667], [1.70032506E12, 15.333333333333334], [1.700325E12, 5.633333333333334], [1.70032566E12, 4.0], [1.7003256E12, 3.85], [1.7003253E12, 6.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70032524E12, 0.08333333333333333], [1.70032572E12, 0.03333333333333333], [1.70032542E12, 0.016666666666666666], [1.70032506E12, 0.03333333333333333], [1.700325E12, 0.03333333333333333], [1.70032518E12, 0.06666666666666667], [1.70032566E12, 0.016666666666666666], [1.70032512E12, 0.1], [1.7003256E12, 0.06666666666666667]], "isOverall": false, "label": "422", "isController": false}, {"data": [[1.70032524E12, 0.016666666666666666], [1.70032506E12, 0.03333333333333333], [1.70032518E12, 0.06666666666666667], [1.70032512E12, 0.03333333333333333], [1.7003256E12, 0.016666666666666666], [1.7003253E12, 0.016666666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.70032524E12, 2.2333333333333334], [1.70032584E12, 0.6666666666666666], [1.70032554E12, 2.533333333333333], [1.70032548E12, 2.6166666666666667], [1.70032518E12, 2.1166666666666667], [1.70032512E12, 1.8666666666666667], [1.70032578E12, 2.533333333333333], [1.70032572E12, 2.55], [1.70032542E12, 2.466666666666667], [1.70032536E12, 2.2666666666666666], [1.70032506E12, 1.15], [1.700325E12, 0.6666666666666666], [1.70032566E12, 2.566666666666667], [1.7003256E12, 2.6666666666666665], [1.7003253E12, 2.3]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70032584E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70032488E12, "maxY": 8.3, "series": [{"data": [[1.70032524E12, 2.25], [1.70032584E12, 0.65], [1.70032554E12, 2.533333333333333], [1.70032548E12, 2.6166666666666667], [1.70032518E12, 2.066666666666667], [1.70032512E12, 1.85], [1.70032578E12, 2.5166666666666666], [1.70032572E12, 2.55], [1.70032542E12, 2.466666666666667], [1.70032536E12, 2.2666666666666666], [1.70032506E12, 1.15], [1.700325E12, 0.6666666666666666], [1.70032566E12, 2.566666666666667], [1.7003256E12, 2.6666666666666665], [1.7003253E12, 2.3]], "isOverall": false, "label": "Cargar Tareas-failure", "isController": false}, {"data": [[1.70032524E12, 2.55], [1.70032494E12, 3.9], [1.70032488E12, 2.683333333333333], [1.70032554E12, 0.65], [1.70032548E12, 0.7], [1.70032518E12, 4.133333333333334], [1.70032512E12, 6.733333333333333], [1.70032578E12, 0.45], [1.70032572E12, 0.8333333333333334], [1.70032542E12, 0.85], [1.70032536E12, 1.6166666666666667], [1.70032506E12, 7.033333333333333], [1.700325E12, 2.3666666666666667], [1.70032566E12, 0.7166666666666667], [1.7003256E12, 0.6333333333333333], [1.7003253E12, 2.066666666666667]], "isOverall": false, "label": "Cargar Tareas-success", "isController": false}, {"data": [[1.70032524E12, 4.683333333333334], [1.70032494E12, 4.433333333333334], [1.70032488E12, 2.966666666666667], [1.70032584E12, 0.06666666666666667], [1.70032554E12, 3.1166666666666667], [1.70032548E12, 3.35], [1.70032518E12, 6.283333333333333], [1.70032512E12, 8.216666666666667], [1.70032578E12, 2.183333333333333], [1.70032572E12, 3.35], [1.70032542E12, 3.433333333333333], [1.70032536E12, 4.05], [1.70032506E12, 8.3], [1.700325E12, 3.2666666666666666], [1.70032566E12, 3.283333333333333], [1.7003256E12, 3.216666666666667], [1.7003253E12, 4.433333333333334]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.70032524E12, 0.08333333333333333], [1.70032572E12, 0.03333333333333333], [1.70032542E12, 0.016666666666666666], [1.70032584E12, 0.016666666666666666], [1.70032506E12, 0.06666666666666667], [1.700325E12, 0.03333333333333333], [1.70032518E12, 0.18333333333333332], [1.70032566E12, 0.016666666666666666], [1.70032512E12, 0.15], [1.7003256E12, 0.08333333333333333], [1.7003253E12, 0.016666666666666666], [1.70032578E12, 0.016666666666666666]], "isOverall": false, "label": "Login-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70032584E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.70032488E12, "maxY": 15.333333333333334, "series": [{"data": [[1.70032524E12, 7.233333333333333], [1.70032494E12, 8.333333333333334], [1.70032488E12, 5.65], [1.70032584E12, 0.06666666666666667], [1.70032554E12, 3.7666666666666666], [1.70032548E12, 4.05], [1.70032518E12, 10.416666666666666], [1.70032512E12, 14.95], [1.70032578E12, 2.6333333333333333], [1.70032572E12, 4.183333333333334], [1.70032542E12, 4.283333333333333], [1.70032536E12, 5.666666666666667], [1.70032506E12, 15.333333333333334], [1.700325E12, 5.633333333333334], [1.70032566E12, 4.0], [1.7003256E12, 3.85], [1.7003253E12, 6.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70032524E12, 2.3333333333333335], [1.70032584E12, 0.6666666666666666], [1.70032554E12, 2.533333333333333], [1.70032548E12, 2.6166666666666667], [1.70032518E12, 2.25], [1.70032512E12, 2.0], [1.70032578E12, 2.533333333333333], [1.70032572E12, 2.5833333333333335], [1.70032542E12, 2.4833333333333334], [1.70032536E12, 2.2666666666666666], [1.70032506E12, 1.2166666666666666], [1.700325E12, 0.7], [1.70032566E12, 2.5833333333333335], [1.7003256E12, 2.75], [1.7003253E12, 2.316666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70032584E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

