/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 19722.0, "series": [{"data": [[0.0, 171.0], [0.1, 310.0], [0.2, 450.0], [0.3, 722.0], [0.4, 813.0], [0.5, 861.0], [0.6, 944.0], [0.7, 1001.0], [0.8, 1075.0], [0.9, 1165.0], [1.0, 1241.0], [1.1, 1297.0], [1.2, 1348.0], [1.3, 1390.0], [1.4, 1427.0], [1.5, 1478.0], [1.6, 1516.0], [1.7, 1574.0], [1.8, 1592.0], [1.9, 1631.0], [2.0, 1654.0], [2.1, 1676.0], [2.2, 1697.0], [2.3, 1716.0], [2.4, 1747.0], [2.5, 1765.0], [2.6, 1780.0], [2.7, 1796.0], [2.8, 1809.0], [2.9, 1821.0], [3.0, 1841.0], [3.1, 1859.0], [3.2, 1875.0], [3.3, 1886.0], [3.4, 1901.0], [3.5, 1916.0], [3.6, 1929.0], [3.7, 1943.0], [3.8, 1951.0], [3.9, 1961.0], [4.0, 1971.0], [4.1, 1980.0], [4.2, 1993.0], [4.3, 2001.0], [4.4, 2011.0], [4.5, 2019.0], [4.6, 2025.0], [4.7, 2033.0], [4.8, 2040.0], [4.9, 2047.0], [5.0, 2053.0], [5.1, 2062.0], [5.2, 2070.0], [5.3, 2078.0], [5.4, 2086.0], [5.5, 2091.0], [5.6, 2096.0], [5.7, 2104.0], [5.8, 2110.0], [5.9, 2115.0], [6.0, 2120.0], [6.1, 2125.0], [6.2, 2130.0], [6.3, 2135.0], [6.4, 2139.0], [6.5, 2144.0], [6.6, 2147.0], [6.7, 2153.0], [6.8, 2158.0], [6.9, 2163.0], [7.0, 2167.0], [7.1, 2171.0], [7.2, 2176.0], [7.3, 2180.0], [7.4, 2186.0], [7.5, 2192.0], [7.6, 2197.0], [7.7, 2203.0], [7.8, 2207.0], [7.9, 2212.0], [8.0, 2216.0], [8.1, 2221.0], [8.2, 2225.0], [8.3, 2230.0], [8.4, 2233.0], [8.5, 2238.0], [8.6, 2243.0], [8.7, 2246.0], [8.8, 2250.0], [8.9, 2255.0], [9.0, 2259.0], [9.1, 2263.0], [9.2, 2268.0], [9.3, 2272.0], [9.4, 2276.0], [9.5, 2279.0], [9.6, 2283.0], [9.7, 2286.0], [9.8, 2290.0], [9.9, 2294.0], [10.0, 2297.0], [10.1, 2302.0], [10.2, 2307.0], [10.3, 2310.0], [10.4, 2313.0], [10.5, 2316.0], [10.6, 2320.0], [10.7, 2324.0], [10.8, 2328.0], [10.9, 2331.0], [11.0, 2336.0], [11.1, 2339.0], [11.2, 2344.0], [11.3, 2347.0], [11.4, 2351.0], [11.5, 2354.0], [11.6, 2359.0], [11.7, 2362.0], [11.8, 2364.0], [11.9, 2368.0], [12.0, 2371.0], [12.1, 2375.0], [12.2, 2379.0], [12.3, 2381.0], [12.4, 2386.0], [12.5, 2389.0], [12.6, 2392.0], [12.7, 2396.0], [12.8, 2399.0], [12.9, 2402.0], [13.0, 2406.0], [13.1, 2408.0], [13.2, 2411.0], [13.3, 2414.0], [13.4, 2418.0], [13.5, 2421.0], [13.6, 2424.0], [13.7, 2426.0], [13.8, 2430.0], [13.9, 2433.0], [14.0, 2436.0], [14.1, 2438.0], [14.2, 2441.0], [14.3, 2444.0], [14.4, 2447.0], [14.5, 2451.0], [14.6, 2454.0], [14.7, 2458.0], [14.8, 2462.0], [14.9, 2465.0], [15.0, 2468.0], [15.1, 2471.0], [15.2, 2474.0], [15.3, 2477.0], [15.4, 2480.0], [15.5, 2484.0], [15.6, 2486.0], [15.7, 2489.0], [15.8, 2493.0], [15.9, 2496.0], [16.0, 2498.0], [16.1, 2501.0], [16.2, 2505.0], [16.3, 2508.0], [16.4, 2511.0], [16.5, 2516.0], [16.6, 2519.0], [16.7, 2520.0], [16.8, 2525.0], [16.9, 2528.0], [17.0, 2532.0], [17.1, 2534.0], [17.2, 2538.0], [17.3, 2540.0], [17.4, 2543.0], [17.5, 2546.0], [17.6, 2550.0], [17.7, 2553.0], [17.8, 2556.0], [17.9, 2558.0], [18.0, 2562.0], [18.1, 2564.0], [18.2, 2566.0], [18.3, 2569.0], [18.4, 2572.0], [18.5, 2575.0], [18.6, 2578.0], [18.7, 2581.0], [18.8, 2584.0], [18.9, 2588.0], [19.0, 2590.0], [19.1, 2592.0], [19.2, 2595.0], [19.3, 2598.0], [19.4, 2602.0], [19.5, 2605.0], [19.6, 2607.0], [19.7, 2611.0], [19.8, 2615.0], [19.9, 2617.0], [20.0, 2620.0], [20.1, 2623.0], [20.2, 2626.0], [20.3, 2631.0], [20.4, 2633.0], [20.5, 2637.0], [20.6, 2640.0], [20.7, 2643.0], [20.8, 2646.0], [20.9, 2649.0], [21.0, 2651.0], [21.1, 2655.0], [21.2, 2658.0], [21.3, 2661.0], [21.4, 2665.0], [21.5, 2669.0], [21.6, 2672.0], [21.7, 2677.0], [21.8, 2681.0], [21.9, 2684.0], [22.0, 2688.0], [22.1, 2691.0], [22.2, 2695.0], [22.3, 2698.0], [22.4, 2702.0], [22.5, 2705.0], [22.6, 2708.0], [22.7, 2712.0], [22.8, 2717.0], [22.9, 2721.0], [23.0, 2724.0], [23.1, 2728.0], [23.2, 2732.0], [23.3, 2734.0], [23.4, 2738.0], [23.5, 2741.0], [23.6, 2744.0], [23.7, 2749.0], [23.8, 2752.0], [23.9, 2754.0], [24.0, 2759.0], [24.1, 2761.0], [24.2, 2765.0], [24.3, 2768.0], [24.4, 2772.0], [24.5, 2776.0], [24.6, 2779.0], [24.7, 2783.0], [24.8, 2787.0], [24.9, 2791.0], [25.0, 2796.0], [25.1, 2799.0], [25.2, 2802.0], [25.3, 2805.0], [25.4, 2808.0], [25.5, 2813.0], [25.6, 2816.0], [25.7, 2819.0], [25.8, 2824.0], [25.9, 2829.0], [26.0, 2833.0], [26.1, 2836.0], [26.2, 2841.0], [26.3, 2843.0], [26.4, 2847.0], [26.5, 2850.0], [26.6, 2855.0], [26.7, 2859.0], [26.8, 2863.0], [26.9, 2866.0], [27.0, 2869.0], [27.1, 2873.0], [27.2, 2878.0], [27.3, 2882.0], [27.4, 2887.0], [27.5, 2892.0], [27.6, 2895.0], [27.7, 2898.0], [27.8, 2901.0], [27.9, 2904.0], [28.0, 2908.0], [28.1, 2912.0], [28.2, 2916.0], [28.3, 2920.0], [28.4, 2924.0], [28.5, 2927.0], [28.6, 2931.0], [28.7, 2934.0], [28.8, 2938.0], [28.9, 2941.0], [29.0, 2945.0], [29.1, 2948.0], [29.2, 2951.0], [29.3, 2955.0], [29.4, 2958.0], [29.5, 2961.0], [29.6, 2965.0], [29.7, 2967.0], [29.8, 2972.0], [29.9, 2975.0], [30.0, 2980.0], [30.1, 2983.0], [30.2, 2985.0], [30.3, 2989.0], [30.4, 2993.0], [30.5, 2996.0], [30.6, 2999.0], [30.7, 3003.0], [30.8, 3006.0], [30.9, 3010.0], [31.0, 3014.0], [31.1, 3017.0], [31.2, 3020.0], [31.3, 3025.0], [31.4, 3029.0], [31.5, 3034.0], [31.6, 3037.0], [31.7, 3039.0], [31.8, 3041.0], [31.9, 3046.0], [32.0, 3049.0], [32.1, 3053.0], [32.2, 3057.0], [32.3, 3062.0], [32.4, 3065.0], [32.5, 3068.0], [32.6, 3072.0], [32.7, 3076.0], [32.8, 3080.0], [32.9, 3083.0], [33.0, 3085.0], [33.1, 3089.0], [33.2, 3092.0], [33.3, 3095.0], [33.4, 3098.0], [33.5, 3101.0], [33.6, 3104.0], [33.7, 3106.0], [33.8, 3110.0], [33.9, 3112.0], [34.0, 3115.0], [34.1, 3118.0], [34.2, 3121.0], [34.3, 3124.0], [34.4, 3127.0], [34.5, 3130.0], [34.6, 3133.0], [34.7, 3137.0], [34.8, 3140.0], [34.9, 3142.0], [35.0, 3145.0], [35.1, 3147.0], [35.2, 3150.0], [35.3, 3154.0], [35.4, 3156.0], [35.5, 3160.0], [35.6, 3164.0], [35.7, 3168.0], [35.8, 3171.0], [35.9, 3174.0], [36.0, 3177.0], [36.1, 3181.0], [36.2, 3184.0], [36.3, 3188.0], [36.4, 3190.0], [36.5, 3193.0], [36.6, 3196.0], [36.7, 3199.0], [36.8, 3201.0], [36.9, 3204.0], [37.0, 3207.0], [37.1, 3212.0], [37.2, 3215.0], [37.3, 3217.0], [37.4, 3221.0], [37.5, 3223.0], [37.6, 3227.0], [37.7, 3230.0], [37.8, 3233.0], [37.9, 3236.0], [38.0, 3239.0], [38.1, 3242.0], [38.2, 3245.0], [38.3, 3247.0], [38.4, 3250.0], [38.5, 3252.0], [38.6, 3255.0], [38.7, 3258.0], [38.8, 3261.0], [38.9, 3263.0], [39.0, 3267.0], [39.1, 3269.0], [39.2, 3272.0], [39.3, 3274.0], [39.4, 3277.0], [39.5, 3279.0], [39.6, 3281.0], [39.7, 3284.0], [39.8, 3287.0], [39.9, 3289.0], [40.0, 3292.0], [40.1, 3294.0], [40.2, 3296.0], [40.3, 3299.0], [40.4, 3302.0], [40.5, 3304.0], [40.6, 3307.0], [40.7, 3309.0], [40.8, 3311.0], [40.9, 3313.0], [41.0, 3317.0], [41.1, 3319.0], [41.2, 3321.0], [41.3, 3323.0], [41.4, 3325.0], [41.5, 3328.0], [41.6, 3331.0], [41.7, 3334.0], [41.8, 3337.0], [41.9, 3339.0], [42.0, 3342.0], [42.1, 3344.0], [42.2, 3347.0], [42.3, 3350.0], [42.4, 3352.0], [42.5, 3355.0], [42.6, 3358.0], [42.7, 3359.0], [42.8, 3362.0], [42.9, 3364.0], [43.0, 3366.0], [43.1, 3369.0], [43.2, 3371.0], [43.3, 3374.0], [43.4, 3376.0], [43.5, 3378.0], [43.6, 3380.0], [43.7, 3382.0], [43.8, 3384.0], [43.9, 3387.0], [44.0, 3389.0], [44.1, 3391.0], [44.2, 3393.0], [44.3, 3395.0], [44.4, 3397.0], [44.5, 3399.0], [44.6, 3401.0], [44.7, 3404.0], [44.8, 3405.0], [44.9, 3407.0], [45.0, 3409.0], [45.1, 3411.0], [45.2, 3412.0], [45.3, 3414.0], [45.4, 3417.0], [45.5, 3419.0], [45.6, 3421.0], [45.7, 3423.0], [45.8, 3426.0], [45.9, 3427.0], [46.0, 3430.0], [46.1, 3432.0], [46.2, 3434.0], [46.3, 3437.0], [46.4, 3439.0], [46.5, 3442.0], [46.6, 3443.0], [46.7, 3445.0], [46.8, 3448.0], [46.9, 3450.0], [47.0, 3452.0], [47.1, 3454.0], [47.2, 3456.0], [47.3, 3458.0], [47.4, 3460.0], [47.5, 3463.0], [47.6, 3465.0], [47.7, 3466.0], [47.8, 3469.0], [47.9, 3471.0], [48.0, 3473.0], [48.1, 3475.0], [48.2, 3478.0], [48.3, 3479.0], [48.4, 3482.0], [48.5, 3484.0], [48.6, 3486.0], [48.7, 3488.0], [48.8, 3490.0], [48.9, 3492.0], [49.0, 3494.0], [49.1, 3496.0], [49.2, 3498.0], [49.3, 3499.0], [49.4, 3501.0], [49.5, 3503.0], [49.6, 3505.0], [49.7, 3507.0], [49.8, 3509.0], [49.9, 3512.0], [50.0, 3514.0], [50.1, 3516.0], [50.2, 3517.0], [50.3, 3520.0], [50.4, 3521.0], [50.5, 3523.0], [50.6, 3525.0], [50.7, 3527.0], [50.8, 3529.0], [50.9, 3531.0], [51.0, 3533.0], [51.1, 3536.0], [51.2, 3537.0], [51.3, 3540.0], [51.4, 3542.0], [51.5, 3544.0], [51.6, 3546.0], [51.7, 3548.0], [51.8, 3550.0], [51.9, 3552.0], [52.0, 3554.0], [52.1, 3556.0], [52.2, 3557.0], [52.3, 3559.0], [52.4, 3561.0], [52.5, 3562.0], [52.6, 3564.0], [52.7, 3566.0], [52.8, 3568.0], [52.9, 3570.0], [53.0, 3572.0], [53.1, 3574.0], [53.2, 3576.0], [53.3, 3578.0], [53.4, 3579.0], [53.5, 3581.0], [53.6, 3584.0], [53.7, 3585.0], [53.8, 3587.0], [53.9, 3589.0], [54.0, 3591.0], [54.1, 3592.0], [54.2, 3594.0], [54.3, 3597.0], [54.4, 3599.0], [54.5, 3601.0], [54.6, 3602.0], [54.7, 3605.0], [54.8, 3608.0], [54.9, 3609.0], [55.0, 3611.0], [55.1, 3612.0], [55.2, 3614.0], [55.3, 3616.0], [55.4, 3618.0], [55.5, 3620.0], [55.6, 3622.0], [55.7, 3624.0], [55.8, 3626.0], [55.9, 3627.0], [56.0, 3629.0], [56.1, 3631.0], [56.2, 3633.0], [56.3, 3635.0], [56.4, 3638.0], [56.5, 3640.0], [56.6, 3641.0], [56.7, 3643.0], [56.8, 3644.0], [56.9, 3646.0], [57.0, 3648.0], [57.1, 3650.0], [57.2, 3652.0], [57.3, 3653.0], [57.4, 3655.0], [57.5, 3657.0], [57.6, 3659.0], [57.7, 3662.0], [57.8, 3663.0], [57.9, 3665.0], [58.0, 3668.0], [58.1, 3669.0], [58.2, 3671.0], [58.3, 3672.0], [58.4, 3674.0], [58.5, 3675.0], [58.6, 3677.0], [58.7, 3679.0], [58.8, 3681.0], [58.9, 3683.0], [59.0, 3685.0], [59.1, 3687.0], [59.2, 3688.0], [59.3, 3690.0], [59.4, 3692.0], [59.5, 3695.0], [59.6, 3697.0], [59.7, 3699.0], [59.8, 3701.0], [59.9, 3703.0], [60.0, 3705.0], [60.1, 3708.0], [60.2, 3710.0], [60.3, 3712.0], [60.4, 3714.0], [60.5, 3715.0], [60.6, 3718.0], [60.7, 3719.0], [60.8, 3722.0], [60.9, 3724.0], [61.0, 3725.0], [61.1, 3727.0], [61.2, 3729.0], [61.3, 3731.0], [61.4, 3733.0], [61.5, 3735.0], [61.6, 3737.0], [61.7, 3738.0], [61.8, 3740.0], [61.9, 3742.0], [62.0, 3744.0], [62.1, 3747.0], [62.2, 3748.0], [62.3, 3751.0], [62.4, 3752.0], [62.5, 3755.0], [62.6, 3756.0], [62.7, 3758.0], [62.8, 3761.0], [62.9, 3763.0], [63.0, 3765.0], [63.1, 3767.0], [63.2, 3769.0], [63.3, 3770.0], [63.4, 3773.0], [63.5, 3775.0], [63.6, 3777.0], [63.7, 3778.0], [63.8, 3780.0], [63.9, 3781.0], [64.0, 3783.0], [64.1, 3785.0], [64.2, 3787.0], [64.3, 3789.0], [64.4, 3791.0], [64.5, 3793.0], [64.6, 3795.0], [64.7, 3797.0], [64.8, 3800.0], [64.9, 3802.0], [65.0, 3804.0], [65.1, 3806.0], [65.2, 3807.0], [65.3, 3809.0], [65.4, 3811.0], [65.5, 3812.0], [65.6, 3814.0], [65.7, 3816.0], [65.8, 3818.0], [65.9, 3820.0], [66.0, 3823.0], [66.1, 3825.0], [66.2, 3827.0], [66.3, 3831.0], [66.4, 3832.0], [66.5, 3834.0], [66.6, 3835.0], [66.7, 3837.0], [66.8, 3840.0], [66.9, 3842.0], [67.0, 3844.0], [67.1, 3847.0], [67.2, 3849.0], [67.3, 3850.0], [67.4, 3852.0], [67.5, 3855.0], [67.6, 3857.0], [67.7, 3858.0], [67.8, 3861.0], [67.9, 3863.0], [68.0, 3864.0], [68.1, 3866.0], [68.2, 3868.0], [68.3, 3870.0], [68.4, 3872.0], [68.5, 3874.0], [68.6, 3876.0], [68.7, 3877.0], [68.8, 3878.0], [68.9, 3880.0], [69.0, 3882.0], [69.1, 3884.0], [69.2, 3885.0], [69.3, 3887.0], [69.4, 3889.0], [69.5, 3891.0], [69.6, 3892.0], [69.7, 3894.0], [69.8, 3896.0], [69.9, 3898.0], [70.0, 3899.0], [70.1, 3901.0], [70.2, 3903.0], [70.3, 3906.0], [70.4, 3908.0], [70.5, 3910.0], [70.6, 3912.0], [70.7, 3914.0], [70.8, 3916.0], [70.9, 3918.0], [71.0, 3920.0], [71.1, 3922.0], [71.2, 3924.0], [71.3, 3926.0], [71.4, 3928.0], [71.5, 3929.0], [71.6, 3932.0], [71.7, 3934.0], [71.8, 3936.0], [71.9, 3938.0], [72.0, 3940.0], [72.1, 3941.0], [72.2, 3944.0], [72.3, 3946.0], [72.4, 3948.0], [72.5, 3950.0], [72.6, 3952.0], [72.7, 3954.0], [72.8, 3957.0], [72.9, 3959.0], [73.0, 3961.0], [73.1, 3962.0], [73.2, 3964.0], [73.3, 3966.0], [73.4, 3968.0], [73.5, 3970.0], [73.6, 3972.0], [73.7, 3974.0], [73.8, 3975.0], [73.9, 3978.0], [74.0, 3979.0], [74.1, 3982.0], [74.2, 3984.0], [74.3, 3985.0], [74.4, 3988.0], [74.5, 3989.0], [74.6, 3991.0], [74.7, 3993.0], [74.8, 3995.0], [74.9, 3998.0], [75.0, 4000.0], [75.1, 4002.0], [75.2, 4004.0], [75.3, 4006.0], [75.4, 4009.0], [75.5, 4012.0], [75.6, 4014.0], [75.7, 4016.0], [75.8, 4018.0], [75.9, 4021.0], [76.0, 4023.0], [76.1, 4026.0], [76.2, 4028.0], [76.3, 4029.0], [76.4, 4031.0], [76.5, 4033.0], [76.6, 4035.0], [76.7, 4038.0], [76.8, 4040.0], [76.9, 4043.0], [77.0, 4045.0], [77.1, 4048.0], [77.2, 4050.0], [77.3, 4052.0], [77.4, 4053.0], [77.5, 4055.0], [77.6, 4057.0], [77.7, 4059.0], [77.8, 4062.0], [77.9, 4065.0], [78.0, 4068.0], [78.1, 4070.0], [78.2, 4072.0], [78.3, 4074.0], [78.4, 4077.0], [78.5, 4079.0], [78.6, 4082.0], [78.7, 4084.0], [78.8, 4086.0], [78.9, 4089.0], [79.0, 4092.0], [79.1, 4094.0], [79.2, 4097.0], [79.3, 4099.0], [79.4, 4102.0], [79.5, 4104.0], [79.6, 4106.0], [79.7, 4109.0], [79.8, 4111.0], [79.9, 4114.0], [80.0, 4116.0], [80.1, 4118.0], [80.2, 4120.0], [80.3, 4123.0], [80.4, 4125.0], [80.5, 4127.0], [80.6, 4130.0], [80.7, 4132.0], [80.8, 4135.0], [80.9, 4137.0], [81.0, 4140.0], [81.1, 4143.0], [81.2, 4146.0], [81.3, 4148.0], [81.4, 4151.0], [81.5, 4153.0], [81.6, 4156.0], [81.7, 4158.0], [81.8, 4162.0], [81.9, 4165.0], [82.0, 4168.0], [82.1, 4170.0], [82.2, 4173.0], [82.3, 4175.0], [82.4, 4177.0], [82.5, 4180.0], [82.6, 4183.0], [82.7, 4185.0], [82.8, 4189.0], [82.9, 4191.0], [83.0, 4194.0], [83.1, 4197.0], [83.2, 4200.0], [83.3, 4202.0], [83.4, 4205.0], [83.5, 4209.0], [83.6, 4212.0], [83.7, 4215.0], [83.8, 4217.0], [83.9, 4220.0], [84.0, 4223.0], [84.1, 4226.0], [84.2, 4230.0], [84.3, 4232.0], [84.4, 4233.0], [84.5, 4237.0], [84.6, 4240.0], [84.7, 4243.0], [84.8, 4245.0], [84.9, 4249.0], [85.0, 4252.0], [85.1, 4255.0], [85.2, 4258.0], [85.3, 4261.0], [85.4, 4264.0], [85.5, 4268.0], [85.6, 4271.0], [85.7, 4273.0], [85.8, 4277.0], [85.9, 4280.0], [86.0, 4283.0], [86.1, 4287.0], [86.2, 4291.0], [86.3, 4294.0], [86.4, 4297.0], [86.5, 4301.0], [86.6, 4303.0], [86.7, 4305.0], [86.8, 4309.0], [86.9, 4313.0], [87.0, 4316.0], [87.1, 4319.0], [87.2, 4321.0], [87.3, 4325.0], [87.4, 4328.0], [87.5, 4333.0], [87.6, 4336.0], [87.7, 4339.0], [87.8, 4341.0], [87.9, 4345.0], [88.0, 4348.0], [88.1, 4351.0], [88.2, 4355.0], [88.3, 4358.0], [88.4, 4363.0], [88.5, 4366.0], [88.6, 4369.0], [88.7, 4373.0], [88.8, 4376.0], [88.9, 4379.0], [89.0, 4383.0], [89.1, 4387.0], [89.2, 4391.0], [89.3, 4395.0], [89.4, 4398.0], [89.5, 4402.0], [89.6, 4406.0], [89.7, 4411.0], [89.8, 4415.0], [89.9, 4419.0], [90.0, 4422.0], [90.1, 4427.0], [90.2, 4431.0], [90.3, 4436.0], [90.4, 4440.0], [90.5, 4444.0], [90.6, 4449.0], [90.7, 4452.0], [90.8, 4457.0], [90.9, 4461.0], [91.0, 4464.0], [91.1, 4469.0], [91.2, 4473.0], [91.3, 4477.0], [91.4, 4481.0], [91.5, 4485.0], [91.6, 4490.0], [91.7, 4495.0], [91.8, 4499.0], [91.9, 4505.0], [92.0, 4509.0], [92.1, 4515.0], [92.2, 4520.0], [92.3, 4525.0], [92.4, 4530.0], [92.5, 4536.0], [92.6, 4540.0], [92.7, 4546.0], [92.8, 4552.0], [92.9, 4557.0], [93.0, 4563.0], [93.1, 4569.0], [93.2, 4576.0], [93.3, 4580.0], [93.4, 4586.0], [93.5, 4591.0], [93.6, 4598.0], [93.7, 4603.0], [93.8, 4609.0], [93.9, 4616.0], [94.0, 4623.0], [94.1, 4629.0], [94.2, 4635.0], [94.3, 4640.0], [94.4, 4646.0], [94.5, 4653.0], [94.6, 4659.0], [94.7, 4665.0], [94.8, 4669.0], [94.9, 4676.0], [95.0, 4683.0], [95.1, 4688.0], [95.2, 4695.0], [95.3, 4701.0], [95.4, 4709.0], [95.5, 4715.0], [95.6, 4722.0], [95.7, 4729.0], [95.8, 4735.0], [95.9, 4745.0], [96.0, 4751.0], [96.1, 4762.0], [96.2, 4773.0], [96.3, 4783.0], [96.4, 4792.0], [96.5, 4801.0], [96.6, 4811.0], [96.7, 4820.0], [96.8, 4828.0], [96.9, 4837.0], [97.0, 4849.0], [97.1, 4860.0], [97.2, 4871.0], [97.3, 4880.0], [97.4, 4895.0], [97.5, 4909.0], [97.6, 4920.0], [97.7, 4934.0], [97.8, 4947.0], [97.9, 4961.0], [98.0, 4977.0], [98.1, 4996.0], [98.2, 5015.0], [98.3, 5031.0], [98.4, 5061.0], [98.5, 5085.0], [98.6, 5113.0], [98.7, 5142.0], [98.8, 5165.0], [98.9, 5198.0], [99.0, 5230.0], [99.1, 5273.0], [99.2, 5303.0], [99.3, 5360.0], [99.4, 5399.0], [99.5, 5471.0], [99.6, 5532.0], [99.7, 5631.0], [99.8, 5764.0], [99.9, 6076.0], [100.0, 19722.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[0.0, 7.0], [0.1, 8.0], [0.2, 8.0], [0.3, 8.0], [0.4, 8.0], [0.5, 9.0], [0.6, 9.0], [0.7, 9.0], [0.8, 9.0], [0.9, 9.0], [1.0, 9.0], [1.1, 9.0], [1.2, 9.0], [1.3, 9.0], [1.4, 9.0], [1.5, 9.0], [1.6, 9.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 10.0], [3.6, 10.0], [3.7, 10.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 10.0], [5.9, 10.0], [6.0, 10.0], [6.1, 10.0], [6.2, 10.0], [6.3, 10.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 10.0], [6.8, 10.0], [6.9, 10.0], [7.0, 10.0], [7.1, 10.0], [7.2, 10.0], [7.3, 10.0], [7.4, 10.0], [7.5, 10.0], [7.6, 10.0], [7.7, 10.0], [7.8, 10.0], [7.9, 10.0], [8.0, 10.0], [8.1, 10.0], [8.2, 10.0], [8.3, 10.0], [8.4, 10.0], [8.5, 10.0], [8.6, 10.0], [8.7, 10.0], [8.8, 10.0], [8.9, 10.0], [9.0, 10.0], [9.1, 10.0], [9.2, 10.0], [9.3, 10.0], [9.4, 10.0], [9.5, 10.0], [9.6, 10.0], [9.7, 10.0], [9.8, 10.0], [9.9, 10.0], [10.0, 11.0], [10.1, 11.0], [10.2, 11.0], [10.3, 11.0], [10.4, 11.0], [10.5, 11.0], [10.6, 11.0], [10.7, 11.0], [10.8, 11.0], [10.9, 11.0], [11.0, 11.0], [11.1, 11.0], [11.2, 11.0], [11.3, 11.0], [11.4, 11.0], [11.5, 11.0], [11.6, 11.0], [11.7, 11.0], [11.8, 11.0], [11.9, 11.0], [12.0, 11.0], [12.1, 11.0], [12.2, 11.0], [12.3, 11.0], [12.4, 11.0], [12.5, 11.0], [12.6, 11.0], [12.7, 11.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 11.0], [13.7, 11.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 11.0], [14.2, 11.0], [14.3, 11.0], [14.4, 11.0], [14.5, 11.0], [14.6, 11.0], [14.7, 11.0], [14.8, 11.0], [14.9, 11.0], [15.0, 11.0], [15.1, 11.0], [15.2, 11.0], [15.3, 11.0], [15.4, 12.0], [15.5, 12.0], [15.6, 12.0], [15.7, 12.0], [15.8, 12.0], [15.9, 12.0], [16.0, 12.0], [16.1, 12.0], [16.2, 12.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 12.0], [17.0, 12.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 12.0], [17.5, 12.0], [17.6, 12.0], [17.7, 12.0], [17.8, 12.0], [17.9, 13.0], [18.0, 13.0], [18.1, 13.0], [18.2, 13.0], [18.3, 13.0], [18.4, 13.0], [18.5, 13.0], [18.6, 13.0], [18.7, 13.0], [18.8, 13.0], [18.9, 13.0], [19.0, 13.0], [19.1, 14.0], [19.2, 14.0], [19.3, 14.0], [19.4, 14.0], [19.5, 14.0], [19.6, 14.0], [19.7, 14.0], [19.8, 14.0], [19.9, 15.0], [20.0, 15.0], [20.1, 15.0], [20.2, 15.0], [20.3, 15.0], [20.4, 16.0], [20.5, 16.0], [20.6, 16.0], [20.7, 16.0], [20.8, 16.0], [20.9, 16.0], [21.0, 16.0], [21.1, 17.0], [21.2, 17.0], [21.3, 17.0], [21.4, 18.0], [21.5, 18.0], [21.6, 19.0], [21.7, 19.0], [21.8, 20.0], [21.9, 20.0], [22.0, 20.0], [22.1, 21.0], [22.2, 21.0], [22.3, 21.0], [22.4, 22.0], [22.5, 22.0], [22.6, 23.0], [22.7, 23.0], [22.8, 23.0], [22.9, 24.0], [23.0, 24.0], [23.1, 24.0], [23.2, 24.0], [23.3, 24.0], [23.4, 24.0], [23.5, 24.0], [23.6, 25.0], [23.7, 25.0], [23.8, 25.0], [23.9, 25.0], [24.0, 25.0], [24.1, 25.0], [24.2, 25.0], [24.3, 25.0], [24.4, 26.0], [24.5, 26.0], [24.6, 26.0], [24.7, 26.0], [24.8, 26.0], [24.9, 26.0], [25.0, 26.0], [25.1, 26.0], [25.2, 26.0], [25.3, 27.0], [25.4, 27.0], [25.5, 27.0], [25.6, 27.0], [25.7, 27.0], [25.8, 27.0], [25.9, 27.0], [26.0, 27.0], [26.1, 27.0], [26.2, 27.0], [26.3, 28.0], [26.4, 28.0], [26.5, 28.0], [26.6, 28.0], [26.7, 28.0], [26.8, 28.0], [26.9, 28.0], [27.0, 28.0], [27.1, 28.0], [27.2, 28.0], [27.3, 28.0], [27.4, 29.0], [27.5, 29.0], [27.6, 29.0], [27.7, 29.0], [27.8, 29.0], [27.9, 29.0], [28.0, 29.0], [28.1, 29.0], [28.2, 29.0], [28.3, 29.0], [28.4, 30.0], [28.5, 30.0], [28.6, 30.0], [28.7, 30.0], [28.8, 30.0], [28.9, 30.0], [29.0, 30.0], [29.1, 30.0], [29.2, 31.0], [29.3, 31.0], [29.4, 31.0], [29.5, 31.0], [29.6, 31.0], [29.7, 31.0], [29.8, 31.0], [29.9, 32.0], [30.0, 32.0], [30.1, 32.0], [30.2, 32.0], [30.3, 32.0], [30.4, 32.0], [30.5, 32.0], [30.6, 32.0], [30.7, 32.0], [30.8, 33.0], [30.9, 33.0], [31.0, 33.0], [31.1, 33.0], [31.2, 33.0], [31.3, 34.0], [31.4, 34.0], [31.5, 34.0], [31.6, 34.0], [31.7, 34.0], [31.8, 35.0], [31.9, 35.0], [32.0, 35.0], [32.1, 35.0], [32.2, 35.0], [32.3, 36.0], [32.4, 36.0], [32.5, 36.0], [32.6, 36.0], [32.7, 36.0], [32.8, 37.0], [32.9, 37.0], [33.0, 37.0], [33.1, 37.0], [33.2, 38.0], [33.3, 38.0], [33.4, 38.0], [33.5, 39.0], [33.6, 39.0], [33.7, 39.0], [33.8, 40.0], [33.9, 40.0], [34.0, 40.0], [34.1, 40.0], [34.2, 41.0], [34.3, 41.0], [34.4, 41.0], [34.5, 42.0], [34.6, 42.0], [34.7, 43.0], [34.8, 43.0], [34.9, 44.0], [35.0, 44.0], [35.1, 45.0], [35.2, 45.0], [35.3, 45.0], [35.4, 46.0], [35.5, 47.0], [35.6, 47.0], [35.7, 48.0], [35.8, 48.0], [35.9, 48.0], [36.0, 49.0], [36.1, 49.0], [36.2, 50.0], [36.3, 51.0], [36.4, 52.0], [36.5, 52.0], [36.6, 53.0], [36.7, 53.0], [36.8, 54.0], [36.9, 54.0], [37.0, 55.0], [37.1, 56.0], [37.2, 57.0], [37.3, 57.0], [37.4, 58.0], [37.5, 59.0], [37.6, 59.0], [37.7, 60.0], [37.8, 60.0], [37.9, 61.0], [38.0, 62.0], [38.1, 63.0], [38.2, 63.0], [38.3, 64.0], [38.4, 65.0], [38.5, 65.0], [38.6, 66.0], [38.7, 67.0], [38.8, 68.0], [38.9, 68.0], [39.0, 69.0], [39.1, 70.0], [39.2, 71.0], [39.3, 72.0], [39.4, 72.0], [39.5, 73.0], [39.6, 74.0], [39.7, 75.0], [39.8, 76.0], [39.9, 77.0], [40.0, 77.0], [40.1, 78.0], [40.2, 79.0], [40.3, 79.0], [40.4, 80.0], [40.5, 81.0], [40.6, 82.0], [40.7, 82.0], [40.8, 83.0], [40.9, 84.0], [41.0, 85.0], [41.1, 85.0], [41.2, 86.0], [41.3, 87.0], [41.4, 88.0], [41.5, 89.0], [41.6, 90.0], [41.7, 91.0], [41.8, 92.0], [41.9, 93.0], [42.0, 93.0], [42.1, 94.0], [42.2, 95.0], [42.3, 96.0], [42.4, 97.0], [42.5, 98.0], [42.6, 99.0], [42.7, 99.0], [42.8, 100.0], [42.9, 101.0], [43.0, 102.0], [43.1, 103.0], [43.2, 104.0], [43.3, 105.0], [43.4, 106.0], [43.5, 108.0], [43.6, 108.0], [43.7, 109.0], [43.8, 110.0], [43.9, 112.0], [44.0, 113.0], [44.1, 114.0], [44.2, 116.0], [44.3, 117.0], [44.4, 119.0], [44.5, 120.0], [44.6, 121.0], [44.7, 123.0], [44.8, 124.0], [44.9, 126.0], [45.0, 127.0], [45.1, 130.0], [45.2, 132.0], [45.3, 133.0], [45.4, 135.0], [45.5, 136.0], [45.6, 138.0], [45.7, 140.0], [45.8, 142.0], [45.9, 143.0], [46.0, 146.0], [46.1, 147.0], [46.2, 149.0], [46.3, 150.0], [46.4, 152.0], [46.5, 154.0], [46.6, 156.0], [46.7, 158.0], [46.8, 160.0], [46.9, 162.0], [47.0, 164.0], [47.1, 165.0], [47.2, 167.0], [47.3, 169.0], [47.4, 170.0], [47.5, 172.0], [47.6, 173.0], [47.7, 176.0], [47.8, 178.0], [47.9, 179.0], [48.0, 180.0], [48.1, 182.0], [48.2, 184.0], [48.3, 186.0], [48.4, 188.0], [48.5, 189.0], [48.6, 191.0], [48.7, 193.0], [48.8, 195.0], [48.9, 196.0], [49.0, 198.0], [49.1, 199.0], [49.2, 201.0], [49.3, 203.0], [49.4, 204.0], [49.5, 205.0], [49.6, 207.0], [49.7, 209.0], [49.8, 211.0], [49.9, 212.0], [50.0, 214.0], [50.1, 216.0], [50.2, 218.0], [50.3, 220.0], [50.4, 222.0], [50.5, 223.0], [50.6, 225.0], [50.7, 228.0], [50.8, 229.0], [50.9, 231.0], [51.0, 232.0], [51.1, 233.0], [51.2, 235.0], [51.3, 237.0], [51.4, 239.0], [51.5, 240.0], [51.6, 242.0], [51.7, 243.0], [51.8, 245.0], [51.9, 247.0], [52.0, 249.0], [52.1, 251.0], [52.2, 253.0], [52.3, 254.0], [52.4, 256.0], [52.5, 257.0], [52.6, 259.0], [52.7, 261.0], [52.8, 263.0], [52.9, 265.0], [53.0, 267.0], [53.1, 269.0], [53.2, 271.0], [53.3, 273.0], [53.4, 275.0], [53.5, 277.0], [53.6, 278.0], [53.7, 280.0], [53.8, 281.0], [53.9, 283.0], [54.0, 284.0], [54.1, 286.0], [54.2, 287.0], [54.3, 289.0], [54.4, 290.0], [54.5, 292.0], [54.6, 293.0], [54.7, 294.0], [54.8, 296.0], [54.9, 297.0], [55.0, 299.0], [55.1, 301.0], [55.2, 303.0], [55.3, 304.0], [55.4, 305.0], [55.5, 307.0], [55.6, 308.0], [55.7, 310.0], [55.8, 311.0], [55.9, 313.0], [56.0, 315.0], [56.1, 316.0], [56.2, 318.0], [56.3, 319.0], [56.4, 321.0], [56.5, 322.0], [56.6, 323.0], [56.7, 325.0], [56.8, 327.0], [56.9, 328.0], [57.0, 330.0], [57.1, 332.0], [57.2, 334.0], [57.3, 335.0], [57.4, 337.0], [57.5, 339.0], [57.6, 341.0], [57.7, 342.0], [57.8, 344.0], [57.9, 346.0], [58.0, 347.0], [58.1, 349.0], [58.2, 351.0], [58.3, 352.0], [58.4, 353.0], [58.5, 355.0], [58.6, 356.0], [58.7, 358.0], [58.8, 359.0], [58.9, 361.0], [59.0, 362.0], [59.1, 365.0], [59.2, 366.0], [59.3, 367.0], [59.4, 369.0], [59.5, 372.0], [59.6, 373.0], [59.7, 375.0], [59.8, 376.0], [59.9, 377.0], [60.0, 379.0], [60.1, 381.0], [60.2, 382.0], [60.3, 383.0], [60.4, 385.0], [60.5, 387.0], [60.6, 388.0], [60.7, 389.0], [60.8, 391.0], [60.9, 392.0], [61.0, 394.0], [61.1, 396.0], [61.2, 397.0], [61.3, 398.0], [61.4, 400.0], [61.5, 401.0], [61.6, 402.0], [61.7, 403.0], [61.8, 404.0], [61.9, 405.0], [62.0, 407.0], [62.1, 408.0], [62.2, 410.0], [62.3, 411.0], [62.4, 413.0], [62.5, 414.0], [62.6, 415.0], [62.7, 416.0], [62.8, 418.0], [62.9, 419.0], [63.0, 420.0], [63.1, 422.0], [63.2, 423.0], [63.3, 424.0], [63.4, 426.0], [63.5, 427.0], [63.6, 429.0], [63.7, 430.0], [63.8, 432.0], [63.9, 433.0], [64.0, 435.0], [64.1, 436.0], [64.2, 438.0], [64.3, 439.0], [64.4, 440.0], [64.5, 442.0], [64.6, 443.0], [64.7, 444.0], [64.8, 445.0], [64.9, 447.0], [65.0, 448.0], [65.1, 450.0], [65.2, 451.0], [65.3, 452.0], [65.4, 454.0], [65.5, 455.0], [65.6, 457.0], [65.7, 459.0], [65.8, 460.0], [65.9, 461.0], [66.0, 463.0], [66.1, 465.0], [66.2, 467.0], [66.3, 468.0], [66.4, 470.0], [66.5, 471.0], [66.6, 472.0], [66.7, 474.0], [66.8, 475.0], [66.9, 476.0], [67.0, 478.0], [67.1, 479.0], [67.2, 481.0], [67.3, 482.0], [67.4, 484.0], [67.5, 485.0], [67.6, 486.0], [67.7, 487.0], [67.8, 488.0], [67.9, 489.0], [68.0, 491.0], [68.1, 492.0], [68.2, 494.0], [68.3, 495.0], [68.4, 496.0], [68.5, 497.0], [68.6, 498.0], [68.7, 500.0], [68.8, 501.0], [68.9, 502.0], [69.0, 503.0], [69.1, 504.0], [69.2, 506.0], [69.3, 507.0], [69.4, 509.0], [69.5, 510.0], [69.6, 511.0], [69.7, 513.0], [69.8, 514.0], [69.9, 515.0], [70.0, 516.0], [70.1, 517.0], [70.2, 519.0], [70.3, 520.0], [70.4, 522.0], [70.5, 523.0], [70.6, 524.0], [70.7, 525.0], [70.8, 527.0], [70.9, 529.0], [71.0, 530.0], [71.1, 531.0], [71.2, 532.0], [71.3, 534.0], [71.4, 536.0], [71.5, 537.0], [71.6, 538.0], [71.7, 539.0], [71.8, 540.0], [71.9, 541.0], [72.0, 543.0], [72.1, 544.0], [72.2, 545.0], [72.3, 546.0], [72.4, 548.0], [72.5, 549.0], [72.6, 550.0], [72.7, 551.0], [72.8, 552.0], [72.9, 553.0], [73.0, 555.0], [73.1, 556.0], [73.2, 558.0], [73.3, 559.0], [73.4, 560.0], [73.5, 561.0], [73.6, 562.0], [73.7, 564.0], [73.8, 565.0], [73.9, 566.0], [74.0, 567.0], [74.1, 568.0], [74.2, 569.0], [74.3, 570.0], [74.4, 572.0], [74.5, 573.0], [74.6, 574.0], [74.7, 575.0], [74.8, 576.0], [74.9, 577.0], [75.0, 579.0], [75.1, 580.0], [75.2, 581.0], [75.3, 582.0], [75.4, 583.0], [75.5, 585.0], [75.6, 586.0], [75.7, 588.0], [75.8, 588.0], [75.9, 589.0], [76.0, 590.0], [76.1, 591.0], [76.2, 592.0], [76.3, 594.0], [76.4, 595.0], [76.5, 596.0], [76.6, 598.0], [76.7, 599.0], [76.8, 600.0], [76.9, 601.0], [77.0, 602.0], [77.1, 604.0], [77.2, 605.0], [77.3, 607.0], [77.4, 608.0], [77.5, 609.0], [77.6, 610.0], [77.7, 611.0], [77.8, 612.0], [77.9, 613.0], [78.0, 615.0], [78.1, 616.0], [78.2, 617.0], [78.3, 619.0], [78.4, 620.0], [78.5, 621.0], [78.6, 622.0], [78.7, 624.0], [78.8, 625.0], [78.9, 626.0], [79.0, 628.0], [79.1, 629.0], [79.2, 630.0], [79.3, 631.0], [79.4, 632.0], [79.5, 633.0], [79.6, 635.0], [79.7, 636.0], [79.8, 637.0], [79.9, 638.0], [80.0, 639.0], [80.1, 640.0], [80.2, 642.0], [80.3, 643.0], [80.4, 644.0], [80.5, 646.0], [80.6, 647.0], [80.7, 648.0], [80.8, 650.0], [80.9, 651.0], [81.0, 652.0], [81.1, 653.0], [81.2, 654.0], [81.3, 656.0], [81.4, 657.0], [81.5, 659.0], [81.6, 660.0], [81.7, 662.0], [81.8, 663.0], [81.9, 664.0], [82.0, 666.0], [82.1, 667.0], [82.2, 668.0], [82.3, 670.0], [82.4, 671.0], [82.5, 672.0], [82.6, 674.0], [82.7, 675.0], [82.8, 676.0], [82.9, 678.0], [83.0, 679.0], [83.1, 681.0], [83.2, 682.0], [83.3, 683.0], [83.4, 685.0], [83.5, 687.0], [83.6, 689.0], [83.7, 690.0], [83.8, 691.0], [83.9, 693.0], [84.0, 695.0], [84.1, 696.0], [84.2, 698.0], [84.3, 699.0], [84.4, 700.0], [84.5, 702.0], [84.6, 703.0], [84.7, 704.0], [84.8, 706.0], [84.9, 707.0], [85.0, 710.0], [85.1, 711.0], [85.2, 712.0], [85.3, 714.0], [85.4, 716.0], [85.5, 717.0], [85.6, 719.0], [85.7, 721.0], [85.8, 723.0], [85.9, 725.0], [86.0, 727.0], [86.1, 729.0], [86.2, 730.0], [86.3, 732.0], [86.4, 733.0], [86.5, 735.0], [86.6, 736.0], [86.7, 737.0], [86.8, 739.0], [86.9, 740.0], [87.0, 742.0], [87.1, 744.0], [87.2, 745.0], [87.3, 747.0], [87.4, 748.0], [87.5, 750.0], [87.6, 751.0], [87.7, 753.0], [87.8, 755.0], [87.9, 757.0], [88.0, 758.0], [88.1, 760.0], [88.2, 761.0], [88.3, 764.0], [88.4, 766.0], [88.5, 768.0], [88.6, 770.0], [88.7, 772.0], [88.8, 774.0], [88.9, 776.0], [89.0, 778.0], [89.1, 780.0], [89.2, 782.0], [89.3, 783.0], [89.4, 785.0], [89.5, 788.0], [89.6, 790.0], [89.7, 792.0], [89.8, 793.0], [89.9, 795.0], [90.0, 797.0], [90.1, 799.0], [90.2, 801.0], [90.3, 802.0], [90.4, 804.0], [90.5, 807.0], [90.6, 810.0], [90.7, 812.0], [90.8, 815.0], [90.9, 816.0], [91.0, 819.0], [91.1, 821.0], [91.2, 823.0], [91.3, 825.0], [91.4, 828.0], [91.5, 830.0], [91.6, 832.0], [91.7, 835.0], [91.8, 837.0], [91.9, 839.0], [92.0, 841.0], [92.1, 844.0], [92.2, 846.0], [92.3, 849.0], [92.4, 851.0], [92.5, 854.0], [92.6, 857.0], [92.7, 860.0], [92.8, 863.0], [92.9, 864.0], [93.0, 868.0], [93.1, 871.0], [93.2, 874.0], [93.3, 877.0], [93.4, 880.0], [93.5, 882.0], [93.6, 885.0], [93.7, 888.0], [93.8, 891.0], [93.9, 894.0], [94.0, 897.0], [94.1, 900.0], [94.2, 902.0], [94.3, 904.0], [94.4, 909.0], [94.5, 912.0], [94.6, 916.0], [94.7, 919.0], [94.8, 923.0], [94.9, 926.0], [95.0, 929.0], [95.1, 933.0], [95.2, 936.0], [95.3, 939.0], [95.4, 941.0], [95.5, 945.0], [95.6, 949.0], [95.7, 952.0], [95.8, 955.0], [95.9, 959.0], [96.0, 964.0], [96.1, 969.0], [96.2, 974.0], [96.3, 977.0], [96.4, 981.0], [96.5, 984.0], [96.6, 990.0], [96.7, 993.0], [96.8, 998.0], [96.9, 1002.0], [97.0, 1004.0], [97.1, 1008.0], [97.2, 1014.0], [97.3, 1019.0], [97.4, 1023.0], [97.5, 1027.0], [97.6, 1029.0], [97.7, 1035.0], [97.8, 1040.0], [97.9, 1045.0], [98.0, 1051.0], [98.1, 1057.0], [98.2, 1065.0], [98.3, 1073.0], [98.4, 1079.0], [98.5, 1090.0], [98.6, 1102.0], [98.7, 1112.0], [98.8, 1123.0], [98.9, 1138.0], [99.0, 1162.0], [99.1, 1178.0], [99.2, 1200.0], [99.3, 1219.0], [99.4, 1248.0], [99.5, 1278.0], [99.6, 1313.0], [99.7, 1395.0], [99.8, 1487.0], [99.9, 1616.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 11519.0, "series": [{"data": [[600.0, 15.0], [700.0, 21.0], [800.0, 53.0], [900.0, 35.0], [1000.0, 32.0], [1100.0, 36.0], [1200.0, 44.0], [1300.0, 56.0], [1400.0, 64.0], [1500.0, 73.0], [1600.0, 102.0], [1700.0, 138.0], [1800.0, 182.0], [1900.0, 239.0], [2000.0, 361.0], [2100.0, 543.0], [2300.0, 741.0], [2200.0, 652.0], [2400.0, 873.0], [2500.0, 886.0], [2600.0, 808.0], [2800.0, 710.0], [2700.0, 755.0], [2900.0, 771.0], [3000.0, 759.0], [3100.0, 890.0], [3200.0, 961.0], [3300.0, 1136.0], [3400.0, 1291.0], [3500.0, 1385.0], [3700.0, 1372.0], [3600.0, 1417.0], [3800.0, 1407.0], [3900.0, 1338.0], [4000.0, 1168.0], [4200.0, 883.0], [4100.0, 1046.0], [4300.0, 800.0], [4400.0, 638.0], [4500.0, 489.0], [4600.0, 450.0], [4700.0, 322.0], [4800.0, 258.0], [4900.0, 184.0], [5100.0, 96.0], [5000.0, 114.0], [5200.0, 76.0], [5300.0, 59.0], [5400.0, 40.0], [5500.0, 36.0], [5600.0, 19.0], [5700.0, 16.0], [5800.0, 11.0], [6000.0, 10.0], [6100.0, 6.0], [5900.0, 6.0], [6200.0, 4.0], [6300.0, 2.0], [6500.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [6800.0, 1.0], [7700.0, 1.0], [10200.0, 1.0], [11200.0, 1.0], [12600.0, 1.0], [14400.0, 1.0], [15300.0, 1.0], [19700.0, 1.0], [100.0, 3.0], [200.0, 20.0], [300.0, 24.0], [400.0, 13.0], [500.0, 4.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[0.0, 11519.0], [600.0, 2040.0], [700.0, 1560.0], [800.0, 1071.0], [900.0, 742.0], [1000.0, 470.0], [1100.0, 163.0], [1200.0, 104.0], [1300.0, 34.0], [1400.0, 28.0], [1500.0, 22.0], [100.0, 1722.0], [1600.0, 8.0], [1700.0, 3.0], [1800.0, 4.0], [1900.0, 2.0], [2100.0, 3.0], [2200.0, 1.0], [2300.0, 2.0], [2400.0, 1.0], [2500.0, 2.0], [200.0, 1595.0], [4000.0, 1.0], [4500.0, 1.0], [300.0, 1718.0], [4700.0, 1.0], [400.0, 1971.0], [500.0, 2179.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8571.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 20080.0, "series": [{"data": [[0.0, 10970.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8571.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14300.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 20080.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 19.11897106109326, "minX": 1.7013165E12, "maxY": 120.0, "series": [{"data": [[1.7013171E12, 120.0], [1.7013174E12, 116.54263565891463], [1.70131674E12, 120.0], [1.70131704E12, 120.0], [1.70131734E12, 120.0], [1.70131668E12, 120.0], [1.70131698E12, 120.0], [1.70131728E12, 120.0], [1.70131692E12, 120.0], [1.70131662E12, 111.01429727542516], [1.70131722E12, 120.0], [1.70131656E12, 63.45744680851067], [1.70131686E12, 120.0], [1.70131716E12, 120.0], [1.7013168E12, 120.0], [1.7013165E12, 19.11897106109326]], "isOverall": false, "label": "OnlineConversion", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7013174E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 21.2, "minX": 1.0, "maxY": 4576.75, "series": [{"data": [[2.0, 4045.0], [3.0, 3629.0], [4.0, 3170.0], [5.0, 2881.0], [6.0, 3272.0], [7.0, 2664.6666666666665], [8.0, 2630.5], [9.0, 2848.0], [10.0, 2715.5], [11.0, 2707.0], [12.0, 2435.3333333333335], [13.0, 2704.6666666666665], [14.0, 2061.0], [15.0, 2219.6363636363635], [16.0, 1866.0], [17.0, 1771.8], [18.0, 2613.1250000000005], [19.0, 1732.75], [20.0, 1807.0], [21.0, 1909.75], [22.0, 2561.166666666667], [23.0, 2195.0], [24.0, 2609.0], [25.0, 2677.2], [26.0, 2457.6], [27.0, 2739.4], [28.0, 4576.75], [29.0, 2918.25], [30.0, 2892.75], [31.0, 2907.076923076923], [32.0, 2739.25], [33.0, 2709.1111111111113], [34.0, 3473.4166666666665], [35.0, 3072.0], [36.0, 2856.2666666666664], [37.0, 2926.4], [38.0, 2246.3571428571427], [39.0, 3326.722222222222], [40.0, 2689.2727272727275], [41.0, 2392.6428571428573], [42.0, 2459.9230769230767], [43.0, 2730.8], [44.0, 2072.6315789473683], [45.0, 2427.0], [46.0, 1903.5624999999998], [47.0, 2498.411764705882], [48.0, 2831.5789473684204], [49.0, 2290.2105263157896], [50.0, 2581.8], [51.0, 2057.391304347826], [52.0, 1968.1111111111113], [53.0, 1849.4285714285713], [54.0, 2399.7948717948725], [55.0, 1893.4444444444446], [56.0, 1236.95], [57.0, 2257.1470588235293], [58.0, 2112.961538461538], [59.0, 2004.516129032258], [60.0, 1862.7999999999997], [61.0, 2224.84375], [62.0, 1831.6250000000002], [63.0, 2461.5], [64.0, 1984.9583333333335], [65.0, 3082.8235294117644], [66.0, 2092.8387096774195], [67.0, 1866.7142857142858], [68.0, 1075.0666666666664], [69.0, 2863.027777777778], [70.0, 2701.4857142857136], [71.0, 2569.857142857143], [72.0, 1379.611111111111], [73.0, 1549.1470588235293], [74.0, 3690.947368421053], [75.0, 2644.6206896551726], [76.0, 2532.882352941177], [77.0, 2232.4047619047615], [78.0, 2205.264705882352], [79.0, 2732.323529411765], [80.0, 2240.142857142857], [81.0, 2355.2380952380954], [82.0, 2028.8055555555557], [83.0, 2328.837837837838], [84.0, 2939.0909090909095], [85.0, 2555.6923076923076], [86.0, 2400.5333333333338], [87.0, 2499.594594594594], [88.0, 2740.607142857143], [89.0, 2442.054054054054], [90.0, 2717.565217391305], [91.0, 2476.5365853658536], [92.0, 2785.5151515151515], [93.0, 2567.6250000000005], [94.0, 2583.9761904761904], [95.0, 3113.608695652174], [96.0, 2624.625], [97.0, 2713.25], [98.0, 2910.833333333333], [99.0, 2759.028571428571], [100.0, 2764.740740740741], [101.0, 3150.666666666667], [102.0, 2799.694444444445], [103.0, 2931.2000000000007], [104.0, 2824.673913043479], [105.0, 2944.7666666666664], [106.0, 3264.0000000000005], [107.0, 2985.1363636363635], [108.0, 3159.6285714285714], [109.0, 3427.4782608695655], [110.0, 2926.962962962963], [111.0, 3566.9999999999995], [112.0, 3125.526315789474], [113.0, 2943.3181818181815], [114.0, 3406.513513513513], [115.0, 3847.1500000000005], [116.0, 3024.5666666666666], [117.0, 3113.26530612245], [118.0, 3843.476190476191], [119.0, 3255.230769230769], [120.0, 3500.4494602551563], [1.0, 4326.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[115.9028344587079, 3417.515693403589]], "isOverall": false, "label": "Cargar Tareas-Aggregated", "isController": false}, {"data": [[2.0, 72.0], [3.0, 88.0], [4.0, 262.5], [5.0, 156.0], [6.0, 116.5], [7.0, 76.0], [8.0, 1246.857142857143], [9.0, 143.0], [10.0, 97.0], [12.0, 33.666666666666664], [13.0, 895.9], [14.0, 93.66666666666666], [15.0, 64.36363636363636], [16.0, 63.75], [17.0, 196.11111111111114], [18.0, 590.1111111111112], [19.0, 125.54545454545456], [20.0, 132.0], [21.0, 141.5], [22.0, 148.57142857142856], [23.0, 270.3333333333333], [24.0, 221.99999999999997], [25.0, 172.2], [26.0, 468.66666666666663], [27.0, 433.14285714285717], [28.0, 273.2], [29.0, 241.2857142857143], [30.0, 229.16666666666669], [31.0, 274.7142857142857], [32.0, 605.5714285714286], [33.0, 514.2727272727273], [34.0, 251.99999999999997], [35.0, 207.33333333333331], [36.0, 343.2222222222222], [37.0, 124.83333333333333], [38.0, 259.00000000000006], [39.0, 152.6153846153846], [40.0, 179.46666666666667], [41.0, 296.42857142857144], [42.0, 105.6923076923077], [43.0, 109.52941176470588], [44.0, 107.84210526315788], [45.0, 105.6923076923077], [46.0, 584.3684210526316], [47.0, 74.05882352941177], [48.0, 148.76470588235293], [49.0, 585.9333333333333], [50.0, 215.75757575757575], [51.0, 79.77777777777779], [52.0, 142.5], [53.0, 368.4444444444445], [54.0, 255.90243902439022], [55.0, 108.26315789473685], [56.0, 98.6923076923077], [57.0, 138.23076923076928], [58.0, 149.95238095238096], [59.0, 241.53571428571425], [60.0, 311.25000000000006], [61.0, 368.5151515151514], [62.0, 358.1290322580645], [63.0, 296.8095238095238], [64.0, 384.6111111111111], [65.0, 379.27906976744185], [66.0, 60.87878787878787], [67.0, 101.84615384615384], [68.0, 21.2], [69.0, 618.0], [70.0, 322.21311475409834], [71.0, 89.9375], [72.0, 37.86666666666666], [73.0, 67.50000000000001], [74.0, 511.0999999999999], [75.0, 400.09756097560967], [76.0, 94.58823529411765], [77.0, 174.71875], [78.0, 336.1428571428571], [79.0, 322.97058823529414], [80.0, 244.21621621621622], [81.0, 100.8], [82.0, 105.27999999999999], [83.0, 331.5277777777778], [84.0, 363.91489361702145], [85.0, 132.31034482758622], [86.0, 181.9], [87.0, 449.027027027027], [88.0, 455.5555555555556], [89.0, 403.9777777777778], [90.0, 520.7499999999999], [91.0, 311.1621621621622], [92.0, 372.82926829268297], [93.0, 258.3], [94.0, 386.42], [95.0, 469.5652173913044], [96.0, 142.21428571428572], [97.0, 473.5806451612903], [98.0, 449.0882352941177], [99.0, 320.7179487179488], [100.0, 477.4347826086957], [101.0, 367.90624999999994], [102.0, 389.3636363636364], [103.0, 393.775], [104.0, 152.84375000000003], [105.0, 622.3513513513512], [106.0, 364.5862068965517], [107.0, 282.45], [108.0, 295.1], [109.0, 242.88235294117646], [110.0, 213.47916666666666], [111.0, 593.3437500000001], [112.0, 305.8064516129033], [113.0, 312.5882352941177], [114.0, 303.6857142857142], [115.0, 299.71428571428567], [116.0, 156.35], [117.0, 370.5849056603773], [118.0, 569.657894736842], [119.0, 132.15384615384616], [120.0, 326.1714390902407], [1.0, 667.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[115.91333852486345, 324.05933177587383]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 120.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2639.9166666666665, "minX": 1.7013165E12, "maxY": 5.0588981893333334E8, "series": [{"data": [[1.7013171E12, 32709.1], [1.7013174E12, 17749.966666666667], [1.70131674E12, 33332.85], [1.70131704E12, 32480.3], [1.70131734E12, 32098.383333333335], [1.70131668E12, 32392.716666666667], [1.70131698E12, 32682.916666666668], [1.70131728E12, 31977.5], [1.70131692E12, 32753.366666666665], [1.70131662E12, 31972.55], [1.70131722E12, 32294.15], [1.70131656E12, 22482.583333333332], [1.70131686E12, 32778.71666666667], [1.70131716E12, 32678.183333333334], [1.7013168E12, 32257.416666666668], [1.7013165E12, 2639.9166666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7013171E12, 4.974671144166667E8], [1.7013174E12, 2.8558277671666664E8], [1.70131674E12, 5.0588981893333334E8], [1.70131704E12, 4.953614017E8], [1.70131734E12, 4.8720216955E8], [1.70131668E12, 4.9694066803333336E8], [1.70131698E12, 4.9983590285E8], [1.70131728E12, 4.8562292765E8], [1.70131692E12, 4.9799373855E8], [1.70131662E12, 4.8220121006666666E8], [1.70131722E12, 4.9299239556666666E8], [1.70131656E12, 3.400685151E8], [1.70131686E12, 4.972041059E8], [1.70131716E12, 4.9983608196666664E8], [1.7013168E12, 4.929925848666667E8], [1.7013165E12, 3.7376132833333336E7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7013174E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 256.22611940298515, "minX": 1.7013165E12, "maxY": 3569.1073170731747, "series": [{"data": [[1.7013171E12, 3494.944973544973], [1.7013174E12, 3547.2635944700405], [1.70131674E12, 3404.4812695109263], [1.70131704E12, 3498.3437832093496], [1.70131734E12, 3522.297136682869], [1.70131668E12, 3506.426377118647], [1.70131698E12, 3511.970510795159], [1.70131728E12, 3569.1073170731747], [1.70131692E12, 3477.576109936569], [1.70131662E12, 3231.5463973799115], [1.70131722E12, 3514.0432461292025], [1.70131656E12, 2368.0239938080554], [1.70131686E12, 3456.8009528851267], [1.70131716E12, 3465.07372301211], [1.7013168E12, 3502.499733048581], [1.7013165E12, 2315.098591549295]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.7013171E12, 319.60105540897086], [1.7013174E12, 338.6956077630236], [1.70131674E12, 336.52259740259814], [1.70131704E12, 312.3529411764703], [1.70131734E12, 354.4832974137932], [1.70131668E12, 322.51711229946534], [1.70131698E12, 294.7944768985659], [1.70131728E12, 345.54805615550725], [1.70131692E12, 326.3257894736842], [1.70131662E12, 333.5594666666665], [1.70131722E12, 306.6506410256413], [1.70131656E12, 256.22611940298515], [1.70131686E12, 358.00423280423274], [1.70131716E12, 332.04437400950934], [1.7013168E12, 313.59542796384846], [1.7013165E12, 298.73964497041425]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7013174E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 256.2074626865673, "minX": 1.7013165E12, "maxY": 3569.0964769647685, "series": [{"data": [[1.7013171E12, 3494.916931216934], [1.7013174E12, 3547.2580645161324], [1.70131674E12, 3404.4594172736665], [1.70131704E12, 3498.3304994686496], [1.70131734E12, 3522.273365748242], [1.70131668E12, 3506.364936440683], [1.70131698E12, 3511.9552395997885], [1.70131728E12, 3569.0964769647685], [1.70131692E12, 3477.5496828752557], [1.70131662E12, 3231.518558951966], [1.70131722E12, 3514.0357714895886], [1.70131656E12, 2368.0000000000005], [1.70131686E12, 3456.789835892009], [1.70131716E12, 3464.969457609263], [1.7013168E12, 3502.4644954618307], [1.7013165E12, 2315.0352112676046]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.7013171E12, 319.5873350923486], [1.7013174E12, 338.68335035750783], [1.70131674E12, 336.5116883116889], [1.70131704E12, 312.3418124006361], [1.70131734E12, 354.3744612068958], [1.70131668E12, 322.44705882352946], [1.70131698E12, 294.78013807753587], [1.70131728E12, 345.53671706263503], [1.70131692E12, 326.3063157894743], [1.70131662E12, 333.5360000000002], [1.70131722E12, 306.63995726495745], [1.70131656E12, 256.2074626865673], [1.70131686E12, 357.99312169312185], [1.70131716E12, 332.0316957210778], [1.7013168E12, 313.5773524720897], [1.7013165E12, 298.64497041420117]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7013174E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7013165E12, "maxY": 15.948800000000045, "series": [{"data": [[1.7013171E12, 0.0698412698412697], [1.7013174E12, 0.33732718894009206], [1.70131674E12, 0.8532778355879307], [1.70131704E12, 1.2507970244420836], [1.70131734E12, 0.31874662344678595], [1.70131668E12, 1.0630296610169474], [1.70131698E12, 0.8604528699315429], [1.70131728E12, 0.47588075880758857], [1.70131692E12, 0.22251585623678644], [1.70131662E12, 0.656113537117904], [1.70131722E12, 0.15483182060864933], [1.70131656E12, 0.1733746130030959], [1.70131686E12, 0.38962413975648463], [1.70131716E12, 0.26224328593996926], [1.7013168E12, 0.8873465029364658], [1.7013165E12, 0.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.7013171E12, 6.2274406332453776], [1.7013174E12, 5.554647599591427], [1.70131674E12, 7.281558441558435], [1.70131704E12, 6.5405405405405475], [1.70131734E12, 5.513469827586212], [1.70131668E12, 9.436363636363636], [1.70131698E12, 6.402549123738711], [1.70131728E12, 4.497840172786176], [1.70131692E12, 6.618421052631589], [1.70131662E12, 15.948800000000045], [1.70131722E12, 5.479166666666661], [1.70131656E12, 7.276865671641796], [1.70131686E12, 7.16825396825396], [1.70131716E12, 6.554146856840996], [1.7013168E12, 7.509303561935145], [1.7013165E12, 7.5739644970414215]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7013174E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.7013165E12, "maxY": 19722.0, "series": [{"data": [[1.7013171E12, 10256.0], [1.7013174E12, 6018.0], [1.70131674E12, 5645.0], [1.70131704E12, 6181.0], [1.70131734E12, 6038.0], [1.70131668E12, 6005.0], [1.70131698E12, 6324.0], [1.70131728E12, 6846.0], [1.70131692E12, 6175.0], [1.70131662E12, 6198.0], [1.70131722E12, 7789.0], [1.70131656E12, 15369.0], [1.70131686E12, 5708.0], [1.70131716E12, 5837.0], [1.7013168E12, 5962.0], [1.7013165E12, 19722.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7013171E12, 4233.0], [1.7013174E12, 4259.6], [1.70131674E12, 4093.6], [1.70131704E12, 4135.0], [1.70131734E12, 4115.200000000001], [1.70131668E12, 4254.5], [1.70131698E12, 4148.0], [1.70131728E12, 4255.4], [1.70131692E12, 4139.0], [1.70131662E12, 4045.0], [1.70131722E12, 4191.0], [1.70131656E12, 3466.0], [1.70131686E12, 4140.0], [1.70131716E12, 4127.0], [1.7013168E12, 4192.700000000001], [1.7013165E12, 2975.800000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7013171E12, 5189.12], [1.7013174E12, 5392.880000000001], [1.70131674E12, 4991.32], [1.70131704E12, 5214.400000000003], [1.70131734E12, 4919.12], [1.70131668E12, 5180.1500000000015], [1.70131698E12, 5198.560000000001], [1.70131728E12, 5301.52], [1.70131692E12, 5028.55], [1.70131662E12, 5308.09], [1.70131722E12, 5068.689999999995], [1.70131656E12, 4845.999999999998], [1.70131686E12, 5016.5], [1.70131716E12, 5104.399999999996], [1.7013168E12, 5026.489999999996], [1.7013165E12, 4764.439999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7013171E12, 4603.0], [1.7013174E12, 4646.9], [1.70131674E12, 4460.199999999999], [1.70131704E12, 4533.5], [1.70131734E12, 4381.4], [1.70131668E12, 4608.5], [1.70131698E12, 4504.199999999999], [1.70131728E12, 4570.2], [1.70131692E12, 4507.25], [1.70131662E12, 4448.149999999999], [1.70131722E12, 4520.549999999999], [1.70131656E12, 3933.0], [1.70131686E12, 4429.5], [1.70131716E12, 4487.7], [1.7013168E12, 4497.85], [1.7013165E12, 3758.9999999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7013171E12, 23.0], [1.7013174E12, 22.0], [1.70131674E12, 20.0], [1.70131704E12, 22.0], [1.70131734E12, 20.0], [1.70131668E12, 24.0], [1.70131698E12, 24.0], [1.70131728E12, 22.0], [1.70131692E12, 23.0], [1.70131662E12, 21.0], [1.70131722E12, 20.0], [1.70131656E12, 20.0], [1.70131686E12, 22.0], [1.70131716E12, 22.0], [1.7013168E12, 23.0], [1.7013165E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7013171E12, 832.0], [1.7013174E12, 909.0], [1.70131674E12, 864.0], [1.70131704E12, 780.0], [1.70131734E12, 777.0], [1.70131668E12, 863.5], [1.70131698E12, 764.0], [1.70131728E12, 851.0], [1.70131692E12, 814.0], [1.70131662E12, 846.0], [1.70131722E12, 765.0], [1.70131656E12, 806.0], [1.70131686E12, 810.0], [1.70131716E12, 804.0], [1.7013168E12, 793.5], [1.7013165E12, 772.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7013174E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 4256.0, "series": [{"data": [[2.0, 1173.5], [3.0, 156.0], [4.0, 568.0], [5.0, 1314.5], [6.0, 151.5], [9.0, 985.0], [10.0, 933.0], [11.0, 376.0], [12.0, 623.0], [13.0, 428.0], [14.0, 2598.5], [15.0, 902.0], [16.0, 1118.0], [18.0, 526.0], [19.0, 782.0], [21.0, 699.0], [22.0, 1388.5], [24.0, 743.5], [25.0, 724.0], [26.0, 506.0], [27.0, 2875.0], [28.0, 429.0], [29.0, 708.5], [30.0, 842.0], [31.0, 2810.0], [32.0, 876.0], [33.0, 2283.5], [35.0, 730.5], [36.0, 658.5], [37.0, 704.0], [38.0, 561.5], [39.0, 918.0], [40.0, 444.5], [41.0, 694.5], [43.0, 510.0], [42.0, 788.5], [44.0, 398.0], [45.0, 708.5], [47.0, 725.5], [46.0, 628.0], [48.0, 656.0], [49.0, 673.0], [50.0, 768.0], [51.0, 625.0], [52.0, 764.0], [53.0, 505.0], [55.0, 726.0], [54.0, 806.5], [57.0, 802.0], [56.0, 780.0], [58.0, 688.0], [59.0, 720.5], [60.0, 706.5], [61.0, 775.0], [63.0, 793.0], [62.0, 765.0], [65.0, 772.5], [66.0, 832.0], [64.0, 748.0], [67.0, 711.0], [69.0, 669.5], [68.0, 918.0], [70.0, 799.0], [71.0, 775.0], [73.0, 858.0], [72.0, 930.0], [75.0, 818.5], [74.0, 802.0], [79.0, 648.0], [76.0, 962.0], [78.0, 992.0], [77.0, 865.0], [83.0, 2618.0], [81.0, 853.0], [80.0, 860.5], [82.0, 1022.5], [84.0, 3020.5], [85.0, 2960.0], [87.0, 873.5], [86.0, 818.5], [90.0, 3031.0], [89.0, 900.5], [91.0, 1156.0], [88.0, 3305.0], [95.0, 1168.0], [94.0, 3730.0], [93.0, 3170.5], [98.0, 3356.5], [99.0, 3170.0], [97.0, 998.0], [102.0, 3974.0], [101.0, 3897.0], [104.0, 3714.0], [105.0, 2957.0], [108.0, 3610.0], [114.0, 3431.0], [113.0, 2022.0], [125.0, 4256.0], [1.0, 235.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[14.0, 3631.5], [22.0, 3801.5], [25.0, 3282.0], [26.0, 506.0], [27.0, 2609.0], [28.0, 3150.0], [29.0, 3503.0], [30.0, 3038.0], [31.0, 2898.0], [33.0, 2868.0], [32.0, 3627.0], [35.0, 3103.0], [36.0, 3212.0], [37.0, 3203.0], [39.0, 4038.0], [38.0, 2984.5], [40.0, 3924.0], [41.0, 3621.0], [42.0, 2704.5], [43.0, 3688.5], [45.0, 3330.0], [44.0, 3716.0], [47.0, 3203.0], [46.0, 3638.5], [48.0, 3443.0], [49.0, 2824.0], [50.0, 2373.0], [51.0, 3343.0], [52.0, 2660.0], [53.0, 3596.0], [55.0, 2657.0], [54.0, 2619.5], [57.0, 2453.0], [56.0, 2600.0], [58.0, 2616.0], [59.0, 2536.0], [61.0, 2337.5], [60.0, 2661.5], [63.0, 2314.5], [62.0, 2522.0], [65.0, 2191.0], [66.0, 2438.0], [64.0, 2565.0], [67.0, 2570.0], [69.0, 2432.0], [68.0, 2273.0], [70.0, 2283.0], [71.0, 2292.0], [72.0, 2109.5], [75.0, 2380.5], [74.0, 2412.0], [73.0, 2277.0], [79.0, 2306.0], [76.0, 1926.5], [78.0, 2250.0], [77.0, 2247.5], [83.0, 1408.0], [81.0, 2225.0], [80.0, 2185.0], [82.0, 1879.5], [84.0, 1667.0], [85.0, 335.5], [87.0, 1908.0], [86.0, 2285.0], [90.0, 2176.0], [89.0, 2106.0], [91.0, 317.5], [88.0, 48.0], [95.0, 1973.0], [94.0, 37.0], [93.0, 1696.0], [98.0, 76.0], [99.0, 84.0], [97.0, 39.0], [102.0, 68.0], [101.0, 66.5], [104.0, 1019.5], [105.0, 2131.0], [108.0, 28.0], [114.0, 56.5], [113.0, 237.0], [125.0, 59.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 125.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 4256.0, "series": [{"data": [[2.0, 1169.0], [3.0, 156.0], [4.0, 568.0], [5.0, 1314.0], [6.0, 151.5], [9.0, 985.0], [10.0, 933.0], [11.0, 376.0], [12.0, 623.0], [13.0, 428.0], [14.0, 2598.5], [15.0, 902.0], [16.0, 1118.0], [18.0, 526.0], [19.0, 782.0], [21.0, 699.0], [22.0, 1388.5], [24.0, 743.5], [25.0, 724.0], [26.0, 505.0], [27.0, 2875.0], [28.0, 429.0], [29.0, 708.0], [30.0, 842.0], [31.0, 2810.0], [32.0, 876.0], [33.0, 2283.5], [35.0, 730.5], [36.0, 658.5], [37.0, 704.0], [38.0, 561.5], [39.0, 918.0], [40.0, 444.5], [41.0, 694.5], [43.0, 510.0], [42.0, 788.5], [44.0, 398.0], [45.0, 708.5], [47.0, 725.5], [46.0, 628.0], [48.0, 656.0], [49.0, 673.0], [50.0, 768.0], [51.0, 625.0], [52.0, 764.0], [53.0, 505.0], [55.0, 726.0], [54.0, 806.5], [57.0, 802.0], [56.0, 780.0], [58.0, 688.0], [59.0, 720.5], [60.0, 706.5], [61.0, 775.0], [63.0, 793.0], [62.0, 765.0], [65.0, 772.5], [66.0, 832.0], [64.0, 748.0], [67.0, 710.5], [69.0, 669.5], [68.0, 918.0], [70.0, 799.0], [71.0, 775.0], [73.0, 858.0], [72.0, 930.0], [75.0, 818.5], [74.0, 802.0], [79.0, 648.0], [76.0, 962.0], [78.0, 992.0], [77.0, 865.0], [83.0, 2618.0], [81.0, 853.0], [80.0, 860.5], [82.0, 1022.5], [84.0, 3020.5], [85.0, 2960.0], [87.0, 873.5], [86.0, 818.5], [90.0, 3031.0], [89.0, 900.5], [91.0, 1156.0], [88.0, 3305.0], [95.0, 1168.0], [94.0, 3730.0], [93.0, 3170.5], [98.0, 3356.5], [99.0, 3170.0], [97.0, 998.0], [102.0, 3974.0], [101.0, 3897.0], [104.0, 3714.0], [105.0, 2957.0], [108.0, 3610.0], [114.0, 3431.0], [113.0, 2022.0], [125.0, 4256.0], [1.0, 235.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[14.0, 3631.5], [22.0, 3801.5], [25.0, 3282.0], [26.0, 506.0], [27.0, 2609.0], [28.0, 3150.0], [29.0, 3503.0], [30.0, 3038.0], [31.0, 2898.0], [33.0, 2868.0], [32.0, 3627.0], [35.0, 3103.0], [36.0, 3212.0], [37.0, 3203.0], [39.0, 4038.0], [38.0, 2984.5], [40.0, 3924.0], [41.0, 3621.0], [42.0, 2704.5], [43.0, 3688.5], [45.0, 3330.0], [44.0, 3716.0], [47.0, 3203.0], [46.0, 3638.5], [48.0, 3443.0], [49.0, 2824.0], [50.0, 2373.0], [51.0, 3343.0], [52.0, 2660.0], [53.0, 3596.0], [55.0, 2657.0], [54.0, 2619.5], [57.0, 2453.0], [56.0, 2600.0], [58.0, 2616.0], [59.0, 2536.0], [61.0, 2337.5], [60.0, 2661.5], [63.0, 2314.5], [62.0, 2522.0], [65.0, 2191.0], [66.0, 2438.0], [64.0, 2565.0], [67.0, 2570.0], [69.0, 2432.0], [68.0, 2273.0], [70.0, 2283.0], [71.0, 2292.0], [72.0, 2109.5], [75.0, 2380.5], [74.0, 2412.0], [73.0, 2277.0], [79.0, 2306.0], [76.0, 1926.5], [78.0, 2250.0], [77.0, 2247.5], [83.0, 1408.0], [81.0, 2225.0], [80.0, 2185.0], [82.0, 1879.5], [84.0, 1667.0], [85.0, 335.5], [87.0, 1908.0], [86.0, 2285.0], [90.0, 2176.0], [89.0, 2106.0], [91.0, 317.5], [88.0, 48.0], [95.0, 1973.0], [94.0, 37.0], [93.0, 1696.0], [98.0, 76.0], [99.0, 84.0], [97.0, 39.0], [102.0, 68.0], [101.0, 66.5], [104.0, 1019.5], [105.0, 2131.0], [108.0, 28.0], [114.0, 56.5], [113.0, 237.0], [125.0, 59.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 125.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.65, "minX": 1.7013165E12, "maxY": 64.11666666666666, "series": [{"data": [[1.7013171E12, 63.083333333333336], [1.7013174E12, 32.4], [1.70131674E12, 64.11666666666666], [1.70131704E12, 62.81666666666667], [1.70131734E12, 61.8], [1.70131668E12, 62.63333333333333], [1.70131698E12, 63.03333333333333], [1.70131728E12, 61.61666666666667], [1.70131692E12, 63.2], [1.70131662E12, 62.333333333333336], [1.70131722E12, 62.4], [1.70131656E12, 44.85], [1.70131686E12, 62.983333333333334], [1.70131716E12, 63.2], [1.7013168E12, 62.56666666666667], [1.7013165E12, 5.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7013174E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.1166666666666667, "minX": 1.7013165E12, "maxY": 39.95, "series": [{"data": [[1.7013171E12, 38.21666666666667], [1.7013174E12, 22.216666666666665], [1.70131674E12, 38.05], [1.70131704E12, 38.483333333333334], [1.70131734E12, 39.95], [1.70131668E12, 38.06666666666667], [1.70131698E12, 37.78333333333333], [1.70131728E12, 38.583333333333336], [1.70131692E12, 39.06666666666667], [1.70131662E12, 38.166666666666664], [1.70131722E12, 37.46666666666667], [1.70131656E12, 35.65], [1.70131686E12, 39.56666666666667], [1.70131716E12, 39.2], [1.7013168E12, 38.36666666666667], [1.7013165E12, 5.183333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7013171E12, 7.15], [1.7013174E12, 3.5166666666666666], [1.70131674E12, 7.183333333333334], [1.70131704E12, 7.266666666666667], [1.70131734E12, 6.05], [1.70131668E12, 7.2], [1.70131698E12, 7.15], [1.70131728E12, 6.4], [1.70131692E12, 6.85], [1.70131662E12, 7.133333333333334], [1.70131722E12, 7.466666666666667], [1.70131656E12, 2.1166666666666667], [1.70131686E12, 6.2], [1.70131716E12, 7.2], [1.7013168E12, 7.65]], "isOverall": false, "label": "422", "isController": false}, {"data": [[1.7013171E12, 17.716666666666665], [1.7013174E12, 8.666666666666666], [1.70131674E12, 18.883333333333333], [1.70131704E12, 17.066666666666666], [1.70131734E12, 15.783333333333333], [1.70131668E12, 17.366666666666667], [1.70131698E12, 18.1], [1.70131728E12, 16.633333333333333], [1.70131692E12, 17.283333333333335], [1.70131662E12, 16.483333333333334], [1.70131722E12, 17.483333333333334], [1.70131656E12, 6.1], [1.70131686E12, 17.216666666666665], [1.70131716E12, 16.8], [1.7013168E12, 16.55]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7013174E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.3666666666666667, "minX": 1.7013165E12, "maxY": 23.15, "series": [{"data": [[1.7013171E12, 15.483333333333333], [1.7013174E12, 8.0], [1.70131674E12, 16.1], [1.70131704E12, 15.05], [1.70131734E12, 14.05], [1.70131668E12, 15.116666666666667], [1.70131698E12, 15.566666666666666], [1.70131728E12, 14.183333333333334], [1.70131692E12, 14.916666666666666], [1.70131662E12, 14.8], [1.70131722E12, 15.3], [1.70131656E12, 4.75], [1.70131686E12, 14.833333333333334], [1.70131716E12, 14.933333333333334], [1.7013168E12, 15.183333333333334]], "isOverall": false, "label": "Cargar Tareas-failure", "isController": false}, {"data": [[1.7013171E12, 16.016666666666666], [1.7013174E12, 10.083333333333334], [1.70131674E12, 15.933333333333334], [1.70131704E12, 16.316666666666666], [1.70131734E12, 16.8], [1.70131668E12, 16.35], [1.70131698E12, 16.083333333333332], [1.70131728E12, 16.566666666666666], [1.70131692E12, 16.616666666666667], [1.70131662E12, 15.733333333333333], [1.70131722E12, 15.916666666666666], [1.70131656E12, 16.783333333333335], [1.70131686E12, 16.65], [1.70131716E12, 16.716666666666665], [1.7013168E12, 16.033333333333335], [1.7013165E12, 2.3666666666666667]], "isOverall": false, "label": "Cargar Tareas-success", "isController": false}, {"data": [[1.7013171E12, 22.2], [1.7013174E12, 12.133333333333333], [1.70131674E12, 22.116666666666667], [1.70131704E12, 22.166666666666668], [1.70131734E12, 23.15], [1.70131668E12, 21.716666666666665], [1.70131698E12, 21.7], [1.70131728E12, 22.016666666666666], [1.70131692E12, 22.45], [1.70131662E12, 22.433333333333334], [1.70131722E12, 21.55], [1.70131656E12, 18.866666666666667], [1.70131686E12, 22.916666666666668], [1.70131716E12, 22.483333333333334], [1.7013168E12, 22.333333333333332], [1.7013165E12, 2.816666666666667]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.7013171E12, 9.383333333333333], [1.7013174E12, 4.183333333333334], [1.70131674E12, 9.966666666666667], [1.70131704E12, 9.283333333333333], [1.70131734E12, 7.783333333333333], [1.70131668E12, 9.45], [1.70131698E12, 9.683333333333334], [1.70131728E12, 8.85], [1.70131692E12, 9.216666666666667], [1.70131662E12, 8.816666666666666], [1.70131722E12, 9.65], [1.70131656E12, 3.466666666666667], [1.70131686E12, 8.583333333333334], [1.70131716E12, 9.066666666666666], [1.7013168E12, 9.016666666666667]], "isOverall": false, "label": "Login-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7013174E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.183333333333334, "minX": 1.7013165E12, "maxY": 39.95, "series": [{"data": [[1.7013171E12, 38.21666666666667], [1.7013174E12, 22.216666666666665], [1.70131674E12, 38.05], [1.70131704E12, 38.483333333333334], [1.70131734E12, 39.95], [1.70131668E12, 38.06666666666667], [1.70131698E12, 37.78333333333333], [1.70131728E12, 38.583333333333336], [1.70131692E12, 39.06666666666667], [1.70131662E12, 38.166666666666664], [1.70131722E12, 37.46666666666667], [1.70131656E12, 35.65], [1.70131686E12, 39.56666666666667], [1.70131716E12, 39.2], [1.7013168E12, 38.36666666666667], [1.7013165E12, 5.183333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7013171E12, 24.866666666666667], [1.7013174E12, 12.183333333333334], [1.70131674E12, 26.066666666666666], [1.70131704E12, 24.333333333333332], [1.70131734E12, 21.833333333333332], [1.70131668E12, 24.566666666666666], [1.70131698E12, 25.25], [1.70131728E12, 23.033333333333335], [1.70131692E12, 24.133333333333333], [1.70131662E12, 23.616666666666667], [1.70131722E12, 24.95], [1.70131656E12, 8.216666666666667], [1.70131686E12, 23.416666666666668], [1.70131716E12, 24.0], [1.7013168E12, 24.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7013174E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

