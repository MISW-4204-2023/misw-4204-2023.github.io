/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 31025.0, "series": [{"data": [[0.0, 3.0], [0.1, 6.0], [0.2, 248.0], [0.3, 256.0], [0.4, 262.0], [0.5, 265.0], [0.6, 267.0], [0.7, 270.0], [0.8, 272.0], [0.9, 274.0], [1.0, 275.0], [1.1, 278.0], [1.2, 279.0], [1.3, 280.0], [1.4, 282.0], [1.5, 284.0], [1.6, 285.0], [1.7, 286.0], [1.8, 287.0], [1.9, 288.0], [2.0, 290.0], [2.1, 291.0], [2.2, 293.0], [2.3, 294.0], [2.4, 295.0], [2.5, 295.0], [2.6, 296.0], [2.7, 298.0], [2.8, 298.0], [2.9, 300.0], [3.0, 301.0], [3.1, 301.0], [3.2, 302.0], [3.3, 303.0], [3.4, 304.0], [3.5, 305.0], [3.6, 306.0], [3.7, 307.0], [3.8, 307.0], [3.9, 308.0], [4.0, 309.0], [4.1, 310.0], [4.2, 311.0], [4.3, 311.0], [4.4, 312.0], [4.5, 313.0], [4.6, 313.0], [4.7, 314.0], [4.8, 315.0], [4.9, 316.0], [5.0, 316.0], [5.1, 317.0], [5.2, 318.0], [5.3, 318.0], [5.4, 319.0], [5.5, 320.0], [5.6, 321.0], [5.7, 321.0], [5.8, 322.0], [5.9, 323.0], [6.0, 323.0], [6.1, 324.0], [6.2, 324.0], [6.3, 325.0], [6.4, 325.0], [6.5, 326.0], [6.6, 326.0], [6.7, 327.0], [6.8, 327.0], [6.9, 328.0], [7.0, 329.0], [7.1, 329.0], [7.2, 329.0], [7.3, 330.0], [7.4, 331.0], [7.5, 331.0], [7.6, 332.0], [7.7, 333.0], [7.8, 333.0], [7.9, 333.0], [8.0, 334.0], [8.1, 335.0], [8.2, 335.0], [8.3, 336.0], [8.4, 336.0], [8.5, 337.0], [8.6, 338.0], [8.7, 338.0], [8.8, 339.0], [8.9, 340.0], [9.0, 340.0], [9.1, 340.0], [9.2, 341.0], [9.3, 342.0], [9.4, 342.0], [9.5, 343.0], [9.6, 343.0], [9.7, 344.0], [9.8, 344.0], [9.9, 344.0], [10.0, 345.0], [10.1, 345.0], [10.2, 346.0], [10.3, 346.0], [10.4, 347.0], [10.5, 347.0], [10.6, 348.0], [10.7, 348.0], [10.8, 349.0], [10.9, 349.0], [11.0, 350.0], [11.1, 350.0], [11.2, 351.0], [11.3, 351.0], [11.4, 352.0], [11.5, 352.0], [11.6, 352.0], [11.7, 353.0], [11.8, 353.0], [11.9, 354.0], [12.0, 354.0], [12.1, 355.0], [12.2, 355.0], [12.3, 355.0], [12.4, 356.0], [12.5, 356.0], [12.6, 357.0], [12.7, 357.0], [12.8, 357.0], [12.9, 358.0], [13.0, 358.0], [13.1, 359.0], [13.2, 359.0], [13.3, 360.0], [13.4, 360.0], [13.5, 360.0], [13.6, 361.0], [13.7, 361.0], [13.8, 362.0], [13.9, 362.0], [14.0, 363.0], [14.1, 364.0], [14.2, 364.0], [14.3, 365.0], [14.4, 365.0], [14.5, 365.0], [14.6, 366.0], [14.7, 367.0], [14.8, 367.0], [14.9, 368.0], [15.0, 368.0], [15.1, 369.0], [15.2, 369.0], [15.3, 370.0], [15.4, 370.0], [15.5, 371.0], [15.6, 371.0], [15.7, 372.0], [15.8, 373.0], [15.9, 373.0], [16.0, 374.0], [16.1, 374.0], [16.2, 375.0], [16.3, 376.0], [16.4, 377.0], [16.5, 377.0], [16.6, 378.0], [16.7, 379.0], [16.8, 379.0], [16.9, 380.0], [17.0, 381.0], [17.1, 381.0], [17.2, 382.0], [17.3, 382.0], [17.4, 383.0], [17.5, 384.0], [17.6, 384.0], [17.7, 385.0], [17.8, 386.0], [17.9, 386.0], [18.0, 386.0], [18.1, 387.0], [18.2, 387.0], [18.3, 388.0], [18.4, 388.0], [18.5, 389.0], [18.6, 389.0], [18.7, 389.0], [18.8, 389.0], [18.9, 390.0], [19.0, 390.0], [19.1, 391.0], [19.2, 391.0], [19.3, 392.0], [19.4, 393.0], [19.5, 394.0], [19.6, 394.0], [19.7, 395.0], [19.8, 395.0], [19.9, 396.0], [20.0, 396.0], [20.1, 397.0], [20.2, 397.0], [20.3, 398.0], [20.4, 399.0], [20.5, 400.0], [20.6, 400.0], [20.7, 400.0], [20.8, 401.0], [20.9, 401.0], [21.0, 402.0], [21.1, 402.0], [21.2, 403.0], [21.3, 403.0], [21.4, 404.0], [21.5, 404.0], [21.6, 405.0], [21.7, 405.0], [21.8, 406.0], [21.9, 406.0], [22.0, 407.0], [22.1, 407.0], [22.2, 408.0], [22.3, 409.0], [22.4, 409.0], [22.5, 409.0], [22.6, 410.0], [22.7, 410.0], [22.8, 411.0], [22.9, 411.0], [23.0, 412.0], [23.1, 413.0], [23.2, 413.0], [23.3, 414.0], [23.4, 414.0], [23.5, 415.0], [23.6, 415.0], [23.7, 415.0], [23.8, 416.0], [23.9, 416.0], [24.0, 417.0], [24.1, 417.0], [24.2, 419.0], [24.3, 419.0], [24.4, 419.0], [24.5, 420.0], [24.6, 421.0], [24.7, 421.0], [24.8, 422.0], [24.9, 422.0], [25.0, 423.0], [25.1, 424.0], [25.2, 424.0], [25.3, 424.0], [25.4, 425.0], [25.5, 425.0], [25.6, 426.0], [25.7, 426.0], [25.8, 427.0], [25.9, 428.0], [26.0, 429.0], [26.1, 429.0], [26.2, 429.0], [26.3, 430.0], [26.4, 431.0], [26.5, 432.0], [26.6, 432.0], [26.7, 433.0], [26.8, 433.0], [26.9, 434.0], [27.0, 434.0], [27.1, 435.0], [27.2, 436.0], [27.3, 436.0], [27.4, 437.0], [27.5, 437.0], [27.6, 438.0], [27.7, 439.0], [27.8, 439.0], [27.9, 440.0], [28.0, 440.0], [28.1, 441.0], [28.2, 442.0], [28.3, 443.0], [28.4, 444.0], [28.5, 444.0], [28.6, 446.0], [28.7, 446.0], [28.8, 446.0], [28.9, 447.0], [29.0, 448.0], [29.1, 449.0], [29.2, 450.0], [29.3, 451.0], [29.4, 452.0], [29.5, 454.0], [29.6, 455.0], [29.7, 456.0], [29.8, 457.0], [29.9, 457.0], [30.0, 459.0], [30.1, 459.0], [30.2, 460.0], [30.3, 462.0], [30.4, 463.0], [30.5, 464.0], [30.6, 465.0], [30.7, 466.0], [30.8, 467.0], [30.9, 468.0], [31.0, 469.0], [31.1, 471.0], [31.2, 472.0], [31.3, 472.0], [31.4, 474.0], [31.5, 475.0], [31.6, 476.0], [31.7, 477.0], [31.8, 479.0], [31.9, 481.0], [32.0, 483.0], [32.1, 483.0], [32.2, 485.0], [32.3, 486.0], [32.4, 487.0], [32.5, 488.0], [32.6, 489.0], [32.7, 490.0], [32.8, 491.0], [32.9, 492.0], [33.0, 494.0], [33.1, 495.0], [33.2, 497.0], [33.3, 499.0], [33.4, 500.0], [33.5, 500.0], [33.6, 502.0], [33.7, 503.0], [33.8, 504.0], [33.9, 505.0], [34.0, 506.0], [34.1, 507.0], [34.2, 508.0], [34.3, 509.0], [34.4, 510.0], [34.5, 512.0], [34.6, 513.0], [34.7, 514.0], [34.8, 515.0], [34.9, 517.0], [35.0, 518.0], [35.1, 520.0], [35.2, 520.0], [35.3, 522.0], [35.4, 523.0], [35.5, 524.0], [35.6, 525.0], [35.7, 527.0], [35.8, 529.0], [35.9, 532.0], [36.0, 533.0], [36.1, 535.0], [36.2, 537.0], [36.3, 539.0], [36.4, 540.0], [36.5, 543.0], [36.6, 544.0], [36.7, 546.0], [36.8, 547.0], [36.9, 548.0], [37.0, 550.0], [37.1, 551.0], [37.2, 553.0], [37.3, 554.0], [37.4, 555.0], [37.5, 557.0], [37.6, 557.0], [37.7, 560.0], [37.8, 561.0], [37.9, 565.0], [38.0, 568.0], [38.1, 570.0], [38.2, 572.0], [38.3, 574.0], [38.4, 576.0], [38.5, 578.0], [38.6, 579.0], [38.7, 580.0], [38.8, 583.0], [38.9, 585.0], [39.0, 588.0], [39.1, 589.0], [39.2, 591.0], [39.3, 594.0], [39.4, 596.0], [39.5, 598.0], [39.6, 601.0], [39.7, 604.0], [39.8, 606.0], [39.9, 608.0], [40.0, 613.0], [40.1, 616.0], [40.2, 619.0], [40.3, 623.0], [40.4, 626.0], [40.5, 631.0], [40.6, 633.0], [40.7, 637.0], [40.8, 638.0], [40.9, 642.0], [41.0, 645.0], [41.1, 649.0], [41.2, 651.0], [41.3, 655.0], [41.4, 657.0], [41.5, 659.0], [41.6, 662.0], [41.7, 666.0], [41.8, 668.0], [41.9, 671.0], [42.0, 674.0], [42.1, 676.0], [42.2, 682.0], [42.3, 685.0], [42.4, 693.0], [42.5, 697.0], [42.6, 704.0], [42.7, 705.0], [42.8, 711.0], [42.9, 716.0], [43.0, 720.0], [43.1, 723.0], [43.2, 729.0], [43.3, 737.0], [43.4, 744.0], [43.5, 752.0], [43.6, 756.0], [43.7, 761.0], [43.8, 765.0], [43.9, 773.0], [44.0, 779.0], [44.1, 787.0], [44.2, 790.0], [44.3, 793.0], [44.4, 803.0], [44.5, 811.0], [44.6, 819.0], [44.7, 830.0], [44.8, 841.0], [44.9, 850.0], [45.0, 859.0], [45.1, 867.0], [45.2, 882.0], [45.3, 889.0], [45.4, 901.0], [45.5, 916.0], [45.6, 928.0], [45.7, 932.0], [45.8, 948.0], [45.9, 955.0], [46.0, 962.0], [46.1, 976.0], [46.2, 985.0], [46.3, 995.0], [46.4, 1001.0], [46.5, 1013.0], [46.6, 1027.0], [46.7, 1036.0], [46.8, 1046.0], [46.9, 1058.0], [47.0, 1080.0], [47.1, 1096.0], [47.2, 1111.0], [47.3, 1127.0], [47.4, 1160.0], [47.5, 1190.0], [47.6, 1219.0], [47.7, 1233.0], [47.8, 1279.0], [47.9, 1329.0], [48.0, 1364.0], [48.1, 1441.0], [48.2, 1469.0], [48.3, 1512.0], [48.4, 1546.0], [48.5, 1588.0], [48.6, 1634.0], [48.7, 1762.0], [48.8, 1870.0], [48.9, 1932.0], [49.0, 1966.0], [49.1, 2012.0], [49.2, 2186.0], [49.3, 2219.0], [49.4, 2277.0], [49.5, 2456.0], [49.6, 2496.0], [49.7, 2518.0], [49.8, 2672.0], [49.9, 2725.0], [50.0, 2784.0], [50.1, 2889.0], [50.2, 2940.0], [50.3, 2980.0], [50.4, 3053.0], [50.5, 3162.0], [50.6, 3222.0], [50.7, 3249.0], [50.8, 3308.0], [50.9, 3411.0], [51.0, 3485.0], [51.1, 3518.0], [51.2, 3571.0], [51.3, 3692.0], [51.4, 3723.0], [51.5, 3873.0], [51.6, 3973.0], [51.7, 4036.0], [51.8, 4189.0], [51.9, 4293.0], [52.0, 4461.0], [52.1, 4555.0], [52.2, 4718.0], [52.3, 4943.0], [52.4, 5071.0], [52.5, 5235.0], [52.6, 5437.0], [52.7, 5589.0], [52.8, 5724.0], [52.9, 5900.0], [53.0, 6150.0], [53.1, 6502.0], [53.2, 6800.0], [53.3, 7110.0], [53.4, 7288.0], [53.5, 7604.0], [53.6, 8134.0], [53.7, 8844.0], [53.8, 9192.0], [53.9, 9654.0], [54.0, 9753.0], [54.1, 9984.0], [54.2, 10216.0], [54.3, 10395.0], [54.4, 10497.0], [54.5, 10581.0], [54.6, 10883.0], [54.7, 10958.0], [54.8, 11023.0], [54.9, 11186.0], [55.0, 11248.0], [55.1, 11412.0], [55.2, 11567.0], [55.3, 11706.0], [55.4, 11738.0], [55.5, 11776.0], [55.6, 11811.0], [55.7, 11934.0], [55.8, 11984.0], [55.9, 12009.0], [56.0, 12114.0], [56.1, 12187.0], [56.2, 12251.0], [56.3, 12340.0], [56.4, 12397.0], [56.5, 12473.0], [56.6, 12507.0], [56.7, 12656.0], [56.8, 12714.0], [56.9, 12741.0], [57.0, 12766.0], [57.1, 12868.0], [57.2, 12933.0], [57.3, 12990.0], [57.4, 13012.0], [57.5, 13064.0], [57.6, 13135.0], [57.7, 13207.0], [57.8, 13231.0], [57.9, 13268.0], [58.0, 13376.0], [58.1, 13453.0], [58.2, 13481.0], [58.3, 13506.0], [58.4, 13584.0], [58.5, 13695.0], [58.6, 13729.0], [58.7, 13770.0], [58.8, 13857.0], [58.9, 13958.0], [59.0, 14017.0], [59.1, 14166.0], [59.2, 14237.0], [59.3, 14369.0], [59.4, 14480.0], [59.5, 14518.0], [59.6, 14669.0], [59.7, 14733.0], [59.8, 14889.0], [59.9, 14951.0], [60.0, 15079.0], [60.1, 15209.0], [60.2, 15293.0], [60.3, 15429.0], [60.4, 15473.0], [60.5, 15534.0], [60.6, 15690.0], [60.7, 15736.0], [60.8, 15778.0], [60.9, 15820.0], [61.0, 15929.0], [61.1, 15962.0], [61.2, 15991.0], [61.3, 16108.0], [61.4, 16183.0], [61.5, 16210.0], [61.6, 16218.0], [61.7, 16255.0], [61.8, 16287.0], [61.9, 16360.0], [62.0, 16401.0], [62.1, 16435.0], [62.2, 16459.0], [62.3, 16480.0], [62.4, 16505.0], [62.5, 16575.0], [62.6, 16606.0], [62.7, 16658.0], [62.8, 16702.0], [62.9, 16730.0], [63.0, 16776.0], [63.1, 16803.0], [63.2, 16832.0], [63.3, 16919.0], [63.4, 16957.0], [63.5, 16979.0], [63.6, 16988.0], [63.7, 17015.0], [63.8, 17067.0], [63.9, 17102.0], [64.0, 17153.0], [64.1, 17240.0], [64.2, 17280.0], [64.3, 17304.0], [64.4, 17339.0], [64.5, 17367.0], [64.6, 17407.0], [64.7, 17461.0], [64.8, 17486.0], [64.9, 17518.0], [65.0, 17553.0], [65.1, 17582.0], [65.2, 17621.0], [65.3, 17669.0], [65.4, 17701.0], [65.5, 17731.0], [65.6, 17762.0], [65.7, 17796.0], [65.8, 17857.0], [65.9, 17892.0], [66.0, 17920.0], [66.1, 17954.0], [66.2, 17981.0], [66.3, 18006.0], [66.4, 18053.0], [66.5, 18099.0], [66.6, 18151.0], [66.7, 18182.0], [66.8, 18220.0], [66.9, 18238.0], [67.0, 18251.0], [67.1, 18283.0], [67.2, 18305.0], [67.3, 18357.0], [67.4, 18394.0], [67.5, 18423.0], [67.6, 18449.0], [67.7, 18477.0], [67.8, 18494.0], [67.9, 18534.0], [68.0, 18578.0], [68.1, 18615.0], [68.2, 18660.0], [68.3, 18690.0], [68.4, 18715.0], [68.5, 18740.0], [68.6, 18796.0], [68.7, 18872.0], [68.8, 18932.0], [68.9, 18956.0], [69.0, 18987.0], [69.1, 18993.0], [69.2, 19021.0], [69.3, 19057.0], [69.4, 19112.0], [69.5, 19135.0], [69.6, 19163.0], [69.7, 19217.0], [69.8, 19256.0], [69.9, 19274.0], [70.0, 19312.0], [70.1, 19383.0], [70.2, 19449.0], [70.3, 19490.0], [70.4, 19517.0], [70.5, 19600.0], [70.6, 19658.0], [70.7, 19706.0], [70.8, 19728.0], [70.9, 19760.0], [71.0, 19843.0], [71.1, 19919.0], [71.2, 19949.0], [71.3, 19995.0], [71.4, 20045.0], [71.5, 20161.0], [71.6, 20198.0], [71.7, 20241.0], [71.8, 20282.0], [71.9, 20343.0], [72.0, 20458.0], [72.1, 20501.0], [72.2, 20594.0], [72.3, 20717.0], [72.4, 20810.0], [72.5, 20877.0], [72.6, 20931.0], [72.7, 20988.0], [72.8, 21091.0], [72.9, 21152.0], [73.0, 21221.0], [73.1, 21326.0], [73.2, 21482.0], [73.3, 21567.0], [73.4, 21707.0], [73.5, 21772.0], [73.6, 21958.0], [73.7, 22039.0], [73.8, 22180.0], [73.9, 22240.0], [74.0, 22310.0], [74.1, 22486.0], [74.2, 22566.0], [74.3, 22681.0], [74.4, 22773.0], [74.5, 22966.0], [74.6, 23076.0], [74.7, 23150.0], [74.8, 23229.0], [74.9, 23330.0], [75.0, 23421.0], [75.1, 23485.0], [75.2, 23570.0], [75.3, 23671.0], [75.4, 23714.0], [75.5, 23820.0], [75.6, 23956.0], [75.7, 24021.0], [75.8, 24164.0], [75.9, 24244.0], [76.0, 24326.0], [76.1, 24457.0], [76.2, 24574.0], [76.3, 24690.0], [76.4, 24754.0], [76.5, 24877.0], [76.6, 24955.0], [76.7, 25067.0], [76.8, 25220.0], [76.9, 25409.0], [77.0, 25584.0], [77.1, 25716.0], [77.2, 25799.0], [77.3, 25931.0], [77.4, 26027.0], [77.5, 26169.0], [77.6, 26314.0], [77.7, 26448.0], [77.8, 26653.0], [77.9, 26770.0], [78.0, 26901.0], [78.1, 27009.0], [78.2, 27155.0], [78.3, 27278.0], [78.4, 27408.0], [78.5, 27457.0], [78.6, 27499.0], [78.7, 27625.0], [78.8, 27718.0], [78.9, 27777.0], [79.0, 27850.0], [79.1, 27946.0], [79.2, 27981.0], [79.3, 28045.0], [79.4, 28192.0], [79.5, 28228.0], [79.6, 28256.0], [79.7, 28287.0], [79.8, 28399.0], [79.9, 28475.0], [80.0, 28513.0], [80.1, 28575.0], [80.2, 28685.0], [80.3, 28716.0], [80.4, 28742.0], [80.5, 28764.0], [80.6, 28838.0], [80.7, 28866.0], [80.8, 28935.0], [80.9, 28949.0], [81.0, 28985.0], [81.1, 29003.0], [81.2, 29016.0], [81.3, 29061.0], [81.4, 29125.0], [81.5, 29209.0], [81.6, 29230.0], [81.7, 29242.0], [81.8, 29258.0], [81.9, 29274.0], [82.0, 29309.0], [82.1, 29349.0], [82.2, 29387.0], [82.3, 29431.0], [82.4, 29443.0], [82.5, 29461.0], [82.6, 29471.0], [82.7, 29494.0], [82.8, 29514.0], [82.9, 29526.0], [83.0, 29554.0], [83.1, 29591.0], [83.2, 29628.0], [83.3, 29666.0], [83.4, 29699.0], [83.5, 29717.0], [83.6, 29731.0], [83.7, 29745.0], [83.8, 29750.0], [83.9, 29773.0], [84.0, 29810.0], [84.1, 29836.0], [84.2, 29883.0], [84.3, 29905.0], [84.4, 29927.0], [84.5, 29942.0], [84.6, 29948.0], [84.7, 29966.0], [84.8, 29971.0], [84.9, 29976.0], [85.0, 29978.0], [85.1, 29982.0], [85.2, 29985.0], [85.3, 29987.0], [85.4, 29990.0], [85.5, 29991.0], [85.6, 29993.0], [85.7, 29995.0], [85.8, 29997.0], [85.9, 29999.0], [86.0, 30000.0], [86.1, 30001.0], [86.2, 30002.0], [86.3, 30002.0], [86.4, 30002.0], [86.5, 30003.0], [86.6, 30003.0], [86.7, 30003.0], [86.8, 30003.0], [86.9, 30003.0], [87.0, 30003.0], [87.1, 30003.0], [87.2, 30003.0], [87.3, 30004.0], [87.4, 30004.0], [87.5, 30004.0], [87.6, 30004.0], [87.7, 30004.0], [87.8, 30004.0], [87.9, 30005.0], [88.0, 30005.0], [88.1, 30019.0], [88.2, 31001.0], [88.3, 31001.0], [88.4, 31002.0], [88.5, 31002.0], [88.6, 31002.0], [88.7, 31002.0], [88.8, 31002.0], [88.9, 31002.0], [89.0, 31002.0], [89.1, 31002.0], [89.2, 31002.0], [89.3, 31002.0], [89.4, 31002.0], [89.5, 31002.0], [89.6, 31002.0], [89.7, 31002.0], [89.8, 31002.0], [89.9, 31002.0], [90.0, 31002.0], [90.1, 31003.0], [90.2, 31003.0], [90.3, 31003.0], [90.4, 31003.0], [90.5, 31003.0], [90.6, 31003.0], [90.7, 31003.0], [90.8, 31003.0], [90.9, 31003.0], [91.0, 31003.0], [91.1, 31003.0], [91.2, 31003.0], [91.3, 31003.0], [91.4, 31003.0], [91.5, 31003.0], [91.6, 31003.0], [91.7, 31003.0], [91.8, 31003.0], [91.9, 31003.0], [92.0, 31003.0], [92.1, 31003.0], [92.2, 31003.0], [92.3, 31003.0], [92.4, 31003.0], [92.5, 31003.0], [92.6, 31003.0], [92.7, 31003.0], [92.8, 31003.0], [92.9, 31003.0], [93.0, 31003.0], [93.1, 31003.0], [93.2, 31003.0], [93.3, 31003.0], [93.4, 31003.0], [93.5, 31003.0], [93.6, 31003.0], [93.7, 31003.0], [93.8, 31003.0], [93.9, 31003.0], [94.0, 31003.0], [94.1, 31003.0], [94.2, 31003.0], [94.3, 31003.0], [94.4, 31003.0], [94.5, 31004.0], [94.6, 31004.0], [94.7, 31004.0], [94.8, 31004.0], [94.9, 31004.0], [95.0, 31004.0], [95.1, 31004.0], [95.2, 31004.0], [95.3, 31004.0], [95.4, 31004.0], [95.5, 31004.0], [95.6, 31004.0], [95.7, 31004.0], [95.8, 31004.0], [95.9, 31004.0], [96.0, 31004.0], [96.1, 31004.0], [96.2, 31004.0], [96.3, 31004.0], [96.4, 31004.0], [96.5, 31004.0], [96.6, 31004.0], [96.7, 31004.0], [96.8, 31004.0], [96.9, 31004.0], [97.0, 31004.0], [97.1, 31004.0], [97.2, 31004.0], [97.3, 31004.0], [97.4, 31004.0], [97.5, 31004.0], [97.6, 31004.0], [97.7, 31004.0], [97.8, 31004.0], [97.9, 31004.0], [98.0, 31004.0], [98.1, 31004.0], [98.2, 31004.0], [98.3, 31004.0], [98.4, 31005.0], [98.5, 31005.0], [98.6, 31005.0], [98.7, 31005.0], [98.8, 31005.0], [98.9, 31005.0], [99.0, 31005.0], [99.1, 31005.0], [99.2, 31005.0], [99.3, 31005.0], [99.4, 31005.0], [99.5, 31005.0], [99.6, 31006.0], [99.7, 31007.0], [99.8, 31008.0], [99.9, 31011.0], [100.0, 31025.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[0.0, 6.0], [0.1, 7.0], [0.2, 7.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 7.0], [0.7, 7.0], [0.8, 7.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 8.0], [1.5, 8.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 8.0], [2.7, 8.0], [2.8, 8.0], [2.9, 8.0], [3.0, 8.0], [3.1, 8.0], [3.2, 8.0], [3.3, 8.0], [3.4, 8.0], [3.5, 8.0], [3.6, 8.0], [3.7, 8.0], [3.8, 8.0], [3.9, 8.0], [4.0, 8.0], [4.1, 8.0], [4.2, 8.0], [4.3, 8.0], [4.4, 8.0], [4.5, 8.0], [4.6, 8.0], [4.7, 8.0], [4.8, 8.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 8.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 8.0], [7.4, 8.0], [7.5, 8.0], [7.6, 8.0], [7.7, 8.0], [7.8, 8.0], [7.9, 8.0], [8.0, 8.0], [8.1, 8.0], [8.2, 8.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 8.0], [9.0, 8.0], [9.1, 8.0], [9.2, 8.0], [9.3, 8.0], [9.4, 8.0], [9.5, 8.0], [9.6, 9.0], [9.7, 9.0], [9.8, 9.0], [9.9, 9.0], [10.0, 9.0], [10.1, 9.0], [10.2, 9.0], [10.3, 9.0], [10.4, 9.0], [10.5, 9.0], [10.6, 9.0], [10.7, 9.0], [10.8, 9.0], [10.9, 9.0], [11.0, 9.0], [11.1, 9.0], [11.2, 9.0], [11.3, 9.0], [11.4, 9.0], [11.5, 9.0], [11.6, 9.0], [11.7, 9.0], [11.8, 9.0], [11.9, 9.0], [12.0, 9.0], [12.1, 9.0], [12.2, 9.0], [12.3, 9.0], [12.4, 9.0], [12.5, 9.0], [12.6, 9.0], [12.7, 9.0], [12.8, 9.0], [12.9, 9.0], [13.0, 9.0], [13.1, 9.0], [13.2, 9.0], [13.3, 9.0], [13.4, 9.0], [13.5, 9.0], [13.6, 9.0], [13.7, 9.0], [13.8, 9.0], [13.9, 9.0], [14.0, 9.0], [14.1, 9.0], [14.2, 9.0], [14.3, 9.0], [14.4, 9.0], [14.5, 9.0], [14.6, 9.0], [14.7, 9.0], [14.8, 9.0], [14.9, 9.0], [15.0, 9.0], [15.1, 9.0], [15.2, 9.0], [15.3, 9.0], [15.4, 9.0], [15.5, 9.0], [15.6, 9.0], [15.7, 9.0], [15.8, 9.0], [15.9, 9.0], [16.0, 9.0], [16.1, 9.0], [16.2, 9.0], [16.3, 9.0], [16.4, 9.0], [16.5, 9.0], [16.6, 9.0], [16.7, 9.0], [16.8, 9.0], [16.9, 9.0], [17.0, 9.0], [17.1, 9.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 9.0], [20.0, 9.0], [20.1, 9.0], [20.2, 9.0], [20.3, 9.0], [20.4, 9.0], [20.5, 9.0], [20.6, 9.0], [20.7, 9.0], [20.8, 9.0], [20.9, 9.0], [21.0, 9.0], [21.1, 9.0], [21.2, 9.0], [21.3, 9.0], [21.4, 9.0], [21.5, 9.0], [21.6, 9.0], [21.7, 9.0], [21.8, 9.0], [21.9, 9.0], [22.0, 9.0], [22.1, 9.0], [22.2, 9.0], [22.3, 9.0], [22.4, 9.0], [22.5, 9.0], [22.6, 9.0], [22.7, 9.0], [22.8, 9.0], [22.9, 9.0], [23.0, 9.0], [23.1, 9.0], [23.2, 9.0], [23.3, 9.0], [23.4, 9.0], [23.5, 9.0], [23.6, 9.0], [23.7, 9.0], [23.8, 9.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 9.0], [26.0, 9.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 9.0], [26.6, 9.0], [26.7, 9.0], [26.8, 9.0], [26.9, 9.0], [27.0, 10.0], [27.1, 10.0], [27.2, 10.0], [27.3, 10.0], [27.4, 10.0], [27.5, 10.0], [27.6, 10.0], [27.7, 10.0], [27.8, 10.0], [27.9, 10.0], [28.0, 10.0], [28.1, 10.0], [28.2, 10.0], [28.3, 10.0], [28.4, 10.0], [28.5, 10.0], [28.6, 10.0], [28.7, 10.0], [28.8, 10.0], [28.9, 10.0], [29.0, 10.0], [29.1, 10.0], [29.2, 10.0], [29.3, 10.0], [29.4, 10.0], [29.5, 10.0], [29.6, 10.0], [29.7, 10.0], [29.8, 10.0], [29.9, 10.0], [30.0, 10.0], [30.1, 10.0], [30.2, 10.0], [30.3, 10.0], [30.4, 10.0], [30.5, 10.0], [30.6, 10.0], [30.7, 10.0], [30.8, 10.0], [30.9, 10.0], [31.0, 10.0], [31.1, 10.0], [31.2, 10.0], [31.3, 10.0], [31.4, 10.0], [31.5, 10.0], [31.6, 10.0], [31.7, 10.0], [31.8, 10.0], [31.9, 10.0], [32.0, 10.0], [32.1, 10.0], [32.2, 10.0], [32.3, 10.0], [32.4, 10.0], [32.5, 10.0], [32.6, 10.0], [32.7, 10.0], [32.8, 10.0], [32.9, 10.0], [33.0, 10.0], [33.1, 10.0], [33.2, 10.0], [33.3, 10.0], [33.4, 10.0], [33.5, 10.0], [33.6, 10.0], [33.7, 10.0], [33.8, 10.0], [33.9, 10.0], [34.0, 10.0], [34.1, 10.0], [34.2, 10.0], [34.3, 10.0], [34.4, 10.0], [34.5, 10.0], [34.6, 10.0], [34.7, 10.0], [34.8, 10.0], [34.9, 10.0], [35.0, 10.0], [35.1, 10.0], [35.2, 10.0], [35.3, 10.0], [35.4, 10.0], [35.5, 10.0], [35.6, 10.0], [35.7, 10.0], [35.8, 10.0], [35.9, 10.0], [36.0, 10.0], [36.1, 10.0], [36.2, 10.0], [36.3, 10.0], [36.4, 10.0], [36.5, 10.0], [36.6, 10.0], [36.7, 10.0], [36.8, 10.0], [36.9, 10.0], [37.0, 10.0], [37.1, 10.0], [37.2, 10.0], [37.3, 10.0], [37.4, 10.0], [37.5, 10.0], [37.6, 10.0], [37.7, 10.0], [37.8, 10.0], [37.9, 10.0], [38.0, 10.0], [38.1, 10.0], [38.2, 10.0], [38.3, 10.0], [38.4, 10.0], [38.5, 10.0], [38.6, 10.0], [38.7, 10.0], [38.8, 10.0], [38.9, 10.0], [39.0, 10.0], [39.1, 10.0], [39.2, 10.0], [39.3, 10.0], [39.4, 10.0], [39.5, 10.0], [39.6, 10.0], [39.7, 10.0], [39.8, 10.0], [39.9, 10.0], [40.0, 10.0], [40.1, 10.0], [40.2, 10.0], [40.3, 10.0], [40.4, 10.0], [40.5, 10.0], [40.6, 10.0], [40.7, 10.0], [40.8, 10.0], [40.9, 10.0], [41.0, 10.0], [41.1, 10.0], [41.2, 10.0], [41.3, 10.0], [41.4, 10.0], [41.5, 10.0], [41.6, 10.0], [41.7, 10.0], [41.8, 10.0], [41.9, 10.0], [42.0, 10.0], [42.1, 10.0], [42.2, 10.0], [42.3, 10.0], [42.4, 10.0], [42.5, 10.0], [42.6, 10.0], [42.7, 10.0], [42.8, 10.0], [42.9, 10.0], [43.0, 10.0], [43.1, 10.0], [43.2, 10.0], [43.3, 10.0], [43.4, 10.0], [43.5, 10.0], [43.6, 10.0], [43.7, 10.0], [43.8, 11.0], [43.9, 11.0], [44.0, 11.0], [44.1, 11.0], [44.2, 11.0], [44.3, 11.0], [44.4, 11.0], [44.5, 11.0], [44.6, 11.0], [44.7, 11.0], [44.8, 11.0], [44.9, 11.0], [45.0, 11.0], [45.1, 11.0], [45.2, 11.0], [45.3, 11.0], [45.4, 11.0], [45.5, 11.0], [45.6, 11.0], [45.7, 11.0], [45.8, 11.0], [45.9, 11.0], [46.0, 11.0], [46.1, 11.0], [46.2, 11.0], [46.3, 11.0], [46.4, 11.0], [46.5, 11.0], [46.6, 11.0], [46.7, 11.0], [46.8, 11.0], [46.9, 11.0], [47.0, 11.0], [47.1, 11.0], [47.2, 11.0], [47.3, 11.0], [47.4, 11.0], [47.5, 11.0], [47.6, 11.0], [47.7, 11.0], [47.8, 11.0], [47.9, 11.0], [48.0, 11.0], [48.1, 11.0], [48.2, 11.0], [48.3, 11.0], [48.4, 11.0], [48.5, 11.0], [48.6, 11.0], [48.7, 11.0], [48.8, 11.0], [48.9, 11.0], [49.0, 11.0], [49.1, 11.0], [49.2, 11.0], [49.3, 11.0], [49.4, 11.0], [49.5, 11.0], [49.6, 11.0], [49.7, 11.0], [49.8, 11.0], [49.9, 11.0], [50.0, 11.0], [50.1, 11.0], [50.2, 11.0], [50.3, 11.0], [50.4, 11.0], [50.5, 11.0], [50.6, 11.0], [50.7, 11.0], [50.8, 11.0], [50.9, 11.0], [51.0, 11.0], [51.1, 11.0], [51.2, 11.0], [51.3, 11.0], [51.4, 11.0], [51.5, 11.0], [51.6, 11.0], [51.7, 11.0], [51.8, 11.0], [51.9, 11.0], [52.0, 11.0], [52.1, 11.0], [52.2, 11.0], [52.3, 11.0], [52.4, 11.0], [52.5, 11.0], [52.6, 11.0], [52.7, 11.0], [52.8, 11.0], [52.9, 11.0], [53.0, 11.0], [53.1, 11.0], [53.2, 11.0], [53.3, 11.0], [53.4, 11.0], [53.5, 11.0], [53.6, 11.0], [53.7, 11.0], [53.8, 11.0], [53.9, 11.0], [54.0, 11.0], [54.1, 11.0], [54.2, 11.0], [54.3, 11.0], [54.4, 11.0], [54.5, 11.0], [54.6, 11.0], [54.7, 11.0], [54.8, 11.0], [54.9, 11.0], [55.0, 11.0], [55.1, 12.0], [55.2, 12.0], [55.3, 12.0], [55.4, 12.0], [55.5, 12.0], [55.6, 12.0], [55.7, 12.0], [55.8, 12.0], [55.9, 12.0], [56.0, 12.0], [56.1, 12.0], [56.2, 12.0], [56.3, 12.0], [56.4, 12.0], [56.5, 12.0], [56.6, 12.0], [56.7, 12.0], [56.8, 12.0], [56.9, 12.0], [57.0, 12.0], [57.1, 12.0], [57.2, 12.0], [57.3, 12.0], [57.4, 12.0], [57.5, 12.0], [57.6, 12.0], [57.7, 12.0], [57.8, 12.0], [57.9, 12.0], [58.0, 12.0], [58.1, 12.0], [58.2, 12.0], [58.3, 12.0], [58.4, 12.0], [58.5, 12.0], [58.6, 12.0], [58.7, 12.0], [58.8, 12.0], [58.9, 12.0], [59.0, 12.0], [59.1, 12.0], [59.2, 12.0], [59.3, 12.0], [59.4, 12.0], [59.5, 12.0], [59.6, 12.0], [59.7, 12.0], [59.8, 12.0], [59.9, 12.0], [60.0, 12.0], [60.1, 12.0], [60.2, 12.0], [60.3, 12.0], [60.4, 12.0], [60.5, 12.0], [60.6, 12.0], [60.7, 12.0], [60.8, 12.0], [60.9, 12.0], [61.0, 12.0], [61.1, 12.0], [61.2, 12.0], [61.3, 12.0], [61.4, 12.0], [61.5, 12.0], [61.6, 12.0], [61.7, 13.0], [61.8, 13.0], [61.9, 13.0], [62.0, 13.0], [62.1, 13.0], [62.2, 13.0], [62.3, 13.0], [62.4, 13.0], [62.5, 13.0], [62.6, 13.0], [62.7, 13.0], [62.8, 13.0], [62.9, 13.0], [63.0, 13.0], [63.1, 13.0], [63.2, 13.0], [63.3, 13.0], [63.4, 13.0], [63.5, 13.0], [63.6, 13.0], [63.7, 13.0], [63.8, 13.0], [63.9, 13.0], [64.0, 13.0], [64.1, 13.0], [64.2, 13.0], [64.3, 13.0], [64.4, 13.0], [64.5, 13.0], [64.6, 13.0], [64.7, 13.0], [64.8, 13.0], [64.9, 13.0], [65.0, 13.0], [65.1, 13.0], [65.2, 13.0], [65.3, 13.0], [65.4, 13.0], [65.5, 13.0], [65.6, 13.0], [65.7, 14.0], [65.8, 14.0], [65.9, 14.0], [66.0, 14.0], [66.1, 14.0], [66.2, 14.0], [66.3, 14.0], [66.4, 14.0], [66.5, 14.0], [66.6, 14.0], [66.7, 14.0], [66.8, 14.0], [66.9, 14.0], [67.0, 14.0], [67.1, 14.0], [67.2, 14.0], [67.3, 14.0], [67.4, 14.0], [67.5, 14.0], [67.6, 14.0], [67.7, 14.0], [67.8, 14.0], [67.9, 14.0], [68.0, 14.0], [68.1, 14.0], [68.2, 14.0], [68.3, 14.0], [68.4, 15.0], [68.5, 15.0], [68.6, 15.0], [68.7, 15.0], [68.8, 15.0], [68.9, 15.0], [69.0, 15.0], [69.1, 15.0], [69.2, 15.0], [69.3, 15.0], [69.4, 15.0], [69.5, 15.0], [69.6, 15.0], [69.7, 15.0], [69.8, 15.0], [69.9, 16.0], [70.0, 16.0], [70.1, 16.0], [70.2, 16.0], [70.3, 16.0], [70.4, 16.0], [70.5, 16.0], [70.6, 16.0], [70.7, 16.0], [70.8, 16.0], [70.9, 16.0], [71.0, 16.0], [71.1, 17.0], [71.2, 17.0], [71.3, 17.0], [71.4, 17.0], [71.5, 17.0], [71.6, 17.0], [71.7, 17.0], [71.8, 17.0], [71.9, 17.0], [72.0, 18.0], [72.1, 18.0], [72.2, 18.0], [72.3, 18.0], [72.4, 18.0], [72.5, 18.0], [72.6, 18.0], [72.7, 19.0], [72.8, 19.0], [72.9, 19.0], [73.0, 19.0], [73.1, 19.0], [73.2, 20.0], [73.3, 20.0], [73.4, 20.0], [73.5, 20.0], [73.6, 20.0], [73.7, 20.0], [73.8, 21.0], [73.9, 21.0], [74.0, 21.0], [74.1, 21.0], [74.2, 21.0], [74.3, 21.0], [74.4, 21.0], [74.5, 22.0], [74.6, 22.0], [74.7, 22.0], [74.8, 22.0], [74.9, 22.0], [75.0, 22.0], [75.1, 22.0], [75.2, 23.0], [75.3, 23.0], [75.4, 23.0], [75.5, 23.0], [75.6, 23.0], [75.7, 23.0], [75.8, 24.0], [75.9, 24.0], [76.0, 24.0], [76.1, 24.0], [76.2, 25.0], [76.3, 25.0], [76.4, 25.0], [76.5, 25.0], [76.6, 25.0], [76.7, 25.0], [76.8, 26.0], [76.9, 26.0], [77.0, 26.0], [77.1, 26.0], [77.2, 26.0], [77.3, 26.0], [77.4, 26.0], [77.5, 27.0], [77.6, 27.0], [77.7, 27.0], [77.8, 27.0], [77.9, 27.0], [78.0, 28.0], [78.1, 28.0], [78.2, 28.0], [78.3, 28.0], [78.4, 28.0], [78.5, 29.0], [78.6, 29.0], [78.7, 29.0], [78.8, 29.0], [78.9, 29.0], [79.0, 30.0], [79.1, 30.0], [79.2, 30.0], [79.3, 30.0], [79.4, 31.0], [79.5, 31.0], [79.6, 31.0], [79.7, 32.0], [79.8, 32.0], [79.9, 32.0], [80.0, 32.0], [80.1, 33.0], [80.2, 33.0], [80.3, 34.0], [80.4, 34.0], [80.5, 34.0], [80.6, 35.0], [80.7, 35.0], [80.8, 36.0], [80.9, 36.0], [81.0, 37.0], [81.1, 37.0], [81.2, 38.0], [81.3, 38.0], [81.4, 39.0], [81.5, 40.0], [81.6, 41.0], [81.7, 42.0], [81.8, 42.0], [81.9, 42.0], [82.0, 43.0], [82.1, 44.0], [82.2, 46.0], [82.3, 47.0], [82.4, 49.0], [82.5, 50.0], [82.6, 51.0], [82.7, 52.0], [82.8, 54.0], [82.9, 57.0], [83.0, 59.0], [83.1, 61.0], [83.2, 65.0], [83.3, 68.0], [83.4, 72.0], [83.5, 75.0], [83.6, 78.0], [83.7, 81.0], [83.8, 85.0], [83.9, 95.0], [84.0, 105.0], [84.1, 115.0], [84.2, 129.0], [84.3, 142.0], [84.4, 157.0], [84.5, 167.0], [84.6, 188.0], [84.7, 194.0], [84.8, 203.0], [84.9, 215.0], [85.0, 223.0], [85.1, 235.0], [85.2, 247.0], [85.3, 265.0], [85.4, 286.0], [85.5, 303.0], [85.6, 319.0], [85.7, 351.0], [85.8, 378.0], [85.9, 417.0], [86.0, 454.0], [86.1, 478.0], [86.2, 544.0], [86.3, 592.0], [86.4, 715.0], [86.5, 830.0], [86.6, 936.0], [86.7, 1061.0], [86.8, 1141.0], [86.9, 1239.0], [87.0, 1324.0], [87.1, 1399.0], [87.2, 1479.0], [87.3, 1535.0], [87.4, 1610.0], [87.5, 1823.0], [87.6, 1959.0], [87.7, 2115.0], [87.8, 2184.0], [87.9, 2325.0], [88.0, 2439.0], [88.1, 2578.0], [88.2, 2709.0], [88.3, 2787.0], [88.4, 2864.0], [88.5, 3028.0], [88.6, 3127.0], [88.7, 3337.0], [88.8, 3496.0], [88.9, 3898.0], [89.0, 4674.0], [89.1, 6302.0], [89.2, 7486.0], [89.3, 7981.0], [89.4, 8420.0], [89.5, 8550.0], [89.6, 8706.0], [89.7, 8818.0], [89.8, 9019.0], [89.9, 9287.0], [90.0, 9420.0], [90.1, 9498.0], [90.2, 9624.0], [90.3, 9783.0], [90.4, 9923.0], [90.5, 10052.0], [90.6, 10194.0], [90.7, 10295.0], [90.8, 10386.0], [90.9, 10480.0], [91.0, 10530.0], [91.1, 10707.0], [91.2, 10880.0], [91.3, 11262.0], [91.4, 11944.0], [91.5, 12215.0], [91.6, 12743.0], [91.7, 12966.0], [91.8, 13139.0], [91.9, 13317.0], [92.0, 13448.0], [92.1, 13631.0], [92.2, 13735.0], [92.3, 13906.0], [92.4, 14065.0], [92.5, 14247.0], [92.6, 14293.0], [92.7, 14427.0], [92.8, 14597.0], [92.9, 14706.0], [93.0, 14814.0], [93.1, 14880.0], [93.2, 15025.0], [93.3, 15103.0], [93.4, 15214.0], [93.5, 15241.0], [93.6, 15319.0], [93.7, 15421.0], [93.8, 15497.0], [93.9, 15709.0], [94.0, 15886.0], [94.1, 15960.0], [94.2, 16200.0], [94.3, 16404.0], [94.4, 16500.0], [94.5, 16655.0], [94.6, 16848.0], [94.7, 17176.0], [94.8, 17537.0], [94.9, 17914.0], [95.0, 18405.0], [95.1, 18930.0], [95.2, 19392.0], [95.3, 19672.0], [95.4, 20095.0], [95.5, 20519.0], [95.6, 20748.0], [95.7, 21052.0], [95.8, 21597.0], [95.9, 22158.0], [96.0, 22615.0], [96.1, 23031.0], [96.2, 23460.0], [96.3, 23942.0], [96.4, 24572.0], [96.5, 24851.0], [96.6, 25171.0], [96.7, 25291.0], [96.8, 25607.0], [96.9, 25726.0], [97.0, 25994.0], [97.1, 26098.0], [97.2, 26332.0], [97.3, 26484.0], [97.4, 26611.0], [97.5, 26731.0], [97.6, 26866.0], [97.7, 27107.0], [97.8, 27195.0], [97.9, 27268.0], [98.0, 27312.0], [98.1, 27399.0], [98.2, 27438.0], [98.3, 27494.0], [98.4, 27602.0], [98.5, 27679.0], [98.6, 27730.0], [98.7, 27766.0], [98.8, 27861.0], [98.9, 27933.0], [99.0, 28011.0], [99.1, 28109.0], [99.2, 28239.0], [99.3, 28397.0], [99.4, 28495.0], [99.5, 28660.0], [99.6, 28754.0], [99.7, 29012.0], [99.8, 29970.0], [99.9, 30002.0], [100.0, 30013.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6344.0, "series": [{"data": [[0.0, 14.0], [200.0, 204.0], [300.0, 1325.0], [400.0, 971.0], [500.0, 465.0], [600.0, 223.0], [700.0, 139.0], [800.0, 76.0], [900.0, 76.0], [1000.0, 54.0], [1100.0, 31.0], [1200.0, 26.0], [1300.0, 14.0], [1400.0, 17.0], [1500.0, 19.0], [1600.0, 8.0], [1700.0, 8.0], [1800.0, 8.0], [1900.0, 16.0], [2000.0, 9.0], [2100.0, 6.0], [2300.0, 4.0], [2200.0, 11.0], [2400.0, 12.0], [2500.0, 11.0], [2600.0, 6.0], [2700.0, 13.0], [2800.0, 7.0], [2900.0, 19.0], [3000.0, 6.0], [3100.0, 8.0], [3200.0, 16.0], [3300.0, 9.0], [3400.0, 13.0], [3500.0, 16.0], [3700.0, 11.0], [3600.0, 4.0], [3800.0, 5.0], [3900.0, 8.0], [4000.0, 6.0], [4200.0, 6.0], [4300.0, 2.0], [4100.0, 8.0], [4600.0, 6.0], [4500.0, 6.0], [4400.0, 8.0], [4800.0, 1.0], [4700.0, 3.0], [4900.0, 7.0], [5000.0, 6.0], [5100.0, 3.0], [5200.0, 6.0], [5300.0, 2.0], [5600.0, 7.0], [5400.0, 4.0], [5500.0, 6.0], [5700.0, 5.0], [5800.0, 2.0], [5900.0, 5.0], [6100.0, 2.0], [6000.0, 3.0], [6200.0, 1.0], [6500.0, 5.0], [6400.0, 3.0], [6600.0, 2.0], [6900.0, 2.0], [6700.0, 2.0], [6800.0, 1.0], [7100.0, 6.0], [7000.0, 3.0], [7200.0, 4.0], [7300.0, 2.0], [7400.0, 1.0], [7600.0, 2.0], [7500.0, 4.0], [7900.0, 2.0], [8000.0, 3.0], [8100.0, 2.0], [8500.0, 2.0], [8300.0, 1.0], [8700.0, 1.0], [8600.0, 1.0], [9000.0, 3.0], [8800.0, 2.0], [8900.0, 2.0], [9100.0, 2.0], [9200.0, 2.0], [9700.0, 6.0], [9600.0, 6.0], [9500.0, 2.0], [9300.0, 1.0], [10000.0, 2.0], [10100.0, 2.0], [9900.0, 6.0], [9800.0, 1.0], [10200.0, 8.0], [10700.0, 4.0], [10500.0, 8.0], [10300.0, 2.0], [10400.0, 7.0], [11100.0, 10.0], [10800.0, 5.0], [10900.0, 11.0], [11000.0, 3.0], [11200.0, 7.0], [11500.0, 4.0], [11300.0, 4.0], [11600.0, 5.0], [11700.0, 21.0], [11400.0, 5.0], [12000.0, 12.0], [12100.0, 9.0], [11800.0, 8.0], [12200.0, 12.0], [11900.0, 13.0], [12700.0, 23.0], [12300.0, 10.0], [12400.0, 12.0], [12600.0, 8.0], [12500.0, 7.0], [13100.0, 7.0], [13200.0, 22.0], [12800.0, 7.0], [13300.0, 5.0], [13000.0, 16.0], [12900.0, 14.0], [13600.0, 6.0], [13400.0, 18.0], [13500.0, 13.0], [13800.0, 6.0], [13700.0, 20.0], [13900.0, 9.0], [14300.0, 3.0], [14100.0, 7.0], [14000.0, 6.0], [14200.0, 10.0], [14700.0, 12.0], [14500.0, 7.0], [14400.0, 10.0], [14600.0, 6.0], [14800.0, 2.0], [15200.0, 10.0], [15000.0, 3.0], [14900.0, 13.0], [15100.0, 5.0], [15300.0, 3.0], [15800.0, 8.0], [15700.0, 17.0], [15500.0, 9.0], [15400.0, 13.0], [15600.0, 5.0], [16200.0, 26.0], [16300.0, 14.0], [16100.0, 12.0], [15900.0, 19.0], [16000.0, 7.0], [16400.0, 29.0], [17000.0, 16.0], [17400.0, 18.0], [16600.0, 16.0], [17200.0, 21.0], [16800.0, 15.0], [17800.0, 14.0], [18200.0, 34.0], [18000.0, 17.0], [17600.0, 21.0], [18400.0, 30.0], [19200.0, 24.0], [18600.0, 22.0], [19400.0, 16.0], [19000.0, 18.0], [18800.0, 11.0], [19600.0, 14.0], [20200.0, 16.0], [20400.0, 12.0], [20000.0, 10.0], [19800.0, 9.0], [20600.0, 7.0], [21400.0, 5.0], [21000.0, 8.0], [20800.0, 12.0], [21200.0, 7.0], [22200.0, 12.0], [21800.0, 2.0], [22400.0, 3.0], [21600.0, 4.0], [22000.0, 10.0], [22600.0, 7.0], [23200.0, 11.0], [22800.0, 3.0], [23400.0, 11.0], [23000.0, 6.0], [24000.0, 3.0], [24400.0, 7.0], [24200.0, 9.0], [23600.0, 9.0], [23800.0, 3.0], [25400.0, 6.0], [25200.0, 7.0], [24800.0, 6.0], [24600.0, 6.0], [25000.0, 6.0], [26200.0, 6.0], [26600.0, 4.0], [25800.0, 6.0], [25600.0, 3.0], [26000.0, 6.0], [26400.0, 8.0], [27600.0, 7.0], [27200.0, 9.0], [27400.0, 16.0], [26800.0, 3.0], [27000.0, 6.0], [28000.0, 7.0], [27800.0, 6.0], [28600.0, 8.0], [28400.0, 13.0], [28200.0, 22.0], [29400.0, 40.0], [28800.0, 16.0], [29000.0, 21.0], [29200.0, 33.0], [29600.0, 23.0], [30000.0, 164.0], [29800.0, 23.0], [31000.0, 893.0], [17300.0, 21.0], [16500.0, 16.0], [16900.0, 29.0], [16700.0, 22.0], [17100.0, 10.0], [17500.0, 22.0], [18100.0, 17.0], [17700.0, 25.0], [18300.0, 18.0], [17900.0, 28.0], [19100.0, 21.0], [19300.0, 14.0], [18500.0, 19.0], [18900.0, 28.0], [18700.0, 18.0], [19900.0, 16.0], [19700.0, 24.0], [20300.0, 8.0], [20100.0, 12.0], [19500.0, 9.0], [20900.0, 13.0], [21300.0, 6.0], [20500.0, 9.0], [21500.0, 8.0], [21100.0, 13.0], [20700.0, 6.0], [22500.0, 9.0], [21700.0, 12.0], [21900.0, 5.0], [22300.0, 6.0], [22100.0, 4.0], [23100.0, 9.0], [23500.0, 8.0], [22900.0, 6.0], [23300.0, 6.0], [22700.0, 8.0], [23700.0, 12.0], [24100.0, 8.0], [23900.0, 12.0], [24300.0, 7.0], [24500.0, 6.0], [25500.0, 5.0], [24900.0, 9.0], [25100.0, 3.0], [24700.0, 11.0], [25300.0, 2.0], [25700.0, 10.0], [26100.0, 5.0], [25900.0, 6.0], [26500.0, 3.0], [26300.0, 4.0], [26700.0, 7.0], [27300.0, 3.0], [26900.0, 8.0], [27500.0, 6.0], [27100.0, 5.0], [28100.0, 8.0], [27900.0, 13.0], [27700.0, 14.0], [28300.0, 8.0], [28500.0, 10.0], [29100.0, 11.0], [29300.0, 21.0], [28900.0, 24.0], [28700.0, 24.0], [29500.0, 27.0], [29900.0, 128.0], [29700.0, 41.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[0.0, 6344.0], [100.0, 62.0], [200.0, 53.0], [300.0, 29.0], [400.0, 20.0], [500.0, 13.0], [600.0, 7.0], [700.0, 6.0], [800.0, 8.0], [900.0, 8.0], [1000.0, 4.0], [1100.0, 9.0], [1200.0, 10.0], [1300.0, 9.0], [1400.0, 9.0], [1500.0, 12.0], [1600.0, 6.0], [1700.0, 2.0], [1800.0, 4.0], [1900.0, 6.0], [2000.0, 5.0], [2100.0, 11.0], [2300.0, 6.0], [2200.0, 4.0], [2400.0, 5.0], [2500.0, 7.0], [2600.0, 2.0], [2700.0, 12.0], [2800.0, 8.0], [2900.0, 5.0], [3000.0, 5.0], [3100.0, 6.0], [3200.0, 4.0], [3300.0, 5.0], [3400.0, 4.0], [3500.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 5.0], [3900.0, 1.0], [4000.0, 3.0], [4100.0, 1.0], [4300.0, 1.0], [4600.0, 1.0], [4800.0, 1.0], [5500.0, 1.0], [5600.0, 1.0], [5400.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [6600.0, 1.0], [6900.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [7400.0, 2.0], [7500.0, 1.0], [7800.0, 3.0], [7900.0, 4.0], [8100.0, 2.0], [8000.0, 2.0], [8600.0, 4.0], [8500.0, 4.0], [8700.0, 7.0], [8400.0, 7.0], [8200.0, 1.0], [8300.0, 2.0], [8800.0, 5.0], [9200.0, 3.0], [9100.0, 1.0], [9000.0, 4.0], [8900.0, 3.0], [9400.0, 12.0], [9300.0, 4.0], [9700.0, 5.0], [9500.0, 5.0], [9600.0, 5.0], [9800.0, 6.0], [10200.0, 8.0], [10000.0, 7.0], [10100.0, 4.0], [9900.0, 5.0], [10400.0, 13.0], [10300.0, 7.0], [10500.0, 6.0], [10700.0, 7.0], [10600.0, 3.0], [11100.0, 1.0], [10900.0, 1.0], [11000.0, 3.0], [10800.0, 2.0], [11200.0, 2.0], [11600.0, 3.0], [11500.0, 1.0], [11400.0, 1.0], [11800.0, 1.0], [12000.0, 2.0], [11900.0, 3.0], [12200.0, 5.0], [12100.0, 1.0], [12600.0, 2.0], [12500.0, 1.0], [12700.0, 3.0], [12300.0, 2.0], [12800.0, 2.0], [13200.0, 6.0], [13100.0, 5.0], [12900.0, 4.0], [13000.0, 2.0], [13300.0, 5.0], [13500.0, 4.0], [13600.0, 7.0], [13400.0, 6.0], [13800.0, 5.0], [13700.0, 4.0], [14200.0, 12.0], [14300.0, 4.0], [13900.0, 4.0], [14000.0, 4.0], [14100.0, 4.0], [14500.0, 6.0], [14700.0, 9.0], [14600.0, 5.0], [14800.0, 8.0], [14400.0, 5.0], [15200.0, 15.0], [15100.0, 9.0], [15300.0, 6.0], [15000.0, 10.0], [14900.0, 3.0], [15400.0, 10.0], [15800.0, 3.0], [15500.0, 4.0], [15600.0, 3.0], [15700.0, 5.0], [15900.0, 8.0], [16300.0, 4.0], [16200.0, 4.0], [16000.0, 6.0], [16400.0, 7.0], [17400.0, 4.0], [16600.0, 4.0], [16800.0, 2.0], [17200.0, 1.0], [17000.0, 1.0], [18400.0, 2.0], [18000.0, 2.0], [18200.0, 3.0], [17600.0, 3.0], [19400.0, 1.0], [19000.0, 3.0], [18800.0, 1.0], [18600.0, 2.0], [19800.0, 3.0], [19600.0, 2.0], [20400.0, 3.0], [20000.0, 1.0], [20200.0, 1.0], [20600.0, 5.0], [20800.0, 1.0], [21400.0, 2.0], [21000.0, 2.0], [21200.0, 2.0], [22200.0, 1.0], [22400.0, 2.0], [21800.0, 1.0], [21600.0, 1.0], [23000.0, 3.0], [23400.0, 2.0], [22600.0, 2.0], [23200.0, 1.0], [22800.0, 2.0], [24400.0, 3.0], [24200.0, 1.0], [23800.0, 1.0], [25000.0, 1.0], [25200.0, 7.0], [25400.0, 2.0], [24800.0, 2.0], [24600.0, 2.0], [26600.0, 9.0], [26000.0, 7.0], [26200.0, 4.0], [25800.0, 4.0], [26400.0, 8.0], [25600.0, 5.0], [27400.0, 15.0], [27600.0, 10.0], [27200.0, 12.0], [27000.0, 4.0], [26800.0, 4.0], [28600.0, 6.0], [28000.0, 7.0], [27800.0, 10.0], [28200.0, 6.0], [28400.0, 7.0], [29000.0, 5.0], [28800.0, 2.0], [30000.0, 10.0], [17300.0, 1.0], [16500.0, 8.0], [16900.0, 5.0], [16700.0, 2.0], [17100.0, 2.0], [17500.0, 3.0], [17700.0, 2.0], [18100.0, 2.0], [17900.0, 1.0], [19300.0, 3.0], [18900.0, 4.0], [18500.0, 1.0], [19100.0, 1.0], [19700.0, 3.0], [19500.0, 3.0], [20100.0, 1.0], [19900.0, 1.0], [21500.0, 2.0], [20900.0, 5.0], [21300.0, 1.0], [20500.0, 3.0], [20700.0, 2.0], [22500.0, 1.0], [22300.0, 1.0], [22100.0, 3.0], [21700.0, 1.0], [21900.0, 3.0], [22900.0, 1.0], [23500.0, 1.0], [22700.0, 3.0], [23300.0, 3.0], [23700.0, 3.0], [24100.0, 2.0], [23900.0, 2.0], [24500.0, 1.0], [24700.0, 5.0], [25300.0, 2.0], [24900.0, 3.0], [25500.0, 2.0], [25100.0, 4.0], [26500.0, 4.0], [26300.0, 2.0], [25700.0, 5.0], [26100.0, 3.0], [25900.0, 2.0], [27100.0, 8.0], [26700.0, 5.0], [27500.0, 6.0], [27300.0, 11.0], [26900.0, 2.0], [28500.0, 5.0], [27700.0, 17.0], [27900.0, 8.0], [28100.0, 5.0], [28300.0, 7.0], [28700.0, 7.0], [29100.0, 1.0], [28900.0, 1.0], [29300.0, 1.0], [29700.0, 1.0], [29900.0, 6.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 31000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1139.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9018.0, "series": [{"data": [[0.0, 9018.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1195.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3733.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1139.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.047619047619047, "minX": 1.69972698E12, "maxY": 120.0, "series": [{"data": [[1.6997277E12, 120.0], [1.69972704E12, 51.937207748831], [1.6997271E12, 105.49345650500388], [1.6997274E12, 120.0], [1.69972746E12, 120.0], [1.69972776E12, 120.0], [1.69972782E12, 120.0], [1.69972716E12, 120.0], [1.69972722E12, 120.0], [1.69972752E12, 120.0], [1.69972758E12, 120.0], [1.69972788E12, 112.94177583697235], [1.69972794E12, 11.047619047619047], [1.69972728E12, 120.0], [1.69972698E12, 14.586107091172215], [1.69972734E12, 120.0], [1.69972764E12, 120.0]], "isOverall": false, "label": "OnlineConversion", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69972794E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.933333333333334, "minX": 1.0, "maxY": 15819.5, "series": [{"data": [[2.0, 10746.666666666666], [3.0, 4477.571428571428], [4.0, 3712.6666666666665], [5.0, 3946.222222222222], [6.0, 3828.3333333333335], [7.0, 3391.727272727273], [8.0, 594.3333333333334], [9.0, 632.6666666666666], [10.0, 542.5714285714286], [11.0, 666.3333333333333], [12.0, 2211.947368421053], [13.0, 2398.9411764705883], [14.0, 2189.904761904762], [15.0, 2333.2631578947367], [16.0, 732.2857142857143], [17.0, 724.05], [18.0, 2104.090909090909], [19.0, 2166.809523809524], [20.0, 2295.818181818182], [21.0, 2281.7142857142853], [22.0, 2045.1923076923076], [23.0, 2259.6818181818185], [24.0, 2504.1499999999996], [25.0, 2375.65], [26.0, 2327.041666666667], [27.0, 3000.785714285714], [28.0, 2988.2666666666664], [29.0, 3792.461538461538], [30.0, 1622.75], [31.0, 2147.0], [32.0, 3448.8461538461543], [33.0, 5162.777777777777], [34.0, 6869.833333333333], [35.0, 4908.923076923077], [36.0, 4503.733333333334], [37.0, 2557.375], [38.0, 3622.0], [39.0, 2597.8235294117653], [40.0, 3659.3999999999996], [41.0, 5382.0], [42.0, 3825.3529411764703], [43.0, 3184.0], [44.0, 4010.666666666667], [45.0, 1945.1818181818182], [46.0, 1900.8000000000002], [47.0, 3949.000000000001], [48.0, 5461.571428571428], [49.0, 1506.6470588235295], [50.0, 4941.615384615385], [51.0, 4686.454545454546], [52.0, 6262.714285714286], [53.0, 10749.333333333334], [54.0, 4460.6], [55.0, 3350.4285714285716], [56.0, 3407.846153846154], [57.0, 2387.7], [58.0, 6846.5], [59.0, 6948.0], [60.0, 4765.533333333333], [61.0, 4063.5789473684213], [62.0, 4380.125], [63.0, 1534.625], [64.0, 5099.666666666666], [65.0, 5471.695652173913], [66.0, 3535.75], [67.0, 1624.6666666666667], [68.0, 3048.6000000000004], [69.0, 2331.9285714285716], [70.0, 6197.235294117647], [71.0, 2411.0], [72.0, 8329.083333333334], [73.0, 6363.666666666666], [74.0, 3986.0], [75.0, 5356.7], [76.0, 5096.0], [77.0, 6444.5], [78.0, 7086.666666666667], [79.0, 7805.307692307692], [80.0, 6630.583333333333], [81.0, 3584.4999999999995], [82.0, 3495.4166666666674], [83.0, 8211.142857142857], [84.0, 5835.125], [85.0, 4149.5], [86.0, 5012.933333333333], [87.0, 4112.75], [88.0, 4053.8], [89.0, 9585.461538461537], [90.0, 4386.679999999999], [91.0, 3789.666666666667], [92.0, 2398.857142857143], [93.0, 4257.388888888889], [94.0, 4514.61111111111], [95.0, 3813.5], [96.0, 4764.529411764706], [97.0, 3984.333333333333], [98.0, 4030.866666666667], [99.0, 7108.375], [100.0, 8731.842105263158], [101.0, 7513.333333333333], [102.0, 5444.0], [103.0, 10758.0], [104.0, 12538.0], [105.0, 13749.499999999998], [106.0, 5779.363636363637], [107.0, 13599.928571428572], [108.0, 9193.999999999998], [109.0, 7904.444444444444], [110.0, 7528.625000000001], [111.0, 11516.222222222223], [112.0, 8633.0], [113.0, 7013.0], [114.0, 6830.888888888889], [115.0, 4397.142857142857], [116.0, 12129.545454545456], [117.0, 7145.0], [118.0, 7248.111111111111], [119.0, 7929.5], [120.0, 13319.426960619303], [1.0, 15819.5]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[106.81113029618776, 11428.624651348111]], "isOverall": false, "label": "Leer Archivo-Aggregated", "isController": false}, {"data": [[2.0, 13.333333333333334], [3.0, 31.333333333333336], [4.0, 13.111111111111109], [5.0, 17.555555555555557], [6.0, 17.1], [7.0, 26.099999999999998], [8.0, 1849.8666666666666], [9.0, 1756.5], [10.0, 1641.2941176470588], [11.0, 23.6875], [12.0, 1468.157894736842], [13.0, 35.0], [14.0, 48.47619047619047], [15.0, 36.94736842105263], [16.0, 1293.0454545454545], [17.0, 1382.095238095238], [18.0, 86.41666666666667], [19.0, 90.21052631578947], [20.0, 99.27272727272728], [21.0, 49.09523809523811], [22.0, 75.08333333333331], [23.0, 131.21052631578948], [24.0, 169.66666666666666], [25.0, 226.4761904761905], [26.0, 121.45000000000002], [27.0, 207.68421052631578], [28.0, 61.928571428571416], [29.0, 366.9166666666667], [30.0, 3140.4444444444443], [31.0, 3727.6666666666665], [32.0, 767.15], [33.0, 624.3636363636364], [34.0, 419.42857142857144], [35.0, 195.77777777777777], [36.0, 154.625], [37.0, 185.27272727272728], [38.0, 5053.454545454545], [39.0, 2077.0], [40.0, 2291.6428571428573], [41.0, 609.3529411764706], [42.0, 352.6111111111111], [43.0, 293.7142857142857], [44.0, 747.8461538461538], [45.0, 3221.1111111111113], [46.0, 3400.0666666666666], [47.0, 25.857142857142858], [48.0, 1712.692307692308], [49.0, 2141.608695652174], [50.0, 366.1111111111111], [51.0, 28.71428571428571], [52.0, 1522.2222222222222], [53.0, 1963.6], [54.0, 1276.6666666666667], [55.0, 413.09090909090907], [56.0, 710.6666666666666], [57.0, 437.1666666666667], [58.0, 1704.0], [59.0, 1804.1538461538462], [60.0, 1751.1250000000002], [61.0, 1058.9285714285713], [62.0, 413.0], [63.0, 1336.9999999999998], [64.0, 1412.8500000000001], [65.0, 654.304347826087], [66.0, 506.77777777777777], [67.0, 405.1052631578948], [68.0, 587.235294117647], [69.0, 1197.0000000000002], [70.0, 12.285714285714286], [71.0, 10.700000000000001], [72.0, 1198.4666666666667], [73.0, 11.545454545454547], [74.0, 1542.1333333333332], [75.0, 1228.0], [76.0, 712.1111111111111], [77.0, 1219.6666666666667], [78.0, 12.727272727272728], [79.0, 14.545454545454545], [80.0, 19.375], [81.0, 3517.909090909091], [82.0, 793.0909090909091], [83.0, 12.142857142857142], [84.0, 2450.0909090909095], [85.0, 743.1818181818181], [86.0, 749.8571428571429], [87.0, 1534.384615384615], [88.0, 15.499999999999998], [89.0, 2958.2941176470586], [90.0, 2227.9090909090905], [91.0, 1473.0555555555557], [92.0, 394.4761904761905], [93.0, 894.7777777777777], [94.0, 15.058823529411763], [95.0, 988.6666666666666], [96.0, 1002.9411764705881], [97.0, 1154.8], [98.0, 583.0666666666665], [99.0, 9.933333333333334], [100.0, 2070.15], [101.0, 3729.785714285715], [102.0, 12.714285714285715], [103.0, 394.4], [104.0, 12.999999999999998], [105.0, 11.0], [106.0, 2334.3636363636365], [107.0, 15.909090909090908], [108.0, 2952.066666666666], [109.0, 399.4], [110.0, 175.88888888888889], [111.0, 524.8333333333334], [112.0, 3757.0], [113.0, 10.8], [114.0, 2915.6923076923076], [115.0, 11.8], [116.0, 677.4], [117.0, 1666.9166666666667], [118.0, 2994.0], [119.0, 149.22222222222223], [120.0, 2441.916975412609], [1.0, 43.5]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[106.57848067760735, 2123.6398888300682]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 120.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 61.36666666666667, "minX": 1.69972698E12, "maxY": 1.897698493E8, "series": [{"data": [[1.6997277E12, 1.121259931E8], [1.69972704E12, 1.897698493E8], [1.6997271E12, 1.6187072665E8], [1.6997274E12, 1.0370349463333334E8], [1.69972746E12, 1.0449347055E8], [1.69972776E12, 9.107146515E7], [1.69972782E12, 9.44926989E7], [1.69972716E12, 9.712444646666667E7], [1.69972722E12, 9.159742343333334E7], [1.69972752E12, 9.159771541666667E7], [1.69972758E12, 8.94917592E7], [1.69972788E12, 6.843372378333333E7], [1.69972794E12, 1053052.8], [1.69972728E12, 1.0738770743333334E8], [1.69972698E12, 8.869956578333333E7], [1.69972734E12, 1.14230897E8], [1.69972764E12, 7.89641801E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6997277E12, 5093.35], [1.69972704E12, 8496.366666666667], [1.6997271E12, 7251.85], [1.6997274E12, 4744.533333333334], [1.69972746E12, 4834.65], [1.69972776E12, 4883.883333333333], [1.69972782E12, 4668.55], [1.69972716E12, 4798.45], [1.69972722E12, 4363.183333333333], [1.69972752E12, 4452.2], [1.69972758E12, 4321.2], [1.69972788E12, 3887.85], [1.69972794E12, 61.36666666666667], [1.69972728E12, 4803.7], [1.69972698E12, 3937.0333333333333], [1.69972734E12, 5090.416666666667], [1.69972764E12, 4092.266666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69972794E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 53.35028248587572, "minX": 1.69972698E12, "maxY": 30455.933333333338, "series": [{"data": [[1.6997277E12, 12548.155789473692], [1.69972704E12, 2725.150760719227], [1.6997271E12, 7439.751572327042], [1.6997274E12, 13478.511210762326], [1.69972746E12, 13365.568627450984], [1.69972776E12, 13075.886363636366], [1.69972782E12, 13246.997854077254], [1.69972716E12, 12748.301075268828], [1.69972722E12, 13901.160997732417], [1.69972752E12, 13808.233480176223], [1.69972758E12, 14394.796766743642], [1.69972788E12, 13933.384], [1.69972794E12, 30455.933333333338], [1.69972728E12, 13335.944954128443], [1.69972698E12, 728.6913946587542], [1.69972734E12, 13090.233115468425], [1.69972764E12, 15118.023529411763]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.6997277E12, 2699.102725366872], [1.69972704E12, 622.9715762273905], [1.6997271E12, 1582.0361990950228], [1.6997274E12, 2539.813063063064], [1.69972746E12, 2371.2699784017273], [1.69972776E12, 1928.5958762886582], [1.69972782E12, 2427.401301518439], [1.69972716E12, 2588.1019108280225], [1.69972722E12, 2781.717539863327], [1.69972752E12, 1957.9469026548677], [1.69972758E12, 2182.1651376146788], [1.69972788E12, 3742.365384615384], [1.69972794E12, 27469.833333333332], [1.69972728E12, 3182.726027397259], [1.69972698E12, 53.35028248587572], [1.69972734E12, 2346.0911062906744], [1.69972764E12, 2010.0333333333347]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69972794E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 53.23728813559317, "minX": 1.69972698E12, "maxY": 28640.86666666666, "series": [{"data": [[1.6997277E12, 11176.926315789478], [1.69972704E12, 789.127247579529], [1.6997271E12, 4671.312893081761], [1.6997274E12, 12391.55605381166], [1.69972746E12, 12125.44444444444], [1.69972776E12, 12089.973140495858], [1.69972782E12, 11864.61373390558], [1.69972716E12, 11740.74838709678], [1.69972722E12, 12359.235827664392], [1.69972752E12, 12786.837004405283], [1.69972758E12, 13197.279445727467], [1.69972788E12, 12941.192000000001], [1.69972794E12, 28640.86666666666], [1.69972728E12, 11755.135321100908], [1.69972698E12, 317.68842729970316], [1.69972734E12, 11421.729847494546], [1.69972764E12, 14170.331764705894]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.6997277E12, 2699.0775681341725], [1.69972704E12, 622.9173126614984], [1.6997271E12, 1582.0015082956259], [1.6997274E12, 2539.8040540540546], [1.69972746E12, 2371.25485961123], [1.69972776E12, 1928.5855670103078], [1.69972782E12, 2427.3861171366607], [1.69972716E12, 2588.0912951167725], [1.69972722E12, 2781.703872437358], [1.69972752E12, 1957.938053097343], [1.69972758E12, 2182.1513761467872], [1.69972788E12, 3742.355769230772], [1.69972794E12, 27469.833333333332], [1.69972728E12, 3182.721461187216], [1.69972698E12, 53.23728813559317], [1.69972734E12, 2346.0889370932773], [1.69972764E12, 2010.0261904761905]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69972794E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69972698E12, "maxY": 1.3297180043383947, "series": [{"data": [[1.6997277E12, 0.1284210526315789], [1.69972704E12, 0.008298755186721997], [1.6997271E12, 0.04088050314465411], [1.6997274E12, 0.09192825112107623], [1.69972746E12, 0.1176470588235295], [1.69972776E12, 0.04958677685950411], [1.69972782E12, 0.05364806866952786], [1.69972716E12, 0.1612903225806452], [1.69972722E12, 0.11791383219954646], [1.69972752E12, 0.07929515418502205], [1.69972758E12, 0.048498845265588904], [1.69972788E12, 0.05066666666666669], [1.69972794E12, 0.0], [1.69972728E12, 0.1444954128440366], [1.69972698E12, 0.0], [1.69972734E12, 0.10893246187363838], [1.69972764E12, 0.06117647058823526]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.6997277E12, 0.4989517819706499], [1.69972704E12, 0.4211886304909557], [1.6997271E12, 0.6108597285067877], [1.6997274E12, 0.7499999999999999], [1.69972746E12, 0.6457883369330449], [1.69972776E12, 0.5711340206185569], [1.69972782E12, 1.3297180043383947], [1.69972716E12, 0.7091295116772826], [1.69972722E12, 0.7904328018223236], [1.69972752E12, 0.6283185840707962], [1.69972758E12, 0.6467889908256874], [1.69972788E12, 0.46153846153846156], [1.69972794E12, 0.5], [1.69972728E12, 0.6392694063926938], [1.69972698E12, 0.5112994350282489], [1.69972734E12, 0.5683297180043388], [1.69972764E12, 0.7428571428571429]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69972794E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.69972698E12, "maxY": 30026.0, "series": [{"data": [[1.6997277E12, 30026.0], [1.69972704E12, 29978.0], [1.6997271E12, 29935.0], [1.6997274E12, 29996.0], [1.69972746E12, 30003.0], [1.69972776E12, 29977.0], [1.69972782E12, 30009.0], [1.69972716E12, 30024.0], [1.69972722E12, 29981.0], [1.69972752E12, 30008.0], [1.69972758E12, 30015.0], [1.69972788E12, 29992.0], [1.69972794E12, 29911.0], [1.69972728E12, 29927.0], [1.69972698E12, 1854.0], [1.69972734E12, 29466.0], [1.69972764E12, 29997.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6997277E12, 24877.200000000004], [1.69972704E12, 4237.4000000000015], [1.6997271E12, 16606.4], [1.6997274E12, 26370.2], [1.69972746E12, 25637.89999999999], [1.69972776E12, 12712.6], [1.69972782E12, 16442.799999999996], [1.69972716E12, 16985.6], [1.69972722E12, 21324.80000000001], [1.69972752E12, 17363.4], [1.69972758E12, 20114.100000000002], [1.69972788E12, 12493.0], [1.69972794E12, 29860.2], [1.69972728E12, 24756.7], [1.69972698E12, 961.4000000000002], [1.69972734E12, 24615.0], [1.69972764E12, 21546.99999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6997277E12, 29769.96], [1.69972704E12, 19200.32], [1.6997271E12, 28894.710000000003], [1.6997274E12, 29944.0], [1.69972746E12, 29832.23], [1.69972776E12, 29513.399999999972], [1.69972782E12, 29729.95], [1.69972716E12, 29945.54], [1.69972722E12, 29890.44], [1.69972752E12, 29819.54], [1.69972758E12, 29968.91], [1.69972788E12, 29710.17], [1.69972794E12, 29911.0], [1.69972728E12, 29299.039999999997], [1.69972698E12, 1284.8800000000006], [1.69972734E12, 28484.8], [1.69972764E12, 29470.489999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6997277E12, 28708.799999999996], [1.69972704E12, 8079.6], [1.6997271E12, 24941.1], [1.6997274E12, 29001.75], [1.69972746E12, 28812.399999999998], [1.69972776E12, 13731.0], [1.69972782E12, 26747.149999999998], [1.69972716E12, 28658.149999999994], [1.69972722E12, 27999.399999999998], [1.69972752E12, 27368.149999999998], [1.69972758E12, 27893.05], [1.69972788E12, 28601.1], [1.69972794E12, 29911.0], [1.69972728E12, 26454.899999999998], [1.69972698E12, 1080.0], [1.69972734E12, 27301.199999999993], [1.69972764E12, 25428.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6997277E12, 7.0], [1.69972704E12, 7.0], [1.6997271E12, 7.0], [1.6997274E12, 7.0], [1.69972746E12, 7.0], [1.69972776E12, 7.0], [1.69972782E12, 7.0], [1.69972716E12, 7.0], [1.69972722E12, 8.0], [1.69972752E12, 6.0], [1.69972758E12, 7.0], [1.69972788E12, 7.0], [1.69972794E12, 27249.0], [1.69972728E12, 8.0], [1.69972698E12, 9.0], [1.69972734E12, 7.0], [1.69972764E12, 7.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6997277E12, 343.0], [1.69972704E12, 472.0], [1.6997271E12, 321.0], [1.6997274E12, 330.5], [1.69972746E12, 314.5], [1.69972776E12, 230.0], [1.69972782E12, 340.0], [1.69972716E12, 271.0], [1.69972722E12, 280.0], [1.69972752E12, 25.0], [1.69972758E12, 39.0], [1.69972788E12, 475.5], [1.69972794E12, 27654.0], [1.69972728E12, 356.0], [1.69972698E12, 290.0], [1.69972734E12, 357.0], [1.69972764E12, 24.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69972794E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 31008.0, "series": [{"data": [[2.0, 9244.0], [3.0, 14539.0], [4.0, 2849.0], [5.0, 10096.0], [6.0, 416.0], [7.0, 349.0], [8.0, 143.5], [9.0, 321.5], [10.0, 308.0], [11.0, 334.0], [12.0, 321.0], [13.0, 337.0], [14.0, 277.5], [15.0, 327.0], [16.0, 332.0], [17.0, 328.0], [18.0, 294.5], [19.0, 336.0], [20.0, 294.0], [21.0, 319.5], [22.0, 335.0], [23.0, 331.0], [24.0, 374.0], [25.0, 274.0], [26.0, 360.0], [27.0, 345.0], [28.0, 357.0], [29.0, 97.0], [30.0, 328.0], [31.0, 332.0], [32.0, 332.0], [33.0, 398.5], [35.0, 334.0], [34.0, 313.0], [37.0, 325.0], [36.0, 342.5], [39.0, 316.0], [38.0, 565.5], [40.0, 345.0], [41.0, 683.0], [42.0, 378.5], [43.0, 27.0], [44.0, 303.5], [45.0, 492.0], [47.0, 603.0], [46.0, 302.5], [49.0, 1160.0], [50.0, 547.0], [1.0, 15032.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 31003.5], [34.0, 31003.0], [37.0, 31008.0], [43.0, 31005.0], [3.0, 30004.0], [50.0, 5.0], [4.0, 30004.0], [5.0, 30005.0], [6.0, 31002.0], [7.0, 31003.0], [8.0, 31003.5], [9.0, 31003.0], [10.0, 31003.0], [11.0, 31003.0], [12.0, 31003.0], [13.0, 31003.0], [14.0, 31003.0], [15.0, 31003.0], [16.0, 31003.0], [1.0, 31003.0], [17.0, 31003.0], [18.0, 31003.0], [19.0, 31003.0], [20.0, 31003.0], [21.0, 31003.0], [22.0, 31004.0], [23.0, 31003.0], [24.0, 31003.0], [25.0, 31003.0], [26.0, 31004.0], [27.0, 31004.5], [28.0, 31004.0], [29.0, 30005.0], [30.0, 31004.0], [31.0, 31005.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 50.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 30003.5, "series": [{"data": [[2.0, 8607.0], [3.0, 14331.0], [4.0, 2157.0], [5.0, 9235.0], [6.0, 158.0], [7.0, 157.0], [8.0, 82.5], [9.0, 153.0], [10.0, 149.0], [11.0, 152.0], [12.0, 149.0], [13.0, 156.0], [14.0, 145.5], [15.0, 151.0], [16.0, 151.0], [17.0, 152.0], [18.0, 150.0], [19.0, 155.0], [20.0, 149.0], [21.0, 155.5], [22.0, 155.0], [23.0, 155.0], [24.0, 159.5], [25.0, 149.0], [26.0, 160.0], [27.0, 175.0], [28.0, 170.0], [29.0, 97.0], [30.0, 152.0], [31.0, 171.0], [32.0, 297.5], [33.0, 180.0], [35.0, 186.0], [34.0, 151.0], [37.0, 175.0], [36.0, 183.5], [39.0, 215.0], [38.0, 246.0], [40.0, 182.5], [41.0, 323.0], [42.0, 218.5], [43.0, 27.0], [44.0, 231.0], [45.0, 317.0], [47.0, 280.0], [46.0, 149.0], [49.0, 601.0], [50.0, 228.0], [1.0, 14053.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 29565.0], [34.0, 28001.0], [37.0, 3829.0], [43.0, 5743.0], [3.0, 30003.5], [50.0, 5.0], [4.0, 29990.0], [5.0, 30003.0], [6.0, 29982.0], [7.0, 29192.0], [8.0, 28989.0], [9.0, 29497.5], [10.0, 29036.0], [11.0, 28914.0], [12.0, 29417.0], [13.0, 29278.5], [14.0, 29291.0], [15.0, 29247.0], [16.0, 29069.0], [1.0, 28507.5], [17.0, 29385.0], [18.0, 29193.0], [19.0, 29283.0], [20.0, 29026.0], [21.0, 29274.0], [22.0, 29025.0], [23.0, 29266.0], [24.0, 29121.0], [25.0, 29695.0], [26.0, 29004.0], [27.0, 10316.5], [28.0, 29215.0], [29.0, 29988.0], [30.0, 29024.0], [31.0, 9744.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 50.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9.8, "minX": 1.69972698E12, "maxY": 25.95, "series": [{"data": [[1.6997277E12, 15.866666666666667], [1.69972704E12, 25.95], [1.6997271E12, 22.266666666666666], [1.6997274E12, 14.833333333333334], [1.69972746E12, 15.366666666666667], [1.69972776E12, 16.15], [1.69972782E12, 15.45], [1.69972716E12, 15.6], [1.69972722E12, 14.666666666666666], [1.69972752E12, 15.1], [1.69972758E12, 14.483333333333333], [1.69972788E12, 9.8], [1.69972728E12, 14.566666666666666], [1.69972698E12, 11.9], [1.69972734E12, 15.333333333333334], [1.69972764E12, 14.083333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69972788E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69972698E12, "maxY": 24.916666666666668, "series": [{"data": [[1.6997277E12, 15.05], [1.69972704E12, 24.916666666666668], [1.6997271E12, 21.3], [1.6997274E12, 13.966666666666667], [1.69972746E12, 14.333333333333334], [1.69972776E12, 13.85], [1.69972782E12, 13.666666666666666], [1.69972716E12, 14.0], [1.69972722E12, 13.116666666666667], [1.69972752E12, 13.333333333333334], [1.69972758E12, 12.933333333333334], [1.69972788E12, 9.266666666666667], [1.69972794E12, 0.16666666666666666], [1.69972728E12, 14.1], [1.69972698E12, 11.516666666666667], [1.69972734E12, 14.916666666666666], [1.69972764E12, 12.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69972704E12, 0.016666666666666666], [1.69972788E12, 0.21666666666666667]], "isOverall": false, "label": "422", "isController": false}, {"data": [[1.69972722E12, 0.016666666666666666], [1.69972752E12, 0.1], [1.69972758E12, 0.08333333333333333], [1.6997274E12, 0.05], [1.69972788E12, 1.7166666666666666], [1.69972746E12, 0.03333333333333333], [1.69972794E12, 0.016666666666666666], [1.69972776E12, 0.8], [1.69972782E12, 0.31666666666666665], [1.69972716E12, 0.35], [1.69972764E12, 0.38333333333333336]], "isOverall": false, "label": "504", "isController": false}, {"data": [[1.6997277E12, 0.8166666666666667], [1.69972704E12, 0.016666666666666666], [1.6997271E12, 0.35], [1.6997274E12, 0.8166666666666667], [1.69972746E12, 1.0], [1.69972776E12, 1.5], [1.69972782E12, 1.4666666666666666], [1.69972716E12, 1.25], [1.69972722E12, 1.5333333333333334], [1.69972752E12, 1.6666666666666667], [1.69972758E12, 1.4666666666666666], [1.69972788E12, 0.25], [1.69972794E12, 0.16666666666666666], [1.69972728E12, 0.4666666666666667], [1.69972734E12, 0.4166666666666667], [1.69972764E12, 1.7]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69972794E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.69972698E12, "maxY": 12.9, "series": [{"data": [[1.6997277E12, 0.8166666666666667], [1.69972704E12, 0.03333333333333333], [1.6997271E12, 0.35], [1.6997274E12, 0.8666666666666667], [1.69972746E12, 1.0333333333333334], [1.69972776E12, 2.3], [1.69972782E12, 1.7833333333333334], [1.69972716E12, 1.6], [1.69972722E12, 1.55], [1.69972752E12, 1.7666666666666666], [1.69972758E12, 1.55], [1.69972788E12, 1.9166666666666667], [1.69972794E12, 0.18333333333333332], [1.69972728E12, 0.4666666666666667], [1.69972734E12, 0.4166666666666667], [1.69972764E12, 2.0833333333333335]], "isOverall": false, "label": "Leer Archivo-failure", "isController": false}, {"data": [[1.6997277E12, 7.1], [1.69972704E12, 12.016666666666667], [1.6997271E12, 10.25], [1.6997274E12, 6.566666666666666], [1.69972746E12, 6.616666666666666], [1.69972776E12, 5.766666666666667], [1.69972782E12, 5.983333333333333], [1.69972716E12, 6.15], [1.69972722E12, 5.8], [1.69972752E12, 5.8], [1.69972758E12, 5.666666666666667], [1.69972788E12, 4.333333333333333], [1.69972794E12, 0.06666666666666667], [1.69972728E12, 6.8], [1.69972698E12, 5.616666666666666], [1.69972734E12, 7.233333333333333], [1.69972764E12, 5.0]], "isOverall": false, "label": "Leer Archivo-success", "isController": false}, {"data": [[1.6997277E12, 7.95], [1.69972704E12, 12.9], [1.6997271E12, 11.05], [1.6997274E12, 7.4], [1.69972746E12, 7.716666666666667], [1.69972776E12, 8.083333333333334], [1.69972782E12, 7.683333333333334], [1.69972716E12, 7.85], [1.69972722E12, 7.316666666666666], [1.69972752E12, 7.533333333333333], [1.69972758E12, 7.266666666666667], [1.69972788E12, 4.933333333333334], [1.69972794E12, 0.1], [1.69972728E12, 7.3], [1.69972698E12, 5.9], [1.69972734E12, 7.683333333333334], [1.69972764E12, 7.0]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.69972788E12, 0.26666666666666666]], "isOverall": false, "label": "Login-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69972794E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.69972698E12, "maxY": 24.916666666666668, "series": [{"data": [[1.6997277E12, 15.05], [1.69972704E12, 24.916666666666668], [1.6997271E12, 21.3], [1.6997274E12, 13.966666666666667], [1.69972746E12, 14.333333333333334], [1.69972776E12, 13.85], [1.69972782E12, 13.666666666666666], [1.69972716E12, 14.0], [1.69972722E12, 13.116666666666667], [1.69972752E12, 13.333333333333334], [1.69972758E12, 12.933333333333334], [1.69972788E12, 9.266666666666667], [1.69972794E12, 0.16666666666666666], [1.69972728E12, 14.1], [1.69972698E12, 11.516666666666667], [1.69972734E12, 14.916666666666666], [1.69972764E12, 12.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6997277E12, 0.8166666666666667], [1.69972704E12, 0.03333333333333333], [1.6997271E12, 0.35], [1.6997274E12, 0.8666666666666667], [1.69972746E12, 1.0333333333333334], [1.69972776E12, 2.3], [1.69972782E12, 1.7833333333333334], [1.69972716E12, 1.6], [1.69972722E12, 1.55], [1.69972752E12, 1.7666666666666666], [1.69972758E12, 1.55], [1.69972788E12, 2.183333333333333], [1.69972794E12, 0.18333333333333332], [1.69972728E12, 0.4666666666666667], [1.69972734E12, 0.4166666666666667], [1.69972764E12, 2.0833333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69972794E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

