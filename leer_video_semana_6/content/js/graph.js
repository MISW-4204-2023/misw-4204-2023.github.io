/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 31030.0, "series": [{"data": [[0.0, 5.0], [0.1, 6.0], [0.2, 6.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 8.0], [0.7, 9.0], [0.8, 10.0], [0.9, 11.0], [1.0, 267.0], [1.1, 271.0], [1.2, 274.0], [1.3, 282.0], [1.4, 286.0], [1.5, 288.0], [1.6, 293.0], [1.7, 295.0], [1.8, 296.0], [1.9, 301.0], [2.0, 302.0], [2.1, 303.0], [2.2, 305.0], [2.3, 306.0], [2.4, 309.0], [2.5, 311.0], [2.6, 312.0], [2.7, 314.0], [2.8, 316.0], [2.9, 317.0], [3.0, 318.0], [3.1, 320.0], [3.2, 322.0], [3.3, 324.0], [3.4, 325.0], [3.5, 327.0], [3.6, 328.0], [3.7, 329.0], [3.8, 332.0], [3.9, 333.0], [4.0, 335.0], [4.1, 337.0], [4.2, 338.0], [4.3, 340.0], [4.4, 341.0], [4.5, 342.0], [4.6, 343.0], [4.7, 344.0], [4.8, 345.0], [4.9, 345.0], [5.0, 346.0], [5.1, 347.0], [5.2, 348.0], [5.3, 349.0], [5.4, 350.0], [5.5, 350.0], [5.6, 351.0], [5.7, 353.0], [5.8, 354.0], [5.9, 356.0], [6.0, 357.0], [6.1, 357.0], [6.2, 358.0], [6.3, 359.0], [6.4, 360.0], [6.5, 361.0], [6.6, 362.0], [6.7, 362.0], [6.8, 363.0], [6.9, 364.0], [7.0, 365.0], [7.1, 366.0], [7.2, 367.0], [7.3, 367.0], [7.4, 368.0], [7.5, 368.0], [7.6, 369.0], [7.7, 369.0], [7.8, 371.0], [7.9, 371.0], [8.0, 373.0], [8.1, 373.0], [8.2, 374.0], [8.3, 376.0], [8.4, 376.0], [8.5, 379.0], [8.6, 380.0], [8.7, 380.0], [8.8, 381.0], [8.9, 382.0], [9.0, 384.0], [9.1, 385.0], [9.2, 385.0], [9.3, 386.0], [9.4, 387.0], [9.5, 387.0], [9.6, 388.0], [9.7, 390.0], [9.8, 391.0], [9.9, 392.0], [10.0, 392.0], [10.1, 393.0], [10.2, 393.0], [10.3, 394.0], [10.4, 395.0], [10.5, 395.0], [10.6, 396.0], [10.7, 397.0], [10.8, 398.0], [10.9, 400.0], [11.0, 401.0], [11.1, 402.0], [11.2, 404.0], [11.3, 404.0], [11.4, 405.0], [11.5, 406.0], [11.6, 406.0], [11.7, 407.0], [11.8, 407.0], [11.9, 408.0], [12.0, 408.0], [12.1, 409.0], [12.2, 410.0], [12.3, 410.0], [12.4, 411.0], [12.5, 413.0], [12.6, 414.0], [12.7, 414.0], [12.8, 415.0], [12.9, 416.0], [13.0, 416.0], [13.1, 417.0], [13.2, 417.0], [13.3, 417.0], [13.4, 418.0], [13.5, 419.0], [13.6, 420.0], [13.7, 421.0], [13.8, 422.0], [13.9, 422.0], [14.0, 423.0], [14.1, 423.0], [14.2, 425.0], [14.3, 426.0], [14.4, 427.0], [14.5, 427.0], [14.6, 429.0], [14.7, 430.0], [14.8, 430.0], [14.9, 431.0], [15.0, 432.0], [15.1, 433.0], [15.2, 434.0], [15.3, 434.0], [15.4, 435.0], [15.5, 435.0], [15.6, 436.0], [15.7, 437.0], [15.8, 437.0], [15.9, 438.0], [16.0, 439.0], [16.1, 439.0], [16.2, 440.0], [16.3, 440.0], [16.4, 441.0], [16.5, 444.0], [16.6, 445.0], [16.7, 445.0], [16.8, 447.0], [16.9, 448.0], [17.0, 449.0], [17.1, 449.0], [17.2, 449.0], [17.3, 451.0], [17.4, 451.0], [17.5, 452.0], [17.6, 453.0], [17.7, 453.0], [17.8, 454.0], [17.9, 455.0], [18.0, 458.0], [18.1, 460.0], [18.2, 460.0], [18.3, 461.0], [18.4, 463.0], [18.5, 463.0], [18.6, 466.0], [18.7, 467.0], [18.8, 467.0], [18.9, 469.0], [19.0, 470.0], [19.1, 471.0], [19.2, 473.0], [19.3, 474.0], [19.4, 474.0], [19.5, 475.0], [19.6, 476.0], [19.7, 479.0], [19.8, 482.0], [19.9, 483.0], [20.0, 484.0], [20.1, 487.0], [20.2, 487.0], [20.3, 489.0], [20.4, 490.0], [20.5, 491.0], [20.6, 493.0], [20.7, 493.0], [20.8, 495.0], [20.9, 496.0], [21.0, 500.0], [21.1, 501.0], [21.2, 502.0], [21.3, 503.0], [21.4, 504.0], [21.5, 506.0], [21.6, 507.0], [21.7, 509.0], [21.8, 511.0], [21.9, 515.0], [22.0, 517.0], [22.1, 519.0], [22.2, 521.0], [22.3, 523.0], [22.4, 526.0], [22.5, 529.0], [22.6, 530.0], [22.7, 533.0], [22.8, 536.0], [22.9, 538.0], [23.0, 539.0], [23.1, 541.0], [23.2, 543.0], [23.3, 543.0], [23.4, 545.0], [23.5, 547.0], [23.6, 552.0], [23.7, 553.0], [23.8, 554.0], [23.9, 555.0], [24.0, 556.0], [24.1, 558.0], [24.2, 559.0], [24.3, 561.0], [24.4, 563.0], [24.5, 566.0], [24.6, 566.0], [24.7, 568.0], [24.8, 569.0], [24.9, 571.0], [25.0, 574.0], [25.1, 575.0], [25.2, 578.0], [25.3, 579.0], [25.4, 579.0], [25.5, 582.0], [25.6, 584.0], [25.7, 585.0], [25.8, 590.0], [25.9, 592.0], [26.0, 593.0], [26.1, 595.0], [26.2, 598.0], [26.3, 603.0], [26.4, 606.0], [26.5, 607.0], [26.6, 610.0], [26.7, 613.0], [26.8, 615.0], [26.9, 619.0], [27.0, 621.0], [27.1, 623.0], [27.2, 629.0], [27.3, 631.0], [27.4, 634.0], [27.5, 638.0], [27.6, 643.0], [27.7, 650.0], [27.8, 652.0], [27.9, 655.0], [28.0, 666.0], [28.1, 667.0], [28.2, 671.0], [28.3, 674.0], [28.4, 678.0], [28.5, 683.0], [28.6, 684.0], [28.7, 694.0], [28.8, 696.0], [28.9, 698.0], [29.0, 702.0], [29.1, 706.0], [29.2, 711.0], [29.3, 726.0], [29.4, 734.0], [29.5, 746.0], [29.6, 751.0], [29.7, 759.0], [29.8, 764.0], [29.9, 770.0], [30.0, 773.0], [30.1, 776.0], [30.2, 795.0], [30.3, 805.0], [30.4, 811.0], [30.5, 819.0], [30.6, 832.0], [30.7, 844.0], [30.8, 854.0], [30.9, 861.0], [31.0, 866.0], [31.1, 867.0], [31.2, 874.0], [31.3, 878.0], [31.4, 888.0], [31.5, 907.0], [31.6, 920.0], [31.7, 938.0], [31.8, 959.0], [31.9, 966.0], [32.0, 987.0], [32.1, 1004.0], [32.2, 1017.0], [32.3, 1020.0], [32.4, 1039.0], [32.5, 1048.0], [32.6, 1059.0], [32.7, 1091.0], [32.8, 1126.0], [32.9, 1151.0], [33.0, 1203.0], [33.1, 1238.0], [33.2, 1262.0], [33.3, 1300.0], [33.4, 1387.0], [33.5, 1436.0], [33.6, 1507.0], [33.7, 1530.0], [33.8, 1548.0], [33.9, 1565.0], [34.0, 1588.0], [34.1, 1628.0], [34.2, 1670.0], [34.3, 1736.0], [34.4, 1806.0], [34.5, 1912.0], [34.6, 2016.0], [34.7, 2070.0], [34.8, 2154.0], [34.9, 2372.0], [35.0, 2436.0], [35.1, 2535.0], [35.2, 2683.0], [35.3, 2748.0], [35.4, 2848.0], [35.5, 2970.0], [35.6, 3057.0], [35.7, 3098.0], [35.8, 3269.0], [35.9, 3308.0], [36.0, 3462.0], [36.1, 3555.0], [36.2, 3983.0], [36.3, 4057.0], [36.4, 4121.0], [36.5, 4272.0], [36.6, 4401.0], [36.7, 4628.0], [36.8, 4715.0], [36.9, 4967.0], [37.0, 5196.0], [37.1, 5339.0], [37.2, 5424.0], [37.3, 5523.0], [37.4, 5635.0], [37.5, 5893.0], [37.6, 5983.0], [37.7, 6043.0], [37.8, 6225.0], [37.9, 6349.0], [38.0, 6495.0], [38.1, 6816.0], [38.2, 6927.0], [38.3, 7034.0], [38.4, 7183.0], [38.5, 7278.0], [38.6, 7438.0], [38.7, 7509.0], [38.8, 7607.0], [38.9, 7762.0], [39.0, 7813.0], [39.1, 7948.0], [39.2, 7982.0], [39.3, 8229.0], [39.4, 8480.0], [39.5, 8753.0], [39.6, 8861.0], [39.7, 9065.0], [39.8, 9146.0], [39.9, 9258.0], [40.0, 9401.0], [40.1, 9443.0], [40.2, 9584.0], [40.3, 9631.0], [40.4, 9828.0], [40.5, 10121.0], [40.6, 10134.0], [40.7, 10299.0], [40.8, 10393.0], [40.9, 10593.0], [41.0, 10973.0], [41.1, 11026.0], [41.2, 11317.0], [41.3, 11456.0], [41.4, 11591.0], [41.5, 11825.0], [41.6, 11962.0], [41.7, 12051.0], [41.8, 12222.0], [41.9, 12301.0], [42.0, 12407.0], [42.1, 12545.0], [42.2, 12778.0], [42.3, 13042.0], [42.4, 13185.0], [42.5, 13281.0], [42.6, 13522.0], [42.7, 13571.0], [42.8, 13710.0], [42.9, 13983.0], [43.0, 14081.0], [43.1, 14304.0], [43.2, 14718.0], [43.3, 14901.0], [43.4, 15243.0], [43.5, 15406.0], [43.6, 15532.0], [43.7, 15993.0], [43.8, 16129.0], [43.9, 16463.0], [44.0, 16742.0], [44.1, 16987.0], [44.2, 17192.0], [44.3, 17429.0], [44.4, 17478.0], [44.5, 17714.0], [44.6, 17742.0], [44.7, 17797.0], [44.8, 17963.0], [44.9, 17989.0], [45.0, 18043.0], [45.1, 18216.0], [45.2, 18242.0], [45.3, 18255.0], [45.4, 18476.0], [45.5, 18497.0], [45.6, 18533.0], [45.7, 18632.0], [45.8, 18733.0], [45.9, 18751.0], [46.0, 18773.0], [46.1, 18964.0], [46.2, 19039.0], [46.3, 19213.0], [46.4, 19257.0], [46.5, 19283.0], [46.6, 19485.0], [46.7, 19527.0], [46.8, 19711.0], [46.9, 19782.0], [47.0, 19967.0], [47.1, 20006.0], [47.2, 20222.0], [47.3, 20233.0], [47.4, 20276.0], [47.5, 20473.0], [47.6, 20506.0], [47.7, 20690.0], [47.8, 20894.0], [47.9, 20971.0], [48.0, 20998.0], [48.1, 21101.0], [48.2, 21262.0], [48.3, 21267.0], [48.4, 21470.0], [48.5, 21502.0], [48.6, 21519.0], [48.7, 21562.0], [48.8, 21717.0], [48.9, 21730.0], [49.0, 21742.0], [49.1, 21752.0], [49.2, 21766.0], [49.3, 21793.0], [49.4, 21951.0], [49.5, 21988.0], [49.6, 21993.0], [49.7, 22021.0], [49.8, 22163.0], [49.9, 22253.0], [50.0, 22276.0], [50.1, 22306.0], [50.2, 22436.0], [50.3, 22472.0], [50.4, 22485.0], [50.5, 22511.0], [50.6, 22515.0], [50.7, 22566.0], [50.8, 22683.0], [50.9, 22712.0], [51.0, 22744.0], [51.1, 22758.0], [51.2, 22770.0], [51.3, 22834.0], [51.4, 22950.0], [51.5, 22967.0], [51.6, 23013.0], [51.7, 23039.0], [51.8, 23198.0], [51.9, 23227.0], [52.0, 23262.0], [52.1, 23300.0], [52.2, 23469.0], [52.3, 23479.0], [52.4, 23502.0], [52.5, 23539.0], [52.6, 23703.0], [52.7, 23726.0], [52.8, 23728.0], [52.9, 23734.0], [53.0, 23741.0], [53.1, 23768.0], [53.2, 23792.0], [53.3, 23805.0], [53.4, 23895.0], [53.5, 23966.0], [53.6, 23978.0], [53.7, 23983.0], [53.8, 23994.0], [53.9, 24012.0], [54.0, 24061.0], [54.1, 24124.0], [54.2, 24224.0], [54.3, 24243.0], [54.4, 24261.0], [54.5, 24277.0], [54.6, 24296.0], [54.7, 24328.0], [54.8, 24469.0], [54.9, 24475.0], [55.0, 24480.0], [55.1, 24495.0], [55.2, 24507.0], [55.3, 24518.0], [55.4, 24549.0], [55.5, 24675.0], [55.6, 24705.0], [55.7, 24722.0], [55.8, 24727.0], [55.9, 24736.0], [56.0, 24766.0], [56.1, 24774.0], [56.2, 24891.0], [56.3, 24945.0], [56.4, 24977.0], [56.5, 24987.0], [56.6, 24994.0], [56.7, 25005.0], [56.8, 25007.0], [56.9, 25021.0], [57.0, 25036.0], [57.1, 25044.0], [57.2, 25233.0], [57.3, 25241.0], [57.4, 25249.0], [57.5, 25267.0], [57.6, 25283.0], [57.7, 25309.0], [57.8, 25431.0], [57.9, 25455.0], [58.0, 25466.0], [58.1, 25485.0], [58.2, 25493.0], [58.3, 25501.0], [58.4, 25517.0], [58.5, 25540.0], [58.6, 25597.0], [58.7, 25664.0], [58.8, 25700.0], [58.9, 25724.0], [59.0, 25730.0], [59.1, 25756.0], [59.2, 25782.0], [59.3, 25815.0], [59.4, 25865.0], [59.5, 25930.0], [59.6, 25954.0], [59.7, 25972.0], [59.8, 25981.0], [59.9, 25988.0], [60.0, 25993.0], [60.1, 26002.0], [60.2, 26019.0], [60.3, 26029.0], [60.4, 26064.0], [60.5, 26157.0], [60.6, 26204.0], [60.7, 26221.0], [60.8, 26233.0], [60.9, 26236.0], [61.0, 26247.0], [61.1, 26251.0], [61.2, 26275.0], [61.3, 26293.0], [61.4, 26450.0], [61.5, 26484.0], [61.6, 26488.0], [61.7, 26490.0], [61.8, 26502.0], [61.9, 26507.0], [62.0, 26518.0], [62.1, 26529.0], [62.2, 26543.0], [62.3, 26681.0], [62.4, 26708.0], [62.5, 26729.0], [62.6, 26732.0], [62.7, 26736.0], [62.8, 26743.0], [62.9, 26750.0], [63.0, 26756.0], [63.1, 26768.0], [63.2, 26799.0], [63.3, 26945.0], [63.4, 26953.0], [63.5, 26964.0], [63.6, 26977.0], [63.7, 26982.0], [63.8, 27001.0], [63.9, 27008.0], [64.0, 27012.0], [64.1, 27021.0], [64.2, 27045.0], [64.3, 27129.0], [64.4, 27199.0], [64.5, 27214.0], [64.6, 27217.0], [64.7, 27239.0], [64.8, 27243.0], [64.9, 27255.0], [65.0, 27262.0], [65.1, 27269.0], [65.2, 27442.0], [65.3, 27457.0], [65.4, 27468.0], [65.5, 27480.0], [65.6, 27491.0], [65.7, 27508.0], [65.8, 27519.0], [65.9, 27530.0], [66.0, 27571.0], [66.1, 27683.0], [66.2, 27706.0], [66.3, 27713.0], [66.4, 27729.0], [66.5, 27746.0], [66.6, 27752.0], [66.7, 27757.0], [66.8, 27763.0], [66.9, 27772.0], [67.0, 27893.0], [67.1, 27976.0], [67.2, 27983.0], [67.3, 27987.0], [67.4, 27995.0], [67.5, 28000.0], [67.6, 28019.0], [67.7, 28035.0], [67.8, 28045.0], [67.9, 28205.0], [68.0, 28216.0], [68.1, 28226.0], [68.2, 28232.0], [68.3, 28238.0], [68.4, 28242.0], [68.5, 28250.0], [68.6, 28257.0], [68.7, 28287.0], [68.8, 28405.0], [68.9, 28468.0], [69.0, 28474.0], [69.1, 28480.0], [69.2, 28491.0], [69.3, 28494.0], [69.4, 28499.0], [69.5, 28507.0], [69.6, 28516.0], [69.7, 28530.0], [69.8, 28550.0], [69.9, 28692.0], [70.0, 28715.0], [70.1, 28720.0], [70.2, 28732.0], [70.3, 28739.0], [70.4, 28745.0], [70.5, 28762.0], [70.6, 28773.0], [70.7, 28786.0], [70.8, 28819.0], [70.9, 28923.0], [71.0, 28960.0], [71.1, 28976.0], [71.2, 28995.0], [71.3, 28997.0], [71.4, 29025.0], [71.5, 29042.0], [71.6, 29167.0], [71.7, 29198.0], [71.8, 29208.0], [71.9, 29230.0], [72.0, 29241.0], [72.1, 29259.0], [72.2, 29263.0], [72.3, 29277.0], [72.4, 29337.0], [72.5, 29428.0], [72.6, 29447.0], [72.7, 29461.0], [72.8, 29476.0], [72.9, 29484.0], [73.0, 29495.0], [73.1, 29504.0], [73.2, 29507.0], [73.3, 29519.0], [73.4, 29530.0], [73.5, 29545.0], [73.6, 29572.0], [73.7, 29682.0], [73.8, 29704.0], [73.9, 29711.0], [74.0, 29716.0], [74.1, 29719.0], [74.2, 29722.0], [74.3, 29727.0], [74.4, 29736.0], [74.5, 29743.0], [74.6, 29749.0], [74.7, 29766.0], [74.8, 29785.0], [74.9, 29790.0], [75.0, 29936.0], [75.1, 29956.0], [75.2, 29960.0], [75.3, 29967.0], [75.4, 29970.0], [75.5, 29971.0], [75.6, 29976.0], [75.7, 29977.0], [75.8, 29980.0], [75.9, 29981.0], [76.0, 29982.0], [76.1, 29986.0], [76.2, 29987.0], [76.3, 29989.0], [76.4, 29990.0], [76.5, 29991.0], [76.6, 29993.0], [76.7, 29995.0], [76.8, 29995.0], [76.9, 29996.0], [77.0, 29997.0], [77.1, 29998.0], [77.2, 30000.0], [77.3, 30001.0], [77.4, 30001.0], [77.5, 30002.0], [77.6, 30002.0], [77.7, 30002.0], [77.8, 30002.0], [77.9, 30002.0], [78.0, 30002.0], [78.1, 30002.0], [78.2, 30003.0], [78.3, 30003.0], [78.4, 30003.0], [78.5, 30003.0], [78.6, 30003.0], [78.7, 30003.0], [78.8, 30003.0], [78.9, 30003.0], [79.0, 30003.0], [79.1, 30003.0], [79.2, 30003.0], [79.3, 30003.0], [79.4, 30003.0], [79.5, 30003.0], [79.6, 30003.0], [79.7, 30003.0], [79.8, 30003.0], [79.9, 30003.0], [80.0, 30003.0], [80.1, 30003.0], [80.2, 30003.0], [80.3, 30003.0], [80.4, 30003.0], [80.5, 30004.0], [80.6, 30004.0], [80.7, 30004.0], [80.8, 30004.0], [80.9, 30004.0], [81.0, 30004.0], [81.1, 30004.0], [81.2, 30004.0], [81.3, 30004.0], [81.4, 30004.0], [81.5, 30004.0], [81.6, 30004.0], [81.7, 30004.0], [81.8, 30004.0], [81.9, 30004.0], [82.0, 30004.0], [82.1, 30004.0], [82.2, 30004.0], [82.3, 30004.0], [82.4, 30004.0], [82.5, 30004.0], [82.6, 30004.0], [82.7, 30004.0], [82.8, 30004.0], [82.9, 30005.0], [83.0, 30005.0], [83.1, 30005.0], [83.2, 30005.0], [83.3, 30005.0], [83.4, 30005.0], [83.5, 30005.0], [83.6, 30005.0], [83.7, 30005.0], [83.8, 30005.0], [83.9, 30005.0], [84.0, 30005.0], [84.1, 30005.0], [84.2, 30005.0], [84.3, 30005.0], [84.4, 30006.0], [84.5, 30006.0], [84.6, 30006.0], [84.7, 30006.0], [84.8, 30006.0], [84.9, 30006.0], [85.0, 30006.0], [85.1, 30007.0], [85.2, 30007.0], [85.3, 30007.0], [85.4, 30007.0], [85.5, 30007.0], [85.6, 30008.0], [85.7, 30008.0], [85.8, 30009.0], [85.9, 30012.0], [86.0, 31002.0], [86.1, 31002.0], [86.2, 31002.0], [86.3, 31002.0], [86.4, 31002.0], [86.5, 31002.0], [86.6, 31002.0], [86.7, 31002.0], [86.8, 31003.0], [86.9, 31003.0], [87.0, 31003.0], [87.1, 31003.0], [87.2, 31003.0], [87.3, 31003.0], [87.4, 31003.0], [87.5, 31003.0], [87.6, 31003.0], [87.7, 31003.0], [87.8, 31003.0], [87.9, 31003.0], [88.0, 31003.0], [88.1, 31003.0], [88.2, 31003.0], [88.3, 31003.0], [88.4, 31003.0], [88.5, 31003.0], [88.6, 31003.0], [88.7, 31003.0], [88.8, 31003.0], [88.9, 31003.0], [89.0, 31003.0], [89.1, 31003.0], [89.2, 31003.0], [89.3, 31003.0], [89.4, 31003.0], [89.5, 31003.0], [89.6, 31003.0], [89.7, 31003.0], [89.8, 31003.0], [89.9, 31004.0], [90.0, 31004.0], [90.1, 31004.0], [90.2, 31004.0], [90.3, 31004.0], [90.4, 31004.0], [90.5, 31004.0], [90.6, 31004.0], [90.7, 31004.0], [90.8, 31004.0], [90.9, 31004.0], [91.0, 31004.0], [91.1, 31004.0], [91.2, 31004.0], [91.3, 31004.0], [91.4, 31004.0], [91.5, 31004.0], [91.6, 31004.0], [91.7, 31004.0], [91.8, 31004.0], [91.9, 31004.0], [92.0, 31004.0], [92.1, 31004.0], [92.2, 31004.0], [92.3, 31004.0], [92.4, 31004.0], [92.5, 31004.0], [92.6, 31004.0], [92.7, 31004.0], [92.8, 31004.0], [92.9, 31004.0], [93.0, 31004.0], [93.1, 31004.0], [93.2, 31004.0], [93.3, 31004.0], [93.4, 31004.0], [93.5, 31004.0], [93.6, 31004.0], [93.7, 31004.0], [93.8, 31004.0], [93.9, 31004.0], [94.0, 31004.0], [94.1, 31004.0], [94.2, 31004.0], [94.3, 31004.0], [94.4, 31004.0], [94.5, 31005.0], [94.6, 31005.0], [94.7, 31005.0], [94.8, 31005.0], [94.9, 31005.0], [95.0, 31005.0], [95.1, 31005.0], [95.2, 31005.0], [95.3, 31005.0], [95.4, 31005.0], [95.5, 31005.0], [95.6, 31005.0], [95.7, 31005.0], [95.8, 31005.0], [95.9, 31005.0], [96.0, 31005.0], [96.1, 31005.0], [96.2, 31005.0], [96.3, 31005.0], [96.4, 31005.0], [96.5, 31005.0], [96.6, 31005.0], [96.7, 31005.0], [96.8, 31005.0], [96.9, 31005.0], [97.0, 31005.0], [97.1, 31005.0], [97.2, 31006.0], [97.3, 31006.0], [97.4, 31006.0], [97.5, 31006.0], [97.6, 31006.0], [97.7, 31006.0], [97.8, 31006.0], [97.9, 31006.0], [98.0, 31006.0], [98.1, 31006.0], [98.2, 31006.0], [98.3, 31006.0], [98.4, 31007.0], [98.5, 31007.0], [98.6, 31007.0], [98.7, 31007.0], [98.8, 31007.0], [98.9, 31007.0], [99.0, 31007.0], [99.1, 31008.0], [99.2, 31008.0], [99.3, 31008.0], [99.4, 31008.0], [99.5, 31009.0], [99.6, 31010.0], [99.7, 31011.0], [99.8, 31011.0], [99.9, 31018.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[0.0, 10.0], [0.1, 10.0], [0.2, 10.0], [0.3, 10.0], [0.4, 10.0], [0.5, 10.0], [0.6, 11.0], [0.7, 11.0], [0.8, 11.0], [0.9, 11.0], [1.0, 11.0], [1.1, 11.0], [1.2, 11.0], [1.3, 11.0], [1.4, 11.0], [1.5, 11.0], [1.6, 11.0], [1.7, 11.0], [1.8, 11.0], [1.9, 11.0], [2.0, 11.0], [2.1, 11.0], [2.2, 11.0], [2.3, 11.0], [2.4, 11.0], [2.5, 12.0], [2.6, 12.0], [2.7, 12.0], [2.8, 12.0], [2.9, 12.0], [3.0, 12.0], [3.1, 12.0], [3.2, 12.0], [3.3, 12.0], [3.4, 12.0], [3.5, 12.0], [3.6, 12.0], [3.7, 12.0], [3.8, 12.0], [3.9, 12.0], [4.0, 12.0], [4.1, 12.0], [4.2, 12.0], [4.3, 12.0], [4.4, 12.0], [4.5, 12.0], [4.6, 12.0], [4.7, 12.0], [4.8, 12.0], [4.9, 12.0], [5.0, 12.0], [5.1, 12.0], [5.2, 12.0], [5.3, 12.0], [5.4, 12.0], [5.5, 12.0], [5.6, 12.0], [5.7, 12.0], [5.8, 12.0], [5.9, 12.0], [6.0, 12.0], [6.1, 12.0], [6.2, 12.0], [6.3, 12.0], [6.4, 13.0], [6.5, 13.0], [6.6, 13.0], [6.7, 13.0], [6.8, 13.0], [6.9, 13.0], [7.0, 13.0], [7.1, 13.0], [7.2, 13.0], [7.3, 13.0], [7.4, 13.0], [7.5, 13.0], [7.6, 13.0], [7.7, 13.0], [7.8, 13.0], [7.9, 13.0], [8.0, 13.0], [8.1, 13.0], [8.2, 13.0], [8.3, 13.0], [8.4, 13.0], [8.5, 13.0], [8.6, 13.0], [8.7, 13.0], [8.8, 13.0], [8.9, 13.0], [9.0, 13.0], [9.1, 13.0], [9.2, 13.0], [9.3, 13.0], [9.4, 13.0], [9.5, 13.0], [9.6, 13.0], [9.7, 13.0], [9.8, 13.0], [9.9, 13.0], [10.0, 13.0], [10.1, 13.0], [10.2, 14.0], [10.3, 14.0], [10.4, 14.0], [10.5, 14.0], [10.6, 14.0], [10.7, 14.0], [10.8, 14.0], [10.9, 14.0], [11.0, 14.0], [11.1, 14.0], [11.2, 14.0], [11.3, 14.0], [11.4, 14.0], [11.5, 14.0], [11.6, 14.0], [11.7, 14.0], [11.8, 14.0], [11.9, 14.0], [12.0, 14.0], [12.1, 14.0], [12.2, 14.0], [12.3, 14.0], [12.4, 14.0], [12.5, 14.0], [12.6, 14.0], [12.7, 14.0], [12.8, 14.0], [12.9, 14.0], [13.0, 14.0], [13.1, 14.0], [13.2, 14.0], [13.3, 14.0], [13.4, 14.0], [13.5, 15.0], [13.6, 15.0], [13.7, 15.0], [13.8, 15.0], [13.9, 15.0], [14.0, 15.0], [14.1, 15.0], [14.2, 15.0], [14.3, 15.0], [14.4, 15.0], [14.5, 15.0], [14.6, 15.0], [14.7, 15.0], [14.8, 15.0], [14.9, 15.0], [15.0, 15.0], [15.1, 15.0], [15.2, 15.0], [15.3, 15.0], [15.4, 15.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 16.0], [16.1, 16.0], [16.2, 16.0], [16.3, 16.0], [16.4, 16.0], [16.5, 16.0], [16.6, 16.0], [16.7, 16.0], [16.8, 16.0], [16.9, 16.0], [17.0, 16.0], [17.1, 16.0], [17.2, 16.0], [17.3, 16.0], [17.4, 16.0], [17.5, 16.0], [17.6, 16.0], [17.7, 16.0], [17.8, 17.0], [17.9, 17.0], [18.0, 17.0], [18.1, 17.0], [18.2, 17.0], [18.3, 17.0], [18.4, 17.0], [18.5, 17.0], [18.6, 17.0], [18.7, 17.0], [18.8, 17.0], [18.9, 17.0], [19.0, 17.0], [19.1, 17.0], [19.2, 17.0], [19.3, 17.0], [19.4, 18.0], [19.5, 18.0], [19.6, 18.0], [19.7, 18.0], [19.8, 18.0], [19.9, 18.0], [20.0, 18.0], [20.1, 18.0], [20.2, 18.0], [20.3, 18.0], [20.4, 18.0], [20.5, 18.0], [20.6, 18.0], [20.7, 18.0], [20.8, 19.0], [20.9, 19.0], [21.0, 19.0], [21.1, 19.0], [21.2, 19.0], [21.3, 19.0], [21.4, 19.0], [21.5, 19.0], [21.6, 20.0], [21.7, 20.0], [21.8, 20.0], [21.9, 20.0], [22.0, 20.0], [22.1, 20.0], [22.2, 20.0], [22.3, 21.0], [22.4, 21.0], [22.5, 21.0], [22.6, 21.0], [22.7, 21.0], [22.8, 21.0], [22.9, 22.0], [23.0, 22.0], [23.1, 22.0], [23.2, 23.0], [23.3, 23.0], [23.4, 23.0], [23.5, 24.0], [23.6, 24.0], [23.7, 24.0], [23.8, 25.0], [23.9, 25.0], [24.0, 25.0], [24.1, 26.0], [24.2, 26.0], [24.3, 26.0], [24.4, 26.0], [24.5, 27.0], [24.6, 27.0], [24.7, 27.0], [24.8, 28.0], [24.9, 29.0], [25.0, 29.0], [25.1, 29.0], [25.2, 29.0], [25.3, 29.0], [25.4, 30.0], [25.5, 30.0], [25.6, 30.0], [25.7, 30.0], [25.8, 31.0], [25.9, 31.0], [26.0, 31.0], [26.1, 31.0], [26.2, 32.0], [26.3, 32.0], [26.4, 32.0], [26.5, 32.0], [26.6, 33.0], [26.7, 33.0], [26.8, 34.0], [26.9, 34.0], [27.0, 35.0], [27.1, 35.0], [27.2, 35.0], [27.3, 36.0], [27.4, 36.0], [27.5, 37.0], [27.6, 38.0], [27.7, 39.0], [27.8, 39.0], [27.9, 40.0], [28.0, 41.0], [28.1, 42.0], [28.2, 42.0], [28.3, 42.0], [28.4, 43.0], [28.5, 44.0], [28.6, 45.0], [28.7, 45.0], [28.8, 46.0], [28.9, 48.0], [29.0, 49.0], [29.1, 50.0], [29.2, 51.0], [29.3, 52.0], [29.4, 54.0], [29.5, 55.0], [29.6, 55.0], [29.7, 56.0], [29.8, 57.0], [29.9, 60.0], [30.0, 62.0], [30.1, 63.0], [30.2, 64.0], [30.3, 65.0], [30.4, 67.0], [30.5, 68.0], [30.6, 71.0], [30.7, 75.0], [30.8, 78.0], [30.9, 83.0], [31.0, 84.0], [31.1, 103.0], [31.2, 107.0], [31.3, 115.0], [31.4, 134.0], [31.5, 151.0], [31.6, 163.0], [31.7, 174.0], [31.8, 184.0], [31.9, 193.0], [32.0, 208.0], [32.1, 225.0], [32.2, 245.0], [32.3, 276.0], [32.4, 291.0], [32.5, 297.0], [32.6, 310.0], [32.7, 319.0], [32.8, 366.0], [32.9, 430.0], [33.0, 446.0], [33.1, 465.0], [33.2, 483.0], [33.3, 525.0], [33.4, 553.0], [33.5, 581.0], [33.6, 593.0], [33.7, 606.0], [33.8, 633.0], [33.9, 648.0], [34.0, 670.0], [34.1, 686.0], [34.2, 717.0], [34.3, 734.0], [34.4, 764.0], [34.5, 787.0], [34.6, 795.0], [34.7, 805.0], [34.8, 825.0], [34.9, 847.0], [35.0, 865.0], [35.1, 873.0], [35.2, 880.0], [35.3, 891.0], [35.4, 904.0], [35.5, 967.0], [35.6, 989.0], [35.7, 1052.0], [35.8, 1089.0], [35.9, 1117.0], [36.0, 1145.0], [36.1, 1170.0], [36.2, 1239.0], [36.3, 1266.0], [36.4, 1356.0], [36.5, 1447.0], [36.6, 1618.0], [36.7, 1683.0], [36.8, 1708.0], [36.9, 1769.0], [37.0, 1776.0], [37.1, 1834.0], [37.2, 1903.0], [37.3, 1936.0], [37.4, 2055.0], [37.5, 2081.0], [37.6, 2182.0], [37.7, 2209.0], [37.8, 2247.0], [37.9, 2297.0], [38.0, 2377.0], [38.1, 2442.0], [38.2, 2520.0], [38.3, 2549.0], [38.4, 2624.0], [38.5, 2654.0], [38.6, 2696.0], [38.7, 2775.0], [38.8, 2828.0], [38.9, 2864.0], [39.0, 2906.0], [39.1, 2948.0], [39.2, 2972.0], [39.3, 3091.0], [39.4, 3124.0], [39.5, 3135.0], [39.6, 3270.0], [39.7, 3287.0], [39.8, 3387.0], [39.9, 3423.0], [40.0, 3586.0], [40.1, 3817.0], [40.2, 4042.0], [40.3, 4430.0], [40.4, 4629.0], [40.5, 4771.0], [40.6, 4830.0], [40.7, 4880.0], [40.8, 4943.0], [40.9, 5046.0], [41.0, 5193.0], [41.1, 5313.0], [41.2, 5377.0], [41.3, 5410.0], [41.4, 5471.0], [41.5, 5559.0], [41.6, 5614.0], [41.7, 5678.0], [41.8, 5694.0], [41.9, 5734.0], [42.0, 5908.0], [42.1, 6001.0], [42.2, 6075.0], [42.3, 6129.0], [42.4, 6216.0], [42.5, 6349.0], [42.6, 6380.0], [42.7, 6432.0], [42.8, 6502.0], [42.9, 6540.0], [43.0, 6555.0], [43.1, 6627.0], [43.2, 6668.0], [43.3, 6736.0], [43.4, 6831.0], [43.5, 6852.0], [43.6, 6878.0], [43.7, 6957.0], [43.8, 6996.0], [43.9, 7080.0], [44.0, 7128.0], [44.1, 7213.0], [44.2, 7221.0], [44.3, 7238.0], [44.4, 7310.0], [44.5, 7379.0], [44.6, 7518.0], [44.7, 7621.0], [44.8, 7714.0], [44.9, 7981.0], [45.0, 8176.0], [45.1, 8528.0], [45.2, 8856.0], [45.3, 9262.0], [45.4, 9730.0], [45.5, 10255.0], [45.6, 10340.0], [45.7, 10843.0], [45.8, 11503.0], [45.9, 11790.0], [46.0, 12244.0], [46.1, 12645.0], [46.2, 13520.0], [46.3, 14260.0], [46.4, 14479.0], [46.5, 14507.0], [46.6, 14728.0], [46.7, 14946.0], [46.8, 15015.0], [46.9, 15159.0], [47.0, 15754.0], [47.1, 16010.0], [47.2, 16496.0], [47.3, 17015.0], [47.4, 17209.0], [47.5, 17216.0], [47.6, 17235.0], [47.7, 17306.0], [47.8, 17456.0], [47.9, 17536.0], [48.0, 17761.0], [48.1, 17993.0], [48.2, 18000.0], [48.3, 18008.0], [48.4, 18033.0], [48.5, 18183.0], [48.6, 18234.0], [48.7, 18246.0], [48.8, 18254.0], [48.9, 18280.0], [49.0, 18377.0], [49.1, 18449.0], [49.2, 18493.0], [49.3, 18505.0], [49.4, 18535.0], [49.5, 18562.0], [49.6, 18610.0], [49.7, 18727.0], [49.8, 18761.0], [49.9, 18809.0], [50.0, 18926.0], [50.1, 18966.0], [50.2, 19001.0], [50.3, 19003.0], [50.4, 19031.0], [50.5, 19047.0], [50.6, 19197.0], [50.7, 19217.0], [50.8, 19236.0], [50.9, 19253.0], [51.0, 19265.0], [51.1, 19358.0], [51.2, 19453.0], [51.3, 19457.0], [51.4, 19473.0], [51.5, 19476.0], [51.6, 19497.0], [51.7, 19538.0], [51.8, 19562.0], [51.9, 19698.0], [52.0, 19713.0], [52.1, 19724.0], [52.2, 19727.0], [52.3, 19737.0], [52.4, 19746.0], [52.5, 19757.0], [52.6, 19783.0], [52.7, 19851.0], [52.8, 19964.0], [52.9, 19974.0], [53.0, 19989.0], [53.1, 20018.0], [53.2, 20041.0], [53.3, 20144.0], [53.4, 20204.0], [53.5, 20216.0], [53.6, 20230.0], [53.7, 20250.0], [53.8, 20262.0], [53.9, 20279.0], [54.0, 20374.0], [54.1, 20444.0], [54.2, 20460.0], [54.3, 20485.0], [54.4, 20491.0], [54.5, 20499.0], [54.6, 20502.0], [54.7, 20517.0], [54.8, 20524.0], [54.9, 20544.0], [55.0, 20558.0], [55.1, 20607.0], [55.2, 20715.0], [55.3, 20722.0], [55.4, 20738.0], [55.5, 20755.0], [55.6, 20763.0], [55.7, 20770.0], [55.8, 20773.0], [55.9, 20790.0], [56.0, 20917.0], [56.1, 20958.0], [56.2, 20986.0], [56.3, 20993.0], [56.4, 21005.0], [56.5, 21008.0], [56.6, 21015.0], [56.7, 21023.0], [56.8, 21034.0], [56.9, 21056.0], [57.0, 21063.0], [57.1, 21128.0], [57.2, 21168.0], [57.3, 21188.0], [57.4, 21219.0], [57.5, 21225.0], [57.6, 21235.0], [57.7, 21245.0], [57.8, 21248.0], [57.9, 21256.0], [58.0, 21264.0], [58.1, 21271.0], [58.2, 21279.0], [58.3, 21297.0], [58.4, 21329.0], [58.5, 21376.0], [58.6, 21442.0], [58.7, 21457.0], [58.8, 21472.0], [58.9, 21475.0], [59.0, 21491.0], [59.1, 21505.0], [59.2, 21511.0], [59.3, 21519.0], [59.4, 21524.0], [59.5, 21531.0], [59.6, 21548.0], [59.7, 21563.0], [59.8, 21620.0], [59.9, 21709.0], [60.0, 21730.0], [60.1, 21760.0], [60.2, 21773.0], [60.3, 21785.0], [60.4, 21811.0], [60.5, 21866.0], [60.6, 21899.0], [60.7, 21964.0], [60.8, 21979.0], [60.9, 21983.0], [61.0, 21988.0], [61.1, 21993.0], [61.2, 21999.0], [61.3, 22012.0], [61.4, 22023.0], [61.5, 22030.0], [61.6, 22043.0], [61.7, 22062.0], [61.8, 22188.0], [61.9, 22201.0], [62.0, 22207.0], [62.1, 22218.0], [62.2, 22226.0], [62.3, 22235.0], [62.4, 22239.0], [62.5, 22250.0], [62.6, 22253.0], [62.7, 22263.0], [62.8, 22275.0], [62.9, 22298.0], [63.0, 22318.0], [63.1, 22341.0], [63.2, 22378.0], [63.3, 22429.0], [63.4, 22462.0], [63.5, 22472.0], [63.6, 22486.0], [63.7, 22494.0], [63.8, 22504.0], [63.9, 22543.0], [64.0, 22546.0], [64.1, 22677.0], [64.2, 22686.0], [64.3, 22708.0], [64.4, 22730.0], [64.5, 22737.0], [64.6, 22747.0], [64.7, 22753.0], [64.8, 22757.0], [64.9, 22760.0], [65.0, 22774.0], [65.1, 22802.0], [65.2, 22882.0], [65.3, 22947.0], [65.4, 22964.0], [65.5, 22975.0], [65.6, 22986.0], [65.7, 22993.0], [65.8, 22999.0], [65.9, 23005.0], [66.0, 23012.0], [66.1, 23020.0], [66.2, 23026.0], [66.3, 23035.0], [66.4, 23037.0], [66.5, 23039.0], [66.6, 23052.0], [66.7, 23073.0], [66.8, 23164.0], [66.9, 23188.0], [67.0, 23194.0], [67.1, 23198.0], [67.2, 23210.0], [67.3, 23229.0], [67.4, 23233.0], [67.5, 23243.0], [67.6, 23245.0], [67.7, 23249.0], [67.8, 23258.0], [67.9, 23262.0], [68.0, 23272.0], [68.1, 23284.0], [68.2, 23295.0], [68.3, 23299.0], [68.4, 23362.0], [68.5, 23437.0], [68.6, 23459.0], [68.7, 23468.0], [68.8, 23477.0], [68.9, 23480.0], [69.0, 23495.0], [69.1, 23502.0], [69.2, 23509.0], [69.3, 23512.0], [69.4, 23517.0], [69.5, 23521.0], [69.6, 23537.0], [69.7, 23555.0], [69.8, 23568.0], [69.9, 23655.0], [70.0, 23698.0], [70.1, 23709.0], [70.2, 23742.0], [70.3, 23753.0], [70.4, 23763.0], [70.5, 23774.0], [70.6, 23784.0], [70.7, 23791.0], [70.8, 23811.0], [70.9, 23861.0], [71.0, 23946.0], [71.1, 23969.0], [71.2, 23977.0], [71.3, 23982.0], [71.4, 23987.0], [71.5, 23993.0], [71.6, 24003.0], [71.7, 24006.0], [71.8, 24008.0], [71.9, 24022.0], [72.0, 24028.0], [72.1, 24041.0], [72.2, 24055.0], [72.3, 24116.0], [72.4, 24190.0], [72.5, 24204.0], [72.6, 24216.0], [72.7, 24218.0], [72.8, 24234.0], [72.9, 24248.0], [73.0, 24253.0], [73.1, 24266.0], [73.2, 24273.0], [73.3, 24293.0], [73.4, 24304.0], [73.5, 24331.0], [73.6, 24425.0], [73.7, 24466.0], [73.8, 24472.0], [73.9, 24476.0], [74.0, 24489.0], [74.1, 24493.0], [74.2, 24498.0], [74.3, 24504.0], [74.4, 24519.0], [74.5, 24529.0], [74.6, 24537.0], [74.7, 24549.0], [74.8, 24638.0], [74.9, 24664.0], [75.0, 24709.0], [75.1, 24719.0], [75.2, 24746.0], [75.3, 24764.0], [75.4, 24770.0], [75.5, 24786.0], [75.6, 24800.0], [75.7, 24831.0], [75.8, 24938.0], [75.9, 24953.0], [76.0, 24994.0], [76.1, 25004.0], [76.2, 25017.0], [76.3, 25039.0], [76.4, 25071.0], [76.5, 25206.0], [76.6, 25217.0], [76.7, 25233.0], [76.8, 25247.0], [76.9, 25259.0], [77.0, 25275.0], [77.1, 25284.0], [77.2, 25298.0], [77.3, 25400.0], [77.4, 25464.0], [77.5, 25478.0], [77.6, 25490.0], [77.7, 25496.0], [77.8, 25499.0], [77.9, 25505.0], [78.0, 25506.0], [78.1, 25520.0], [78.2, 25522.0], [78.3, 25534.0], [78.4, 25551.0], [78.5, 25652.0], [78.6, 25708.0], [78.7, 25715.0], [78.8, 25732.0], [78.9, 25752.0], [79.0, 25760.0], [79.1, 25771.0], [79.2, 25787.0], [79.3, 25820.0], [79.4, 25959.0], [79.5, 25966.0], [79.6, 25991.0], [79.7, 25995.0], [79.8, 26009.0], [79.9, 26011.0], [80.0, 26021.0], [80.1, 26039.0], [80.2, 26066.0], [80.3, 26195.0], [80.4, 26221.0], [80.5, 26236.0], [80.6, 26261.0], [80.7, 26276.0], [80.8, 26304.0], [80.9, 26317.0], [81.0, 26459.0], [81.1, 26496.0], [81.2, 26509.0], [81.3, 26552.0], [81.4, 26570.0], [81.5, 26709.0], [81.6, 26722.0], [81.7, 26739.0], [81.8, 26744.0], [81.9, 26755.0], [82.0, 26766.0], [82.1, 26772.0], [82.2, 26800.0], [82.3, 26831.0], [82.4, 26949.0], [82.5, 26972.0], [82.6, 26997.0], [82.7, 27004.0], [82.8, 27010.0], [82.9, 27016.0], [83.0, 27019.0], [83.1, 27025.0], [83.2, 27036.0], [83.3, 27046.0], [83.4, 27161.0], [83.5, 27202.0], [83.6, 27214.0], [83.7, 27234.0], [83.8, 27243.0], [83.9, 27255.0], [84.0, 27271.0], [84.1, 27296.0], [84.2, 27335.0], [84.3, 27445.0], [84.4, 27477.0], [84.5, 27479.0], [84.6, 27485.0], [84.7, 27491.0], [84.8, 27496.0], [84.9, 27503.0], [85.0, 27511.0], [85.1, 27528.0], [85.2, 27532.0], [85.3, 27536.0], [85.4, 27690.0], [85.5, 27717.0], [85.6, 27732.0], [85.7, 27741.0], [85.8, 27748.0], [85.9, 27758.0], [86.0, 27765.0], [86.1, 27791.0], [86.2, 27840.0], [86.3, 27975.0], [86.4, 27993.0], [86.5, 27999.0], [86.6, 28010.0], [86.7, 28015.0], [86.8, 28027.0], [86.9, 28037.0], [87.0, 28043.0], [87.1, 28049.0], [87.2, 28216.0], [87.3, 28238.0], [87.4, 28245.0], [87.5, 28251.0], [87.6, 28264.0], [87.7, 28277.0], [87.8, 28290.0], [87.9, 28298.0], [88.0, 28351.0], [88.1, 28446.0], [88.2, 28460.0], [88.3, 28464.0], [88.4, 28475.0], [88.5, 28489.0], [88.6, 28495.0], [88.7, 28509.0], [88.8, 28519.0], [88.9, 28526.0], [89.0, 28544.0], [89.1, 28558.0], [89.2, 28703.0], [89.3, 28713.0], [89.4, 28732.0], [89.5, 28745.0], [89.6, 28758.0], [89.7, 28765.0], [89.8, 28773.0], [89.9, 28808.0], [90.0, 28890.0], [90.1, 28932.0], [90.2, 28978.0], [90.3, 28980.0], [90.4, 28988.0], [90.5, 28991.0], [90.6, 28996.0], [90.7, 29004.0], [90.8, 29012.0], [90.9, 29017.0], [91.0, 29026.0], [91.1, 29036.0], [91.2, 29065.0], [91.3, 29101.0], [91.4, 29196.0], [91.5, 29214.0], [91.6, 29234.0], [91.7, 29240.0], [91.8, 29246.0], [91.9, 29349.0], [92.0, 29450.0], [92.1, 29479.0], [92.2, 29486.0], [92.3, 29500.0], [92.4, 29521.0], [92.5, 29540.0], [92.6, 29629.0], [92.7, 29696.0], [92.8, 29711.0], [92.9, 29723.0], [93.0, 29732.0], [93.1, 29737.0], [93.2, 29743.0], [93.3, 29751.0], [93.4, 29753.0], [93.5, 29773.0], [93.6, 29781.0], [93.7, 29877.0], [93.8, 29962.0], [93.9, 29969.0], [94.0, 29974.0], [94.1, 29976.0], [94.2, 29979.0], [94.3, 29981.0], [94.4, 29984.0], [94.5, 29986.0], [94.6, 29987.0], [94.7, 29989.0], [94.8, 29992.0], [94.9, 29992.0], [95.0, 29995.0], [95.1, 29995.0], [95.2, 29996.0], [95.3, 30000.0], [95.4, 30001.0], [95.5, 30001.0], [95.6, 30002.0], [95.7, 30003.0], [95.8, 30003.0], [95.9, 30003.0], [96.0, 30003.0], [96.1, 30003.0], [96.2, 30003.0], [96.3, 30003.0], [96.4, 30003.0], [96.5, 30003.0], [96.6, 30003.0], [96.7, 30003.0], [96.8, 30003.0], [96.9, 30004.0], [97.0, 30004.0], [97.1, 30004.0], [97.2, 30004.0], [97.3, 30004.0], [97.4, 30004.0], [97.5, 30004.0], [97.6, 30004.0], [97.7, 30004.0], [97.8, 30004.0], [97.9, 30004.0], [98.0, 30004.0], [98.1, 30004.0], [98.2, 30004.0], [98.3, 30005.0], [98.4, 30005.0], [98.5, 30005.0], [98.6, 30005.0], [98.7, 30005.0], [98.8, 30005.0], [98.9, 30005.0], [99.0, 30005.0], [99.1, 30005.0], [99.2, 30005.0], [99.3, 30006.0], [99.4, 30006.0], [99.5, 30006.0], [99.6, 30007.0], [99.7, 30007.0], [99.8, 30008.0], [99.9, 30008.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1061.0, "series": [{"data": [[0.0, 32.0], [200.0, 30.0], [300.0, 305.0], [400.0, 341.0], [500.0, 177.0], [600.0, 91.0], [700.0, 45.0], [800.0, 41.0], [900.0, 21.0], [1000.0, 21.0], [1100.0, 10.0], [1200.0, 10.0], [1300.0, 6.0], [1400.0, 3.0], [1500.0, 16.0], [1600.0, 8.0], [1700.0, 4.0], [1800.0, 3.0], [1900.0, 3.0], [2000.0, 5.0], [2100.0, 5.0], [2300.0, 2.0], [2400.0, 5.0], [2500.0, 3.0], [2600.0, 2.0], [2700.0, 4.0], [2800.0, 5.0], [2900.0, 1.0], [3000.0, 7.0], [3100.0, 1.0], [3300.0, 6.0], [3200.0, 2.0], [3400.0, 2.0], [3500.0, 2.0], [3700.0, 1.0], [3800.0, 1.0], [3900.0, 2.0], [4000.0, 4.0], [4200.0, 4.0], [4100.0, 4.0], [4600.0, 4.0], [4400.0, 1.0], [4500.0, 2.0], [4700.0, 3.0], [5100.0, 3.0], [5000.0, 1.0], [4900.0, 1.0], [5300.0, 2.0], [5200.0, 2.0], [5400.0, 4.0], [5500.0, 3.0], [5600.0, 2.0], [5700.0, 3.0], [5800.0, 1.0], [5900.0, 4.0], [6000.0, 5.0], [6200.0, 2.0], [6300.0, 2.0], [6500.0, 1.0], [6400.0, 3.0], [6600.0, 1.0], [6700.0, 1.0], [6900.0, 5.0], [6800.0, 2.0], [7000.0, 3.0], [7100.0, 2.0], [7400.0, 4.0], [7300.0, 1.0], [7200.0, 3.0], [7500.0, 3.0], [7600.0, 2.0], [7900.0, 6.0], [7700.0, 5.0], [7800.0, 3.0], [8100.0, 1.0], [8600.0, 2.0], [8300.0, 2.0], [8200.0, 2.0], [8400.0, 1.0], [8700.0, 2.0], [9100.0, 3.0], [9200.0, 4.0], [8800.0, 4.0], [9000.0, 2.0], [8900.0, 1.0], [9600.0, 4.0], [9500.0, 3.0], [9400.0, 5.0], [9300.0, 1.0], [9700.0, 1.0], [10100.0, 7.0], [9800.0, 2.0], [9900.0, 1.0], [10200.0, 2.0], [10400.0, 2.0], [10300.0, 3.0], [10600.0, 1.0], [10500.0, 1.0], [10700.0, 1.0], [11000.0, 3.0], [10800.0, 1.0], [11200.0, 1.0], [11100.0, 1.0], [10900.0, 1.0], [11400.0, 4.0], [11500.0, 3.0], [11600.0, 1.0], [11300.0, 3.0], [12200.0, 3.0], [11800.0, 3.0], [12100.0, 2.0], [12000.0, 3.0], [11900.0, 2.0], [12700.0, 1.0], [12300.0, 2.0], [12400.0, 5.0], [12500.0, 3.0], [13100.0, 3.0], [13200.0, 3.0], [12800.0, 1.0], [13300.0, 2.0], [12900.0, 2.0], [13000.0, 1.0], [13700.0, 3.0], [13500.0, 5.0], [13600.0, 2.0], [13800.0, 1.0], [13900.0, 2.0], [14000.0, 2.0], [14200.0, 2.0], [14100.0, 1.0], [14300.0, 1.0], [14800.0, 1.0], [14500.0, 1.0], [14400.0, 1.0], [14700.0, 2.0], [15300.0, 2.0], [15100.0, 1.0], [14900.0, 2.0], [15200.0, 2.0], [15400.0, 2.0], [15500.0, 2.0], [15700.0, 1.0], [15800.0, 1.0], [15900.0, 2.0], [16100.0, 2.0], [16000.0, 2.0], [16200.0, 1.0], [17000.0, 2.0], [17400.0, 5.0], [16600.0, 1.0], [16400.0, 2.0], [17200.0, 2.0], [18200.0, 9.0], [18000.0, 4.0], [18400.0, 6.0], [17800.0, 1.0], [18600.0, 3.0], [19200.0, 8.0], [19400.0, 3.0], [19000.0, 1.0], [20200.0, 9.0], [20000.0, 3.0], [19600.0, 2.0], [20400.0, 2.0], [21000.0, 2.0], [20800.0, 2.0], [21200.0, 5.0], [21400.0, 3.0], [20600.0, 1.0], [22000.0, 5.0], [21600.0, 1.0], [22400.0, 9.0], [22200.0, 9.0], [23200.0, 9.0], [22600.0, 3.0], [22800.0, 5.0], [23000.0, 8.0], [23400.0, 9.0], [24200.0, 17.0], [23800.0, 5.0], [24000.0, 7.0], [24400.0, 14.0], [25200.0, 17.0], [24600.0, 2.0], [25400.0, 18.0], [24800.0, 1.0], [25000.0, 16.0], [25600.0, 6.0], [26000.0, 12.0], [25800.0, 6.0], [26200.0, 26.0], [26400.0, 14.0], [26600.0, 1.0], [27400.0, 16.0], [27000.0, 17.0], [27600.0, 4.0], [27200.0, 25.0], [26800.0, 1.0], [28200.0, 30.0], [28600.0, 4.0], [28000.0, 11.0], [27800.0, 2.0], [28400.0, 21.0], [29200.0, 20.0], [28800.0, 4.0], [29600.0, 6.0], [29400.0, 20.0], [29000.0, 8.0], [29800.0, 2.0], [30000.0, 295.0], [31000.0, 475.0], [16700.0, 2.0], [16900.0, 3.0], [16500.0, 1.0], [17100.0, 1.0], [17700.0, 8.0], [17900.0, 6.0], [18100.0, 1.0], [17500.0, 2.0], [18700.0, 10.0], [19300.0, 2.0], [18500.0, 5.0], [19100.0, 2.0], [18900.0, 4.0], [19700.0, 6.0], [19900.0, 5.0], [20300.0, 1.0], [19500.0, 2.0], [21100.0, 3.0], [21500.0, 9.0], [20500.0, 5.0], [20900.0, 7.0], [20700.0, 1.0], [21300.0, 2.0], [21700.0, 20.0], [21900.0, 10.0], [22300.0, 2.0], [22100.0, 1.0], [22500.0, 11.0], [23100.0, 1.0], [23500.0, 6.0], [22700.0, 13.0], [22900.0, 6.0], [23300.0, 2.0], [23900.0, 14.0], [24500.0, 10.0], [23700.0, 24.0], [24100.0, 3.0], [24300.0, 3.0], [25500.0, 11.0], [25100.0, 1.0], [25300.0, 3.0], [24700.0, 23.0], [24900.0, 15.0], [26100.0, 5.0], [25900.0, 22.0], [25700.0, 15.0], [26500.0, 17.0], [26300.0, 1.0], [27500.0, 13.0], [26700.0, 30.0], [27100.0, 5.0], [26900.0, 18.0], [27300.0, 1.0], [28100.0, 2.0], [28300.0, 1.0], [27700.0, 26.0], [27900.0, 16.0], [28500.0, 14.0], [28700.0, 28.0], [28900.0, 15.0], [29300.0, 5.0], [29500.0, 19.0], [29100.0, 5.0], [29700.0, 39.0], [29900.0, 74.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[0.0, 1061.0], [100.0, 31.0], [200.0, 19.0], [300.0, 12.0], [400.0, 14.0], [500.0, 12.0], [600.0, 17.0], [700.0, 18.0], [800.0, 24.0], [900.0, 9.0], [1000.0, 6.0], [1100.0, 12.0], [1200.0, 8.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 2.0], [1600.0, 6.0], [1700.0, 10.0], [1800.0, 4.0], [1900.0, 6.0], [2000.0, 8.0], [2100.0, 4.0], [2200.0, 9.0], [2300.0, 3.0], [2400.0, 5.0], [2500.0, 6.0], [2600.0, 9.0], [2800.0, 8.0], [2700.0, 4.0], [2900.0, 9.0], [3000.0, 3.0], [3100.0, 6.0], [3200.0, 7.0], [3300.0, 6.0], [3400.0, 1.0], [3500.0, 4.0], [3600.0, 1.0], [3800.0, 2.0], [3900.0, 2.0], [4000.0, 1.0], [4100.0, 2.0], [4300.0, 1.0], [4600.0, 3.0], [4400.0, 1.0], [4500.0, 2.0], [4800.0, 6.0], [4700.0, 3.0], [4900.0, 4.0], [5000.0, 4.0], [5100.0, 2.0], [5300.0, 7.0], [5200.0, 2.0], [5400.0, 5.0], [5500.0, 5.0], [5600.0, 8.0], [5700.0, 4.0], [5800.0, 2.0], [6000.0, 6.0], [5900.0, 3.0], [6100.0, 4.0], [6200.0, 4.0], [6300.0, 5.0], [6500.0, 9.0], [6600.0, 8.0], [6400.0, 5.0], [6800.0, 8.0], [6900.0, 7.0], [6700.0, 3.0], [7100.0, 6.0], [7000.0, 4.0], [7200.0, 10.0], [7300.0, 4.0], [7400.0, 3.0], [7500.0, 3.0], [7600.0, 2.0], [7700.0, 4.0], [7900.0, 2.0], [8100.0, 3.0], [8000.0, 1.0], [8700.0, 1.0], [8600.0, 1.0], [8300.0, 2.0], [8500.0, 1.0], [8800.0, 1.0], [9200.0, 2.0], [9100.0, 1.0], [9500.0, 2.0], [9600.0, 1.0], [9700.0, 1.0], [9900.0, 2.0], [10200.0, 3.0], [10300.0, 2.0], [10600.0, 1.0], [10700.0, 1.0], [10800.0, 2.0], [11000.0, 1.0], [11500.0, 3.0], [11300.0, 1.0], [11700.0, 1.0], [11800.0, 1.0], [12200.0, 2.0], [12000.0, 1.0], [12600.0, 1.0], [12300.0, 1.0], [12400.0, 1.0], [13200.0, 1.0], [13500.0, 2.0], [14100.0, 1.0], [14200.0, 4.0], [14000.0, 1.0], [14600.0, 2.0], [14700.0, 4.0], [14400.0, 3.0], [14500.0, 1.0], [14900.0, 4.0], [15000.0, 2.0], [15100.0, 2.0], [15200.0, 1.0], [15400.0, 2.0], [15700.0, 2.0], [16000.0, 2.0], [16100.0, 1.0], [17400.0, 6.0], [16400.0, 2.0], [16800.0, 1.0], [17200.0, 11.0], [17000.0, 2.0], [18400.0, 8.0], [18200.0, 14.0], [18000.0, 9.0], [17800.0, 1.0], [19200.0, 17.0], [19400.0, 16.0], [18600.0, 2.0], [19000.0, 12.0], [18800.0, 3.0], [19800.0, 2.0], [20000.0, 8.0], [19600.0, 3.0], [20200.0, 21.0], [20400.0, 16.0], [20800.0, 3.0], [20600.0, 4.0], [21000.0, 25.0], [21200.0, 34.0], [21400.0, 18.0], [21800.0, 9.0], [22200.0, 37.0], [22400.0, 17.0], [21600.0, 2.0], [22000.0, 19.0], [22800.0, 5.0], [23400.0, 21.0], [22600.0, 4.0], [23000.0, 31.0], [23200.0, 40.0], [23800.0, 6.0], [23600.0, 7.0], [24200.0, 31.0], [24000.0, 24.0], [24400.0, 22.0], [25400.0, 19.0], [25200.0, 26.0], [25000.0, 12.0], [24600.0, 7.0], [24800.0, 7.0], [26200.0, 16.0], [25600.0, 3.0], [26000.0, 17.0], [25800.0, 4.0], [26600.0, 2.0], [26400.0, 5.0], [26800.0, 6.0], [27200.0, 23.0], [27000.0, 26.0], [27400.0, 20.0], [27600.0, 1.0], [27800.0, 2.0], [28400.0, 20.0], [28000.0, 23.0], [28200.0, 25.0], [28600.0, 1.0], [29000.0, 23.0], [29200.0, 15.0], [28800.0, 4.0], [29400.0, 13.0], [29600.0, 4.0], [30000.0, 161.0], [29800.0, 2.0], [16900.0, 1.0], [16700.0, 1.0], [17300.0, 1.0], [17700.0, 4.0], [17500.0, 1.0], [18100.0, 3.0], [17900.0, 5.0], [18300.0, 2.0], [18900.0, 7.0], [18700.0, 9.0], [18500.0, 11.0], [19100.0, 2.0], [19300.0, 2.0], [19500.0, 7.0], [20100.0, 3.0], [20300.0, 4.0], [19900.0, 11.0], [19700.0, 25.0], [20700.0, 24.0], [20500.0, 18.0], [20900.0, 12.0], [21100.0, 9.0], [21300.0, 7.0], [21500.0, 25.0], [21700.0, 17.0], [21900.0, 20.0], [22500.0, 12.0], [22300.0, 11.0], [22100.0, 3.0], [22700.0, 30.0], [23100.0, 14.0], [23300.0, 4.0], [22900.0, 20.0], [23500.0, 26.0], [24300.0, 7.0], [23900.0, 22.0], [24100.0, 7.0], [23700.0, 25.0], [24500.0, 17.0], [24900.0, 10.0], [25500.0, 21.0], [24700.0, 22.0], [25300.0, 2.0], [25100.0, 1.0], [26500.0, 10.0], [25900.0, 14.0], [25700.0, 23.0], [26300.0, 7.0], [26100.0, 3.0], [26700.0, 24.0], [26900.0, 9.0], [27500.0, 19.0], [27100.0, 3.0], [27300.0, 3.0], [27700.0, 25.0], [28300.0, 5.0], [28500.0, 17.0], [27900.0, 10.0], [28900.0, 20.0], [29100.0, 6.0], [28700.0, 25.0], [29500.0, 10.0], [29300.0, 1.0], [29700.0, 32.0], [29900.0, 54.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 31000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 532.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3224.0, "series": [{"data": [[0.0, 1817.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 532.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3224.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1218.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 19.263099219620972, "minX": 1.70033268E12, "maxY": 120.0, "series": [{"data": [[1.70033316E12, 120.0], [1.7003328E12, 114.86768802228417], [1.70033286E12, 120.0], [1.70033346E12, 120.0], [1.70033358E12, 94.08727272727272], [1.70033352E12, 120.0], [1.70033322E12, 120.0], [1.70033292E12, 120.0], [1.70033298E12, 120.0], [1.70033334E12, 120.0], [1.70033328E12, 120.0], [1.70033268E12, 19.263099219620972], [1.7003334E12, 120.0], [1.70033274E12, 68.57182835820899], [1.7003331E12, 120.0], [1.70033304E12, 120.0]], "isOverall": false, "label": "OnlineConversion", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70033358E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 12.4, "minX": 1.0, "maxY": 24615.2, "series": [{"data": [[2.0, 6559.6], [3.0, 4767.714285714286], [4.0, 3195.181818181818], [5.0, 2885.666666666667], [6.0, 418.7692307692308], [7.0, 390.18750000000006], [8.0, 442.99999999999994], [9.0, 2245.5625], [10.0, 1938.952380952381], [11.0, 2195.0555555555557], [12.0, 2754.2857142857147], [13.0, 2683.076923076923], [14.0, 678.9230769230769], [15.0, 1364.8124999999998], [16.0, 822.6875], [17.0, 1121.3684210526317], [18.0, 3989.4], [19.0, 2619.1666666666665], [20.0, 5036.0], [21.0, 3548.1538461538457], [22.0, 4872.222222222223], [23.0, 1376.909090909091], [24.0, 1619.5], [25.0, 6586.25], [26.0, 913.3333333333334], [27.0, 3661.7692307692305], [28.0, 4484.200000000001], [29.0, 8338.333333333332], [30.0, 7753.666666666667], [31.0, 5357.75], [32.0, 4966.727272727272], [33.0, 3836.25], [34.0, 4703.6], [35.0, 6998.555555555555], [36.0, 5338.923076923077], [37.0, 2770.125], [38.0, 4863.75], [39.0, 4531.25], [40.0, 3053.7142857142862], [41.0, 7147.285714285714], [42.0, 6519.5], [43.0, 6147.375], [44.0, 3922.4999999999995], [45.0, 6092.714285714286], [46.0, 8816.0], [47.0, 2762.2222222222226], [48.0, 6499.666666666666], [49.0, 6323.5], [50.0, 2704.133333333333], [51.0, 4785.111111111111], [52.0, 3541.2222222222217], [53.0, 4169.166666666667], [54.0, 5086.222222222223], [55.0, 7550.333333333333], [56.0, 5667.700000000001], [57.0, 4777.8], [58.0, 4432.5], [59.0, 3173.0], [60.0, 5374.5], [61.0, 3379.333333333333], [62.0, 5471.857142857142], [63.0, 4226.947368421053], [64.0, 3624.7272727272725], [65.0, 2670.8888888888887], [66.0, 4088.833333333333], [67.0, 5165.285714285714], [68.0, 17111.846153846152], [69.0, 3789.1875], [70.0, 6155.533333333334], [71.0, 6050.888888888889], [72.0, 5484.533333333333], [73.0, 9431.75], [74.0, 6730.125], [75.0, 3713.3333333333335], [76.0, 1764.0], [77.0, 7772.666666666668], [78.0, 11882.57142857143], [79.0, 7304.300000000001], [80.0, 12932.666666666666], [81.0, 8711.571428571428], [82.0, 6315.2307692307695], [83.0, 10145.0], [84.0, 3197.4545454545455], [85.0, 2996.8461538461534], [86.0, 12447.166666666666], [87.0, 14418.8], [88.0, 8756.666666666666], [89.0, 11972.857142857143], [90.0, 5449.0], [91.0, 6386.333333333333], [92.0, 8897.444444444445], [93.0, 7065.857142857142], [94.0, 6846.153846153847], [95.0, 5996.666666666667], [96.0, 7992.0], [97.0, 8327.333333333332], [98.0, 3611.25], [99.0, 7442.4], [100.0, 10553.714285714284], [101.0, 11765.166666666668], [102.0, 6812.0], [103.0, 5543.1875], [104.0, 15471.1], [105.0, 4748.0], [106.0, 11474.0], [107.0, 17620.25], [108.0, 13157.692307692309], [109.0, 1873.0], [110.0, 14302.333333333334], [111.0, 5642.125], [112.0, 3700.0000000000005], [113.0, 24615.2], [114.0, 6728.933333333334], [115.0, 16226.300000000001], [116.0, 14643.25], [117.0, 21859.0], [118.0, 3501.3333333333335], [119.0, 6837.888888888889], [120.0, 22455.567839195995], [1.0, 15843.0]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[97.1857227488151, 16458.447571090044]], "isOverall": false, "label": "Leer Archivo-Aggregated", "isController": false}, {"data": [[2.0, 20.6], [3.0, 13.714285714285714], [4.0, 15.999999999999998], [5.0, 18.538461538461537], [6.0, 2020.0666666666666], [7.0, 28.062499999999996], [8.0, 3016.45], [9.0, 61.625], [10.0, 32.05], [11.0, 31.88888888888889], [12.0, 43.57142857142858], [13.0, 107.07142857142858], [14.0, 61.5], [15.0, 38.23529411764706], [16.0, 4547.9], [17.0, 1942.25], [18.0, 315.3076923076923], [19.0, 136.46153846153845], [20.0, 557.0], [21.0, 358.9090909090909], [22.0, 654.0909090909091], [23.0, 2687.461538461538], [24.0, 488.63636363636374], [25.0, 536.4615384615385], [26.0, 3449.1111111111113], [27.0, 403.58823529411757], [28.0, 325.9090909090909], [29.0, 12.75], [30.0, 662.5555555555555], [31.0, 261.25], [32.0, 148.16666666666666], [33.0, 4602.5], [34.0, 178.24999999999997], [35.0, 253.5], [36.0, 152.66666666666666], [37.0, 2026.357142857143], [38.0, 502.42857142857144], [39.0, 921.3846153846154], [40.0, 504.0], [41.0, 587.875], [42.0, 671.5], [43.0, 728.7777777777778], [44.0, 3006.2727272727275], [45.0, 665.0], [46.0, 2077.3333333333335], [47.0, 3223.0], [48.0, 684.4], [49.0, 2063.055555555555], [50.0, 541.6153846153846], [51.0, 550.0], [52.0, 902.0], [53.0, 981.8571428571429], [54.0, 653.3333333333334], [55.0, 3065.6666666666665], [56.0, 950.1111111111111], [57.0, 605.6666666666667], [58.0, 3863.0], [59.0, 3897.6], [60.0, 1621.1818181818182], [61.0, 1061.5625], [62.0, 423.58333333333337], [63.0, 492.72222222222223], [64.0, 445.8235294117647], [65.0, 35.42857142857143], [66.0, 13.666666666666666], [67.0, 12.4], [68.0, 1650.8888888888885], [69.0, 172.76923076923077], [70.0, 1860.769230769231], [71.0, 520.4999999999999], [72.0, 490.19999999999993], [73.0, 1378.7333333333336], [74.0, 1350.4285714285716], [75.0, 2331.642857142857], [76.0, 2984.2857142857147], [77.0, 2463.5], [78.0, 1971.0], [79.0, 2422.8333333333335], [80.0, 4904.75], [81.0, 4522.357142857143], [82.0, 2095.083333333333], [83.0, 3791.5555555555557], [84.0, 4133.318181818182], [85.0, 539.375], [86.0, 3701.0], [87.0, 2549.5], [88.0, 4279.0], [89.0, 3825.75], [90.0, 5802.666666666666], [91.0, 5447.875], [92.0, 4319.285714285714], [93.0, 4953.7692307692305], [94.0, 3608.3125000000005], [95.0, 8044.5], [96.0, 1861.5], [97.0, 3749.6666666666665], [98.0, 2796.75], [99.0, 3862.3333333333335], [100.0, 2614.8], [101.0, 3471.75], [102.0, 6008.9375], [103.0, 1691.3636363636367], [104.0, 3084.384615384615], [105.0, 6896.333333333333], [106.0, 1503.7777777777776], [107.0, 4819.8], [108.0, 1217.8], [109.0, 5422.866666666667], [110.0, 7468.571428571428], [111.0, 2368.8888888888887], [112.0, 7262.875], [113.0, 5281.75], [114.0, 4687.142857142857], [115.0, 3322.125], [116.0, 15.0], [117.0, 6025.333333333333], [118.0, 6880.363636363637], [119.0, 5511.857142857143], [120.0, 20397.326017375406], [1.0, 42.5]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[96.78418740849183, 13751.651537335281]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 120.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1361.2666666666667, "minX": 1.70033268E12, "maxY": 1.3081283486666666E8, "series": [{"data": [[1.70033316E12, 2.474245445E7], [1.7003328E12, 7.922589331666666E7], [1.70033286E12, 2.3163340783333335E7], [1.70033346E12, 2.47424336E7], [1.70033358E12, 1.789880735E7], [1.70033352E12, 1.9478453216666665E7], [1.70033322E12, 2.10577975E7], [1.70033292E12, 2.02680357E7], [1.70033298E12, 2.4215729816666666E7], [1.70033334E12, 1.6845954483333334E7], [1.70033328E12, 2.3163205683333334E7], [1.70033268E12, 1.1370398165E8], [1.7003334E12, 2.447900045E7], [1.70033274E12, 1.3081283486666666E8], [1.7003331E12, 2.3952768166666668E7], [1.70033304E12, 3.3691118266666666E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70033316E12, 1443.0333333333333], [1.7003328E12, 3688.65], [1.70033286E12, 1410.0166666666667], [1.70033346E12, 1522.5], [1.70033358E12, 1366.4], [1.70033352E12, 1387.25], [1.70033322E12, 1361.2666666666667], [1.70033292E12, 1436.25], [1.70033298E12, 1716.7666666666667], [1.70033334E12, 1756.3333333333333], [1.70033328E12, 1432.1666666666667], [1.70033268E12, 5106.1], [1.7003334E12, 1407.4666666666667], [1.70033274E12, 5949.883333333333], [1.7003331E12, 1474.2666666666667], [1.70033304E12, 2137.766666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70033358E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 210.57849462365584, "minX": 1.70033268E12, "maxY": 25804.15646258504, "series": [{"data": [[1.70033316E12, 24084.331081081073], [1.7003328E12, 11724.329639889198], [1.70033286E12, 24809.12000000001], [1.70033346E12, 24075.796178343946], [1.70033358E12, 23549.454545454548], [1.70033352E12, 24715.703225806446], [1.70033322E12, 25567.925675675688], [1.70033292E12, 25409.718309859167], [1.70033298E12, 21352.074712643673], [1.70033334E12, 20171.408045976994], [1.70033328E12, 23699.72435897437], [1.70033268E12, 1362.0046296296284], [1.7003334E12, 25804.15646258504], [1.70033274E12, 4785.69111969112], [1.7003331E12, 23384.02597402597], [1.70033304E12, 19773.179723502308]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.70033316E12, 23068.626582278477], [1.7003328E12, 6510.478991596642], [1.70033286E12, 21801.675496688742], [1.70033346E12, 22175.716981132067], [1.70033358E12, 21714.25], [1.70033352E12, 22208.195652173905], [1.70033322E12, 22824.85430463576], [1.70033292E12, 22878.102564102574], [1.70033298E12, 18330.233128834352], [1.70033334E12, 20305.147727272724], [1.70033328E12, 22087.854304635763], [1.70033268E12, 210.57849462365584], [1.7003334E12, 22892.4275862069], [1.70033274E12, 1565.3411552346574], [1.7003331E12, 22859.237500000003], [1.70033304E12, 17032.497487437176]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70033358E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 210.47526881720444, "minX": 1.70033268E12, "maxY": 23976.894366197183, "series": [{"data": [[1.70033316E12, 22395.202702702718], [1.7003328E12, 5445.182825484761], [1.70033286E12, 23002.086666666655], [1.70033346E12, 22456.292993630566], [1.70033358E12, 22102.28671328672], [1.70033352E12, 22739.238709677422], [1.70033322E12, 23718.797297297286], [1.70033292E12, 23976.894366197183], [1.70033298E12, 19975.86206896552], [1.70033334E12, 18909.419540229886], [1.70033328E12, 21941.750000000004], [1.70033268E12, 494.349537037037], [1.7003334E12, 22877.659863945577], [1.70033274E12, 1081.3378378378382], [1.7003331E12, 21437.675324675318], [1.70033304E12, 17967.870967741947]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.70033316E12, 23068.601265822785], [1.7003328E12, 6510.459383753499], [1.70033286E12, 21801.64900662251], [1.70033346E12, 22175.70440251572], [1.70033358E12, 21714.227272727265], [1.70033352E12, 22208.181159420295], [1.70033322E12, 22824.841059602644], [1.70033292E12, 22878.08974358974], [1.70033298E12, 18330.1963190184], [1.70033334E12, 20305.147727272724], [1.70033328E12, 22087.84768211921], [1.70033268E12, 210.47526881720444], [1.7003334E12, 22892.4275862069], [1.70033274E12, 1565.3032490974722], [1.7003331E12, 22859.212499999998], [1.70033304E12, 17032.47738693466]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70033358E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70033268E12, "maxY": 1.5192307692307692, "series": [{"data": [[1.70033316E12, 0.6351351351351352], [1.7003328E12, 0.11357340720221601], [1.70033286E12, 0.49999999999999983], [1.70033346E12, 0.5095541401273891], [1.70033358E12, 0.6433566433566434], [1.70033352E12, 0.7354838709677417], [1.70033322E12, 0.662162162162163], [1.70033292E12, 0.654929577464789], [1.70033298E12, 0.8965517241379313], [1.70033334E12, 0.7471264367816092], [1.70033328E12, 0.6858974358974358], [1.70033268E12, 0.0], [1.7003334E12, 0.7823129251700683], [1.70033274E12, 0.01737451737451737], [1.7003331E12, 0.6493506493506495], [1.70033304E12, 0.649769585253456]], "isOverall": false, "label": "Leer Archivo", "isController": false}, {"data": [[1.70033316E12, 1.0379746835443031], [1.7003328E12, 0.9691876750700282], [1.70033286E12, 1.271523178807948], [1.70033346E12, 1.1006289308176107], [1.70033358E12, 1.0075757575757582], [1.70033352E12, 1.1086956521739129], [1.70033322E12, 1.317880794701986], [1.70033292E12, 1.5192307692307692], [1.70033298E12, 0.9999999999999993], [1.70033334E12, 0.6704545454545454], [1.70033328E12, 0.9536423841059603], [1.70033268E12, 0.5075268817204305], [1.7003334E12, 1.013793103448276], [1.70033274E12, 0.6696750902527077], [1.7003331E12, 1.06875], [1.70033304E12, 0.8291457286432165]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70033358E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.70033268E12, "maxY": 30008.0, "series": [{"data": [[1.70033316E12, 29989.0], [1.7003328E12, 29741.0], [1.70033286E12, 29968.0], [1.70033346E12, 30003.0], [1.70033358E12, 30002.0], [1.70033352E12, 30007.0], [1.70033322E12, 30005.0], [1.70033292E12, 30003.0], [1.70033298E12, 29997.0], [1.70033334E12, 29768.0], [1.70033328E12, 29991.0], [1.70033268E12, 9193.0], [1.7003334E12, 29998.0], [1.70033274E12, 29318.0], [1.7003331E12, 29978.0], [1.70033304E12, 30008.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70033316E12, 29008.2], [1.7003328E12, 22556.100000000002], [1.70033286E12, 29038.3], [1.70033346E12, 29228.2], [1.70033358E12, 28229.6], [1.70033352E12, 28634.0], [1.70033322E12, 29448.2], [1.70033292E12, 29274.7], [1.70033298E12, 28415.400000000005], [1.70033334E12, 26985.0], [1.70033328E12, 28741.0], [1.70033268E12, 2020.600000000001], [1.7003334E12, 28550.699999999997], [1.70033274E12, 7712.200000000001], [1.7003331E12, 28761.4], [1.70033304E12, 27716.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70033316E12, 29983.44], [1.7003328E12, 29339.46], [1.70033286E12, 29823.62], [1.70033346E12, 29993.83], [1.70033358E12, 29978.44], [1.70033352E12, 29999.05], [1.70033322E12, 29927.08], [1.70033292E12, 29992.52], [1.70033298E12, 29718.739999999998], [1.70033334E12, 29568.92], [1.70033328E12, 29980.5], [1.70033268E12, 6532.359999999995], [1.7003334E12, 29988.52], [1.70033274E12, 22566.840000000026], [1.7003331E12, 29924.519999999997], [1.70033304E12, 29753.6]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70033316E12, 29701.2], [1.7003328E12, 25867.749999999996], [1.70033286E12, 29486.55], [1.70033346E12, 29706.15], [1.70033358E12, 29249.8], [1.70033352E12, 29731.5], [1.70033322E12, 29722.7], [1.70033292E12, 29741.05], [1.70033298E12, 29059.95], [1.70033334E12, 28165.399999999998], [1.70033328E12, 29238.5], [1.70033268E12, 3472.799999999992], [1.7003334E12, 29512.6], [1.70033274E12, 10396.2], [1.7003331E12, 29293.999999999996], [1.70033304E12, 29217.899999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70033316E12, 12.0], [1.7003328E12, 10.0], [1.70033286E12, 12.0], [1.70033346E12, 11.0], [1.70033358E12, 13.0], [1.70033352E12, 12.0], [1.70033322E12, 11.0], [1.70033292E12, 12.0], [1.70033298E12, 12.0], [1.70033334E12, 10.0], [1.70033328E12, 10.0], [1.70033268E12, 10.0], [1.7003334E12, 13.0], [1.70033274E12, 10.0], [1.7003331E12, 11.0], [1.70033304E12, 10.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70033316E12, 25718.0], [1.7003328E12, 507.0], [1.70033286E12, 25286.5], [1.70033346E12, 24538.0], [1.70033358E12, 20487.0], [1.70033352E12, 23050.5], [1.70033322E12, 25991.0], [1.70033292E12, 24530.5], [1.70033298E12, 19949.0], [1.70033334E12, 20979.0], [1.70033328E12, 23736.0], [1.70033268E12, 366.0], [1.7003334E12, 24751.5], [1.70033274E12, 543.0], [1.7003331E12, 23734.0], [1.70033304E12, 19744.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70033358E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 105.0, "minX": 1.0, "maxY": 31010.0, "series": [{"data": [[32.0, 982.0], [2.0, 26047.5], [33.0, 19455.0], [35.0, 393.5], [37.0, 105.0], [36.0, 552.5], [3.0, 25537.0], [49.0, 11987.5], [55.0, 611.0], [4.0, 24795.0], [5.0, 24948.0], [6.0, 23999.0], [7.0, 24025.0], [8.0, 22263.0], [9.0, 20775.5], [10.0, 23777.0], [11.0, 23005.0], [12.0, 20471.5], [13.0, 453.5], [14.0, 5424.0], [15.0, 4332.5], [1.0, 25988.0], [16.0, 496.0], [17.0, 492.0], [18.0, 1684.5], [19.0, 385.0], [20.0, 417.0], [21.0, 3683.5], [22.0, 468.0], [23.0, 889.0], [24.0, 648.0], [25.0, 592.0], [26.0, 535.5], [27.0, 629.0], [28.0, 315.5], [29.0, 478.5], [30.0, 579.0], [31.0, 482.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 31002.5], [2.0, 30009.5], [33.0, 18730.5], [35.0, 30004.0], [3.0, 31003.0], [49.0, 15240.0], [55.0, 18496.0], [4.0, 31001.0], [5.0, 30006.0], [6.0, 31003.0], [7.0, 31004.0], [8.0, 30005.0], [9.0, 31002.5], [10.0, 30005.5], [11.0, 30004.0], [12.0, 30003.5], [13.0, 30005.5], [14.0, 30006.0], [15.0, 30004.0], [16.0, 31004.0], [1.0, 30005.0], [17.0, 31004.0], [18.0, 30003.0], [19.0, 31004.5], [20.0, 30003.0], [21.0, 19519.0], [22.0, 31010.0], [23.0, 21993.0], [24.0, 17988.0], [25.0, 30004.0], [26.0, 30003.0], [27.0, 30001.5], [28.0, 31002.5], [29.0, 31004.0], [30.0, 30003.0], [31.0, 22835.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 55.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 104.0, "minX": 1.0, "maxY": 30003.5, "series": [{"data": [[32.0, 495.0], [2.0, 23509.0], [33.0, 19455.0], [35.0, 198.5], [37.0, 104.0], [36.0, 305.0], [3.0, 23499.0], [49.0, 11987.5], [55.0, 267.5], [4.0, 22800.0], [5.0, 23959.0], [6.0, 22783.0], [7.0, 23333.0], [8.0, 21588.0], [9.0, 19015.5], [10.0, 23637.0], [11.0, 21785.0], [12.0, 20375.5], [13.0, 217.0], [14.0, 2799.0], [15.0, 3430.5], [1.0, 23774.0], [16.0, 220.0], [17.0, 267.0], [18.0, 997.5], [19.0, 193.0], [20.0, 239.0], [21.0, 1272.0], [22.0, 277.0], [23.0, 849.0], [24.0, 358.0], [25.0, 309.0], [26.0, 256.0], [27.0, 385.0], [28.0, 165.5], [29.0, 247.5], [30.0, 352.0], [31.0, 239.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 27488.0], [2.0, 29979.0], [33.0, 18730.5], [35.0, 30002.5], [3.0, 29938.0], [49.0, 15240.0], [55.0, 18496.0], [4.0, 29779.0], [5.0, 29986.0], [6.0, 28726.0], [7.0, 29204.0], [8.0, 30000.0], [9.0, 28873.0], [10.0, 29993.0], [11.0, 29984.5], [12.0, 24327.5], [13.0, 30003.5], [14.0, 29734.0], [15.0, 30002.0], [16.0, 17477.0], [1.0, 30003.5], [17.0, 3979.0], [18.0, 29998.5], [19.0, 3047.5], [20.0, 30003.0], [21.0, 19519.0], [22.0, 6814.0], [23.0, 21993.0], [24.0, 17722.0], [25.0, 29978.0], [26.0, 30003.0], [27.0, 30000.0], [28.0, 29632.5], [29.0, 1914.0], [30.0, 30003.0], [31.0, 22835.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 55.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.5833333333333335, "minX": 1.70033268E12, "maxY": 18.866666666666667, "series": [{"data": [[1.70033316E12, 5.1], [1.7003328E12, 12.316666666666666], [1.70033286E12, 5.016666666666667], [1.70033346E12, 5.266666666666667], [1.70033358E12, 2.5833333333333335], [1.70033352E12, 4.883333333333334], [1.70033322E12, 4.983333333333333], [1.70033292E12, 4.966666666666667], [1.70033298E12, 5.616666666666666], [1.70033334E12, 5.833333333333333], [1.70033328E12, 5.116666666666666], [1.70033268E12, 15.6], [1.7003334E12, 4.866666666666666], [1.70033274E12, 18.866666666666667], [1.7003331E12, 5.233333333333333], [1.70033304E12, 6.933333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70033358E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70033268E12, "maxY": 17.516666666666666, "series": [{"data": [[1.70033316E12, 4.183333333333334], [1.7003328E12, 10.966666666666667], [1.70033286E12, 3.966666666666667], [1.70033346E12, 4.1], [1.70033358E12, 2.9166666666666665], [1.70033352E12, 3.4], [1.70033322E12, 3.75], [1.70033292E12, 3.8333333333333335], [1.70033298E12, 3.8666666666666667], [1.70033334E12, 3.05], [1.70033328E12, 3.7333333333333334], [1.70033268E12, 14.95], [1.7003334E12, 3.8], [1.70033274E12, 17.516666666666666], [1.7003331E12, 3.9166666666666665], [1.70033304E12, 4.933333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70033316E12, 0.08333333333333333], [1.70033286E12, 0.016666666666666666], [1.70033346E12, 0.08333333333333333], [1.70033358E12, 0.3], [1.70033352E12, 0.16666666666666666], [1.70033322E12, 0.11666666666666667], [1.70033292E12, 0.05], [1.70033298E12, 0.38333333333333336], [1.70033334E12, 0.95], [1.70033328E12, 0.25], [1.7003334E12, 0.16666666666666666], [1.7003331E12, 0.2833333333333333], [1.70033304E12, 0.4166666666666667]], "isOverall": false, "label": "422", "isController": false}, {"data": [[1.70033316E12, 0.21666666666666667], [1.70033286E12, 0.3333333333333333], [1.70033346E12, 0.48333333333333334], [1.70033358E12, 1.0166666666666666], [1.70033352E12, 0.6833333333333333], [1.70033322E12, 0.4], [1.70033292E12, 0.55], [1.70033298E12, 1.05], [1.70033334E12, 1.8166666666666667], [1.70033328E12, 0.5166666666666667], [1.7003334E12, 0.38333333333333336], [1.7003331E12, 0.48333333333333334], [1.70033304E12, 1.1833333333333333]], "isOverall": false, "label": "504", "isController": false}, {"data": [[1.70033316E12, 0.6166666666666667], [1.7003328E12, 1.0], [1.70033286E12, 0.7], [1.70033346E12, 0.6], [1.70033358E12, 0.35], [1.70033352E12, 0.6333333333333333], [1.70033322E12, 0.7166666666666667], [1.70033292E12, 0.5333333333333333], [1.70033298E12, 0.31666666666666665], [1.70033334E12, 0.016666666666666666], [1.70033328E12, 0.6166666666666667], [1.7003334E12, 0.5166666666666667], [1.70033274E12, 0.35], [1.7003331E12, 0.55], [1.70033304E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70033358E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70033268E12, "maxY": 9.233333333333333, "series": [{"data": [[1.70033316E12, 0.9], [1.7003328E12, 1.0], [1.70033286E12, 1.0333333333333334], [1.70033346E12, 1.05], [1.70033358E12, 1.25], [1.70033352E12, 1.35], [1.70033322E12, 1.1333333333333333], [1.70033292E12, 1.0833333333333333], [1.70033298E12, 1.3666666666666667], [1.70033334E12, 1.8333333333333333], [1.70033328E12, 1.1333333333333333], [1.7003334E12, 0.9], [1.70033274E12, 0.35], [1.7003331E12, 1.05], [1.70033304E12, 1.4833333333333334]], "isOverall": false, "label": "Leer Archivo-failure", "isController": false}, {"data": [[1.70033316E12, 1.5666666666666667], [1.7003328E12, 5.016666666666667], [1.70033286E12, 1.4666666666666666], [1.70033346E12, 1.5666666666666667], [1.70033358E12, 1.1333333333333333], [1.70033352E12, 1.2333333333333334], [1.70033322E12, 1.3333333333333333], [1.70033292E12, 1.2833333333333334], [1.70033298E12, 1.5333333333333334], [1.70033334E12, 1.0666666666666667], [1.70033328E12, 1.4666666666666666], [1.70033268E12, 7.2], [1.7003334E12, 1.55], [1.70033274E12, 8.283333333333333], [1.7003331E12, 1.5166666666666666], [1.70033304E12, 2.1333333333333333]], "isOverall": false, "label": "Leer Archivo-success", "isController": false}, {"data": [[1.70033316E12, 2.6166666666666667], [1.7003328E12, 5.95], [1.70033286E12, 2.5], [1.70033346E12, 2.533333333333333], [1.70033358E12, 1.7833333333333334], [1.70033352E12, 2.1666666666666665], [1.70033322E12, 2.4166666666666665], [1.70033292E12, 2.55], [1.70033298E12, 2.3333333333333335], [1.70033334E12, 1.9833333333333334], [1.70033328E12, 2.2666666666666666], [1.70033268E12, 7.75], [1.7003334E12, 2.25], [1.70033274E12, 9.233333333333333], [1.7003331E12, 2.4], [1.70033304E12, 2.8]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.70033316E12, 0.016666666666666666], [1.70033286E12, 0.016666666666666666], [1.70033346E12, 0.11666666666666667], [1.70033358E12, 0.4166666666666667], [1.70033352E12, 0.13333333333333333], [1.70033322E12, 0.1], [1.70033292E12, 0.05], [1.70033298E12, 0.38333333333333336], [1.70033334E12, 0.95], [1.70033328E12, 0.25], [1.7003334E12, 0.16666666666666666], [1.7003331E12, 0.26666666666666666], [1.70033304E12, 0.5166666666666667]], "isOverall": false, "label": "Login-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70033358E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.70033268E12, "maxY": 17.516666666666666, "series": [{"data": [[1.70033316E12, 4.183333333333334], [1.7003328E12, 10.966666666666667], [1.70033286E12, 3.966666666666667], [1.70033346E12, 4.1], [1.70033358E12, 2.9166666666666665], [1.70033352E12, 3.4], [1.70033322E12, 3.75], [1.70033292E12, 3.8333333333333335], [1.70033298E12, 3.8666666666666667], [1.70033334E12, 3.05], [1.70033328E12, 3.7333333333333334], [1.70033268E12, 14.95], [1.7003334E12, 3.8], [1.70033274E12, 17.516666666666666], [1.7003331E12, 3.9166666666666665], [1.70033304E12, 4.933333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70033316E12, 0.9166666666666666], [1.7003328E12, 1.0], [1.70033286E12, 1.05], [1.70033346E12, 1.1666666666666667], [1.70033358E12, 1.6666666666666667], [1.70033352E12, 1.4833333333333334], [1.70033322E12, 1.2333333333333334], [1.70033292E12, 1.1333333333333333], [1.70033298E12, 1.75], [1.70033334E12, 2.783333333333333], [1.70033328E12, 1.3833333333333333], [1.7003334E12, 1.0666666666666667], [1.70033274E12, 0.35], [1.7003331E12, 1.3166666666666667], [1.70033304E12, 2.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70033358E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

