/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 27569.0, "series": [{"data": [[0.0, 377.0], [0.1, 377.0], [0.2, 416.0], [0.3, 416.0], [0.4, 422.0], [0.5, 423.0], [0.6, 423.0], [0.7, 445.0], [0.8, 450.0], [0.9, 450.0], [1.0, 450.0], [1.1, 453.0], [1.2, 453.0], [1.3, 455.0], [1.4, 457.0], [1.5, 457.0], [1.6, 458.0], [1.7, 459.0], [1.8, 459.0], [1.9, 462.0], [2.0, 466.0], [2.1, 466.0], [2.2, 469.0], [2.3, 478.0], [2.4, 478.0], [2.5, 479.0], [2.6, 479.0], [2.7, 485.0], [2.8, 492.0], [2.9, 492.0], [3.0, 494.0], [3.1, 500.0], [3.2, 500.0], [3.3, 522.0], [3.4, 532.0], [3.5, 532.0], [3.6, 560.0], [3.7, 571.0], [3.8, 571.0], [3.9, 601.0], [4.0, 719.0], [4.1, 719.0], [4.2, 725.0], [4.3, 768.0], [4.4, 768.0], [4.5, 783.0], [4.6, 797.0], [4.7, 797.0], [4.8, 1014.0], [4.9, 1014.0], [5.0, 1163.0], [5.1, 1178.0], [5.2, 1178.0], [5.3, 1196.0], [5.4, 1236.0], [5.5, 1236.0], [5.6, 1303.0], [5.7, 1356.0], [5.8, 1356.0], [5.9, 1357.0], [6.0, 1360.0], [6.1, 1360.0], [6.2, 1374.0], [6.3, 1389.0], [6.4, 1389.0], [6.5, 1443.0], [6.6, 1449.0], [6.7, 1449.0], [6.8, 1464.0], [6.9, 1466.0], [7.0, 1466.0], [7.1, 1563.0], [7.2, 1626.0], [7.3, 1626.0], [7.4, 1641.0], [7.5, 1641.0], [7.6, 1642.0], [7.7, 1680.0], [7.8, 1680.0], [7.9, 1714.0], [8.0, 1755.0], [8.1, 1755.0], [8.2, 1762.0], [8.3, 1867.0], [8.4, 1867.0], [8.5, 1869.0], [8.6, 1878.0], [8.7, 1878.0], [8.8, 1907.0], [8.9, 1945.0], [9.0, 1945.0], [9.1, 2014.0], [9.2, 2060.0], [9.3, 2060.0], [9.4, 2170.0], [9.5, 2213.0], [9.6, 2213.0], [9.7, 2224.0], [9.8, 2224.0], [9.9, 2242.0], [10.0, 2397.0], [10.1, 2397.0], [10.2, 2411.0], [10.3, 2417.0], [10.4, 2417.0], [10.5, 2525.0], [10.6, 2541.0], [10.7, 2541.0], [10.8, 2585.0], [10.9, 2674.0], [11.0, 2674.0], [11.1, 2677.0], [11.2, 2703.0], [11.3, 2703.0], [11.4, 2721.0], [11.5, 2727.0], [11.6, 2727.0], [11.7, 2828.0], [11.8, 2949.0], [11.9, 2949.0], [12.0, 2952.0], [12.1, 2953.0], [12.2, 2953.0], [12.3, 3133.0], [12.4, 3133.0], [12.5, 3196.0], [12.6, 3208.0], [12.7, 3208.0], [12.8, 3210.0], [12.9, 3238.0], [13.0, 3238.0], [13.1, 3264.0], [13.2, 3296.0], [13.3, 3296.0], [13.4, 3331.0], [13.5, 3440.0], [13.6, 3440.0], [13.7, 3576.0], [13.8, 3667.0], [13.9, 3667.0], [14.0, 3672.0], [14.1, 3687.0], [14.2, 3687.0], [14.3, 3711.0], [14.4, 3715.0], [14.5, 3715.0], [14.6, 3738.0], [14.7, 3738.0], [14.8, 3749.0], [14.9, 3752.0], [15.0, 3752.0], [15.1, 3755.0], [15.2, 3780.0], [15.3, 3780.0], [15.4, 3832.0], [15.5, 3843.0], [15.6, 3843.0], [15.7, 3849.0], [15.8, 4006.0], [15.9, 4006.0], [16.0, 4035.0], [16.1, 4175.0], [16.2, 4175.0], [16.3, 4176.0], [16.4, 4178.0], [16.5, 4178.0], [16.6, 4235.0], [16.7, 4328.0], [16.8, 4328.0], [16.9, 4483.0], [17.0, 4570.0], [17.1, 4570.0], [17.2, 4671.0], [17.3, 4671.0], [17.4, 4733.0], [17.5, 4760.0], [17.6, 4760.0], [17.7, 4810.0], [17.8, 4823.0], [17.9, 4823.0], [18.0, 4918.0], [18.1, 5019.0], [18.2, 5019.0], [18.3, 5177.0], [18.4, 5228.0], [18.5, 5228.0], [18.6, 5236.0], [18.7, 5260.0], [18.8, 5260.0], [18.9, 5345.0], [19.0, 5435.0], [19.1, 5435.0], [19.2, 5533.0], [19.3, 5542.0], [19.4, 5542.0], [19.5, 5550.0], [19.6, 5550.0], [19.7, 5563.0], [19.8, 5584.0], [19.9, 5584.0], [20.0, 5663.0], [20.1, 5750.0], [20.2, 5750.0], [20.3, 5752.0], [20.4, 5830.0], [20.5, 5830.0], [20.6, 5910.0], [20.7, 5959.0], [20.8, 5959.0], [20.9, 6251.0], [21.0, 6458.0], [21.1, 6458.0], [21.2, 6525.0], [21.3, 6695.0], [21.4, 6695.0], [21.5, 6705.0], [21.6, 6710.0], [21.7, 6710.0], [21.8, 6768.0], [21.9, 6856.0], [22.0, 6856.0], [22.1, 6929.0], [22.2, 6929.0], [22.3, 7125.0], [22.4, 7194.0], [22.5, 7194.0], [22.6, 7307.0], [22.7, 7439.0], [22.8, 7439.0], [22.9, 7467.0], [23.0, 7473.0], [23.1, 7473.0], [23.2, 7496.0], [23.3, 7686.0], [23.4, 7686.0], [23.5, 7860.0], [23.6, 8002.0], [23.7, 8002.0], [23.8, 8084.0], [23.9, 8105.0], [24.0, 8105.0], [24.1, 8279.0], [24.2, 8539.0], [24.3, 8539.0], [24.4, 8585.0], [24.5, 8585.0], [24.6, 8653.0], [24.7, 8804.0], [24.8, 8804.0], [24.9, 8842.0], [25.0, 8866.0], [25.1, 8866.0], [25.2, 9035.0], [25.3, 9088.0], [25.4, 9088.0], [25.5, 9148.0], [25.6, 9252.0], [25.7, 9252.0], [25.8, 9404.0], [25.9, 9425.0], [26.0, 9425.0], [26.1, 9619.0], [26.2, 9954.0], [26.3, 9954.0], [26.4, 10049.0], [26.5, 10104.0], [26.6, 10104.0], [26.7, 10117.0], [26.8, 10196.0], [26.9, 10196.0], [27.0, 10255.0], [27.1, 10255.0], [27.2, 10398.0], [27.3, 10518.0], [27.4, 10518.0], [27.5, 10574.0], [27.6, 10625.0], [27.7, 10625.0], [27.8, 10789.0], [27.9, 10884.0], [28.0, 10884.0], [28.1, 10938.0], [28.2, 11202.0], [28.3, 11202.0], [28.4, 11262.0], [28.5, 11377.0], [28.6, 11377.0], [28.7, 11471.0], [28.8, 11547.0], [28.9, 11547.0], [29.0, 11655.0], [29.1, 11681.0], [29.2, 11681.0], [29.3, 11710.0], [29.4, 11710.0], [29.5, 11826.0], [29.6, 11842.0], [29.7, 11842.0], [29.8, 11890.0], [29.9, 11964.0], [30.0, 11964.0], [30.1, 11969.0], [30.2, 11971.0], [30.3, 11971.0], [30.4, 12018.0], [30.5, 12246.0], [30.6, 12246.0], [30.7, 12263.0], [30.8, 12271.0], [30.9, 12271.0], [31.0, 12293.0], [31.1, 12447.0], [31.2, 12447.0], [31.3, 12515.0], [31.4, 12538.0], [31.5, 12538.0], [31.6, 12567.0], [31.7, 12568.0], [31.8, 12568.0], [31.9, 12604.0], [32.0, 12604.0], [32.1, 12618.0], [32.2, 12705.0], [32.3, 12705.0], [32.4, 12756.0], [32.5, 12911.0], [32.6, 12911.0], [32.7, 12939.0], [32.8, 12958.0], [32.9, 12958.0], [33.0, 12986.0], [33.1, 13026.0], [33.2, 13026.0], [33.3, 13086.0], [33.4, 13090.0], [33.5, 13090.0], [33.6, 13104.0], [33.7, 13166.0], [33.8, 13166.0], [33.9, 13209.0], [34.0, 13264.0], [34.1, 13264.0], [34.2, 13269.0], [34.3, 13269.0], [34.4, 13278.0], [34.5, 13333.0], [34.6, 13333.0], [34.7, 13426.0], [34.8, 13589.0], [34.9, 13589.0], [35.0, 13590.0], [35.1, 13600.0], [35.2, 13600.0], [35.3, 13610.0], [35.4, 13664.0], [35.5, 13664.0], [35.6, 13675.0], [35.7, 13681.0], [35.8, 13681.0], [35.9, 13749.0], [36.0, 13991.0], [36.1, 13991.0], [36.2, 14013.0], [36.3, 14097.0], [36.4, 14097.0], [36.5, 14127.0], [36.6, 14127.0], [36.7, 14135.0], [36.8, 14272.0], [36.9, 14272.0], [37.0, 14302.0], [37.1, 14480.0], [37.2, 14480.0], [37.3, 14489.0], [37.4, 14514.0], [37.5, 14514.0], [37.6, 14586.0], [37.7, 14672.0], [37.8, 14672.0], [37.9, 14763.0], [38.0, 14785.0], [38.1, 14785.0], [38.2, 14820.0], [38.3, 14857.0], [38.4, 14857.0], [38.5, 14883.0], [38.6, 14926.0], [38.7, 14926.0], [38.8, 14927.0], [38.9, 14932.0], [39.0, 14932.0], [39.1, 14936.0], [39.2, 14936.0], [39.3, 14969.0], [39.4, 15036.0], [39.5, 15036.0], [39.6, 15072.0], [39.7, 15088.0], [39.8, 15088.0], [39.9, 15097.0], [40.0, 15134.0], [40.1, 15134.0], [40.2, 15149.0], [40.3, 15151.0], [40.4, 15151.0], [40.5, 15155.0], [40.6, 15238.0], [40.7, 15238.0], [40.8, 15368.0], [40.9, 15390.0], [41.0, 15390.0], [41.1, 15402.0], [41.2, 15416.0], [41.3, 15416.0], [41.4, 15422.0], [41.5, 15422.0], [41.6, 15436.0], [41.7, 15456.0], [41.8, 15456.0], [41.9, 15546.0], [42.0, 15554.0], [42.1, 15554.0], [42.2, 15564.0], [42.3, 15577.0], [42.4, 15577.0], [42.5, 15603.0], [42.6, 15616.0], [42.7, 15616.0], [42.8, 15641.0], [42.9, 15645.0], [43.0, 15645.0], [43.1, 15658.0], [43.2, 15681.0], [43.3, 15681.0], [43.4, 15698.0], [43.5, 15701.0], [43.6, 15701.0], [43.7, 15733.0], [43.8, 15778.0], [43.9, 15778.0], [44.0, 15800.0], [44.1, 15800.0], [44.2, 15821.0], [44.3, 15834.0], [44.4, 15834.0], [44.5, 15868.0], [44.6, 15946.0], [44.7, 15946.0], [44.8, 15952.0], [44.9, 15964.0], [45.0, 15964.0], [45.1, 15978.0], [45.2, 15991.0], [45.3, 15991.0], [45.4, 15994.0], [45.5, 15998.0], [45.6, 15998.0], [45.7, 16018.0], [45.8, 16032.0], [45.9, 16032.0], [46.0, 16034.0], [46.1, 16058.0], [46.2, 16058.0], [46.3, 16067.0], [46.4, 16067.0], [46.5, 16077.0], [46.6, 16082.0], [46.7, 16082.0], [46.8, 16149.0], [46.9, 16196.0], [47.0, 16196.0], [47.1, 16198.0], [47.2, 16203.0], [47.3, 16203.0], [47.4, 16213.0], [47.5, 16284.0], [47.6, 16284.0], [47.7, 16292.0], [47.8, 16328.0], [47.9, 16328.0], [48.0, 16332.0], [48.1, 16351.0], [48.2, 16351.0], [48.3, 16407.0], [48.4, 16414.0], [48.5, 16414.0], [48.6, 16421.0], [48.7, 16427.0], [48.8, 16427.0], [48.9, 16427.0], [49.0, 16427.0], [49.1, 16455.0], [49.2, 16457.0], [49.3, 16457.0], [49.4, 16496.0], [49.5, 16555.0], [49.6, 16555.0], [49.7, 16560.0], [49.8, 16582.0], [49.9, 16582.0], [50.0, 16592.0], [50.1, 16614.0], [50.2, 16614.0], [50.3, 16622.0], [50.4, 16629.0], [50.5, 16629.0], [50.6, 16640.0], [50.7, 16652.0], [50.8, 16652.0], [50.9, 16660.0], [51.0, 16699.0], [51.1, 16699.0], [51.2, 16710.0], [51.3, 16710.0], [51.4, 16758.0], [51.5, 16760.0], [51.6, 16760.0], [51.7, 16793.0], [51.8, 16811.0], [51.9, 16811.0], [52.0, 16817.0], [52.1, 16832.0], [52.2, 16832.0], [52.3, 16842.0], [52.4, 16845.0], [52.5, 16845.0], [52.6, 16864.0], [52.7, 16877.0], [52.8, 16877.0], [52.9, 16882.0], [53.0, 16892.0], [53.1, 16892.0], [53.2, 16899.0], [53.3, 16900.0], [53.4, 16900.0], [53.5, 16911.0], [53.6, 16937.0], [53.7, 16937.0], [53.8, 16949.0], [53.9, 16949.0], [54.0, 16958.0], [54.1, 16966.0], [54.2, 16966.0], [54.3, 16994.0], [54.4, 16996.0], [54.5, 16996.0], [54.6, 17003.0], [54.7, 17011.0], [54.8, 17011.0], [54.9, 17024.0], [55.0, 17067.0], [55.1, 17067.0], [55.2, 17075.0], [55.3, 17079.0], [55.4, 17079.0], [55.5, 17093.0], [55.6, 17163.0], [55.7, 17163.0], [55.8, 17188.0], [55.9, 17235.0], [56.0, 17235.0], [56.1, 17247.0], [56.2, 17247.0], [56.3, 17264.0], [56.4, 17281.0], [56.5, 17281.0], [56.6, 17305.0], [56.7, 17344.0], [56.8, 17344.0], [56.9, 17423.0], [57.0, 17431.0], [57.1, 17431.0], [57.2, 17460.0], [57.3, 17464.0], [57.4, 17464.0], [57.5, 17469.0], [57.6, 17503.0], [57.7, 17503.0], [57.8, 17511.0], [57.9, 17513.0], [58.0, 17513.0], [58.1, 17532.0], [58.2, 17538.0], [58.3, 17538.0], [58.4, 17569.0], [58.5, 17572.0], [58.6, 17572.0], [58.7, 17592.0], [58.8, 17592.0], [58.9, 17620.0], [59.0, 17633.0], [59.1, 17633.0], [59.2, 17641.0], [59.3, 17653.0], [59.4, 17653.0], [59.5, 17653.0], [59.6, 17702.0], [59.7, 17702.0], [59.8, 17713.0], [59.9, 17718.0], [60.0, 17718.0], [60.1, 17726.0], [60.2, 17783.0], [60.3, 17783.0], [60.4, 17789.0], [60.5, 17819.0], [60.6, 17819.0], [60.7, 17845.0], [60.8, 17846.0], [60.9, 17846.0], [61.0, 17890.0], [61.1, 17890.0], [61.2, 17984.0], [61.3, 17999.0], [61.4, 17999.0], [61.5, 18004.0], [61.6, 18031.0], [61.7, 18031.0], [61.8, 18078.0], [61.9, 18095.0], [62.0, 18095.0], [62.1, 18112.0], [62.2, 18122.0], [62.3, 18122.0], [62.4, 18123.0], [62.5, 18129.0], [62.6, 18129.0], [62.7, 18162.0], [62.8, 18163.0], [62.9, 18163.0], [63.0, 18201.0], [63.1, 18217.0], [63.2, 18217.0], [63.3, 18231.0], [63.4, 18245.0], [63.5, 18245.0], [63.6, 18261.0], [63.7, 18261.0], [63.8, 18267.0], [63.9, 18277.0], [64.0, 18277.0], [64.1, 18288.0], [64.2, 18316.0], [64.3, 18316.0], [64.4, 18348.0], [64.5, 18355.0], [64.6, 18355.0], [64.7, 18361.0], [64.8, 18365.0], [64.9, 18365.0], [65.0, 18367.0], [65.1, 18377.0], [65.2, 18377.0], [65.3, 18398.0], [65.4, 18419.0], [65.5, 18419.0], [65.6, 18419.0], [65.7, 18424.0], [65.8, 18424.0], [65.9, 18426.0], [66.0, 18426.0], [66.1, 18427.0], [66.2, 18483.0], [66.3, 18483.0], [66.4, 18514.0], [66.5, 18519.0], [66.6, 18519.0], [66.7, 18542.0], [66.8, 18547.0], [66.9, 18547.0], [67.0, 18560.0], [67.1, 18561.0], [67.2, 18561.0], [67.3, 18568.0], [67.4, 18574.0], [67.5, 18574.0], [67.6, 18624.0], [67.7, 18642.0], [67.8, 18642.0], [67.9, 18694.0], [68.0, 18725.0], [68.1, 18725.0], [68.2, 18754.0], [68.3, 18754.0], [68.4, 18767.0], [68.5, 18791.0], [68.6, 18791.0], [68.7, 18858.0], [68.8, 18866.0], [68.9, 18866.0], [69.0, 18888.0], [69.1, 18898.0], [69.2, 18898.0], [69.3, 18909.0], [69.4, 18924.0], [69.5, 18924.0], [69.6, 18929.0], [69.7, 18953.0], [69.8, 18953.0], [69.9, 18973.0], [70.0, 18973.0], [70.1, 18973.0], [70.2, 18984.0], [70.3, 19005.0], [70.4, 19005.0], [70.5, 19010.0], [70.6, 19020.0], [70.7, 19020.0], [70.8, 19036.0], [70.9, 19036.0], [71.0, 19048.0], [71.1, 19061.0], [71.2, 19061.0], [71.3, 19077.0], [71.4, 19091.0], [71.5, 19091.0], [71.6, 19103.0], [71.7, 19121.0], [71.8, 19121.0], [71.9, 19143.0], [72.0, 19161.0], [72.1, 19161.0], [72.2, 19162.0], [72.3, 19163.0], [72.4, 19163.0], [72.5, 19166.0], [72.6, 19180.0], [72.7, 19180.0], [72.8, 19180.0], [72.9, 19189.0], [73.0, 19189.0], [73.1, 19190.0], [73.2, 19190.0], [73.3, 19199.0], [73.4, 19226.0], [73.5, 19226.0], [73.6, 19246.0], [73.7, 19250.0], [73.8, 19250.0], [73.9, 19271.0], [74.0, 19277.0], [74.1, 19277.0], [74.2, 19278.0], [74.3, 19295.0], [74.4, 19295.0], [74.5, 19307.0], [74.6, 19321.0], [74.7, 19321.0], [74.8, 19333.0], [74.9, 19341.0], [75.0, 19341.0], [75.1, 19343.0], [75.2, 19354.0], [75.3, 19354.0], [75.4, 19359.0], [75.5, 19405.0], [75.6, 19405.0], [75.7, 19411.0], [75.8, 19411.0], [75.9, 19416.0], [76.0, 19426.0], [76.1, 19426.0], [76.2, 19437.0], [76.3, 19451.0], [76.4, 19451.0], [76.5, 19453.0], [76.6, 19472.0], [76.7, 19472.0], [76.8, 19473.0], [76.9, 19479.0], [77.0, 19479.0], [77.1, 19486.0], [77.2, 19501.0], [77.3, 19501.0], [77.4, 19512.0], [77.5, 19522.0], [77.6, 19522.0], [77.7, 19530.0], [77.8, 19534.0], [77.9, 19534.0], [78.0, 19584.0], [78.1, 19584.0], [78.2, 19594.0], [78.3, 19607.0], [78.4, 19607.0], [78.5, 19618.0], [78.6, 19624.0], [78.7, 19624.0], [78.8, 19650.0], [78.9, 19651.0], [79.0, 19651.0], [79.1, 19661.0], [79.2, 19667.0], [79.3, 19667.0], [79.4, 19740.0], [79.5, 19750.0], [79.6, 19750.0], [79.7, 19771.0], [79.8, 19772.0], [79.9, 19772.0], [80.0, 19793.0], [80.1, 19818.0], [80.2, 19818.0], [80.3, 19820.0], [80.4, 19826.0], [80.5, 19826.0], [80.6, 19833.0], [80.7, 19833.0], [80.8, 19839.0], [80.9, 19845.0], [81.0, 19845.0], [81.1, 19847.0], [81.2, 19865.0], [81.3, 19865.0], [81.4, 19879.0], [81.5, 19893.0], [81.6, 19893.0], [81.7, 19942.0], [81.8, 19963.0], [81.9, 19963.0], [82.0, 19989.0], [82.1, 20029.0], [82.2, 20029.0], [82.3, 20037.0], [82.4, 20064.0], [82.5, 20064.0], [82.6, 20099.0], [82.7, 20136.0], [82.8, 20136.0], [82.9, 20140.0], [83.0, 20140.0], [83.1, 20148.0], [83.2, 20180.0], [83.3, 20180.0], [83.4, 20182.0], [83.5, 20193.0], [83.6, 20193.0], [83.7, 20200.0], [83.8, 20203.0], [83.9, 20203.0], [84.0, 20314.0], [84.1, 20337.0], [84.2, 20337.0], [84.3, 20370.0], [84.4, 20387.0], [84.5, 20387.0], [84.6, 20397.0], [84.7, 20407.0], [84.8, 20407.0], [84.9, 20423.0], [85.0, 20474.0], [85.1, 20474.0], [85.2, 20485.0], [85.3, 20490.0], [85.4, 20490.0], [85.5, 20610.0], [85.6, 20610.0], [85.7, 20633.0], [85.8, 20656.0], [85.9, 20656.0], [86.0, 20689.0], [86.1, 20732.0], [86.2, 20732.0], [86.3, 20745.0], [86.4, 20793.0], [86.5, 20793.0], [86.6, 20831.0], [86.7, 20867.0], [86.8, 20867.0], [86.9, 20874.0], [87.0, 20928.0], [87.1, 20928.0], [87.2, 20990.0], [87.3, 21001.0], [87.4, 21001.0], [87.5, 21047.0], [87.6, 21074.0], [87.7, 21074.0], [87.8, 21127.0], [87.9, 21127.0], [88.0, 21136.0], [88.1, 21235.0], [88.2, 21235.0], [88.3, 21263.0], [88.4, 21315.0], [88.5, 21315.0], [88.6, 21329.0], [88.7, 21339.0], [88.8, 21339.0], [88.9, 21354.0], [89.0, 21362.0], [89.1, 21362.0], [89.2, 21367.0], [89.3, 21376.0], [89.4, 21376.0], [89.5, 21430.0], [89.6, 21460.0], [89.7, 21460.0], [89.8, 21486.0], [89.9, 21505.0], [90.0, 21505.0], [90.1, 21519.0], [90.2, 21550.0], [90.3, 21550.0], [90.4, 21608.0], [90.5, 21608.0], [90.6, 21621.0], [90.7, 21632.0], [90.8, 21632.0], [90.9, 21658.0], [91.0, 21658.0], [91.1, 21658.0], [91.2, 21674.0], [91.3, 21716.0], [91.4, 21716.0], [91.5, 21788.0], [91.6, 21795.0], [91.7, 21795.0], [91.8, 21797.0], [91.9, 21834.0], [92.0, 21834.0], [92.1, 21903.0], [92.2, 21930.0], [92.3, 21930.0], [92.4, 21960.0], [92.5, 21982.0], [92.6, 21982.0], [92.7, 22022.0], [92.8, 22022.0], [92.9, 22024.0], [93.0, 22041.0], [93.1, 22041.0], [93.2, 22057.0], [93.3, 22080.0], [93.4, 22080.0], [93.5, 22097.0], [93.6, 22101.0], [93.7, 22101.0], [93.8, 22135.0], [93.9, 22144.0], [94.0, 22144.0], [94.1, 22176.0], [94.2, 22197.0], [94.3, 22197.0], [94.4, 22204.0], [94.5, 22325.0], [94.6, 22325.0], [94.7, 22334.0], [94.8, 22347.0], [94.9, 22347.0], [95.0, 22453.0], [95.1, 22597.0], [95.2, 22597.0], [95.3, 22630.0], [95.4, 22630.0], [95.5, 22673.0], [95.6, 22761.0], [95.7, 22761.0], [95.8, 22784.0], [95.9, 22826.0], [96.0, 22826.0], [96.1, 22868.0], [96.2, 22883.0], [96.3, 22883.0], [96.4, 23082.0], [96.5, 23087.0], [96.6, 23087.0], [96.7, 23102.0], [96.8, 23145.0], [96.9, 23145.0], [97.0, 23191.0], [97.1, 23209.0], [97.2, 23209.0], [97.3, 23230.0], [97.4, 23327.0], [97.5, 23327.0], [97.6, 23351.0], [97.7, 23351.0], [97.8, 23370.0], [97.9, 23540.0], [98.0, 23540.0], [98.1, 23583.0], [98.2, 24178.0], [98.3, 24178.0], [98.4, 24205.0], [98.5, 24226.0], [98.6, 24226.0], [98.7, 24391.0], [98.8, 24419.0], [98.9, 24419.0], [99.0, 24479.0], [99.1, 24538.0], [99.2, 24538.0], [99.3, 24630.0], [99.4, 24978.0], [99.5, 24978.0], [99.6, 25362.0], [99.7, 25443.0], [99.8, 25443.0], [99.9, 27569.0], [100.0, 27569.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[0.0, 9.0], [0.1, 9.0], [0.2, 9.0], [0.3, 9.0], [0.4, 9.0], [0.5, 9.0], [0.6, 9.0], [0.7, 9.0], [0.8, 10.0], [0.9, 10.0], [1.0, 10.0], [1.1, 10.0], [1.2, 10.0], [1.3, 10.0], [1.4, 10.0], [1.5, 10.0], [1.6, 10.0], [1.7, 10.0], [1.8, 11.0], [1.9, 11.0], [2.0, 11.0], [2.1, 11.0], [2.2, 12.0], [2.3, 12.0], [2.4, 12.0], [2.5, 12.0], [2.6, 12.0], [2.7, 13.0], [2.8, 13.0], [2.9, 13.0], [3.0, 13.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 14.0], [3.5, 15.0], [3.6, 15.0], [3.7, 18.0], [3.8, 20.0], [3.9, 20.0], [4.0, 21.0], [4.1, 22.0], [4.2, 22.0], [4.3, 22.0], [4.4, 25.0], [4.5, 26.0], [4.6, 26.0], [4.7, 26.0], [4.8, 26.0], [4.9, 26.0], [5.0, 29.0], [5.1, 30.0], [5.2, 30.0], [5.3, 35.0], [5.4, 35.0], [5.5, 36.0], [5.6, 36.0], [5.7, 38.0], [5.8, 42.0], [5.9, 42.0], [6.0, 42.0], [6.1, 44.0], [6.2, 44.0], [6.3, 46.0], [6.4, 46.0], [6.5, 46.0], [6.6, 52.0], [6.7, 53.0], [6.8, 57.0], [6.9, 57.0], [7.0, 58.0], [7.1, 65.0], [7.2, 65.0], [7.3, 72.0], [7.4, 81.0], [7.5, 81.0], [7.6, 82.0], [7.7, 130.0], [7.8, 130.0], [7.9, 131.0], [8.0, 224.0], [8.1, 281.0], [8.2, 281.0], [8.3, 303.0], [8.4, 310.0], [8.5, 310.0], [8.6, 355.0], [8.7, 356.0], [8.8, 356.0], [8.9, 383.0], [9.0, 411.0], [9.1, 411.0], [9.2, 416.0], [9.3, 427.0], [9.4, 504.0], [9.5, 504.0], [9.6, 512.0], [9.7, 596.0], [9.8, 596.0], [9.9, 617.0], [10.0, 647.0], [10.1, 647.0], [10.2, 676.0], [10.3, 697.0], [10.4, 697.0], [10.5, 697.0], [10.6, 756.0], [10.7, 839.0], [10.8, 839.0], [10.9, 844.0], [11.0, 888.0], [11.1, 888.0], [11.2, 894.0], [11.3, 900.0], [11.4, 900.0], [11.5, 920.0], [11.6, 975.0], [11.7, 975.0], [11.8, 1002.0], [11.9, 1089.0], [12.0, 1109.0], [12.1, 1109.0], [12.2, 1143.0], [12.3, 1147.0], [12.4, 1147.0], [12.5, 1176.0], [12.6, 1300.0], [12.7, 1300.0], [12.8, 1446.0], [12.9, 1488.0], [13.0, 1488.0], [13.1, 1490.0], [13.2, 1500.0], [13.3, 1509.0], [13.4, 1509.0], [13.5, 1540.0], [13.6, 1551.0], [13.7, 1551.0], [13.8, 1556.0], [13.9, 1565.0], [14.0, 1565.0], [14.1, 1566.0], [14.2, 1570.0], [14.3, 1570.0], [14.4, 1583.0], [14.5, 1596.0], [14.6, 1702.0], [14.7, 1702.0], [14.8, 1775.0], [14.9, 1841.0], [15.0, 1841.0], [15.1, 1871.0], [15.2, 1898.0], [15.3, 1898.0], [15.4, 1914.0], [15.5, 1925.0], [15.6, 1925.0], [15.7, 1933.0], [15.8, 1938.0], [15.9, 1952.0], [16.0, 1952.0], [16.1, 1957.0], [16.2, 1974.0], [16.3, 1974.0], [16.4, 2050.0], [16.5, 2056.0], [16.6, 2056.0], [16.7, 2107.0], [16.8, 2200.0], [16.9, 2200.0], [17.0, 2220.0], [17.1, 2274.0], [17.2, 2303.0], [17.3, 2303.0], [17.4, 2304.0], [17.5, 2316.0], [17.6, 2316.0], [17.7, 2340.0], [17.8, 2421.0], [17.9, 2421.0], [18.0, 2428.0], [18.1, 2445.0], [18.2, 2445.0], [18.3, 2489.0], [18.4, 2493.0], [18.5, 2496.0], [18.6, 2496.0], [18.7, 2503.0], [18.8, 2515.0], [18.9, 2515.0], [19.0, 2539.0], [19.1, 2545.0], [19.2, 2545.0], [19.3, 2551.0], [19.4, 2567.0], [19.5, 2567.0], [19.6, 2771.0], [19.7, 2841.0], [19.8, 2847.0], [19.9, 2847.0], [20.0, 2915.0], [20.1, 2927.0], [20.2, 2927.0], [20.3, 2950.0], [20.4, 2990.0], [20.5, 2990.0], [20.6, 3006.0], [20.7, 3058.0], [20.8, 3058.0], [20.9, 3096.0], [21.0, 3103.0], [21.1, 3153.0], [21.2, 3153.0], [21.3, 3203.0], [21.4, 3203.0], [21.5, 3203.0], [21.6, 3275.0], [21.7, 3454.0], [21.8, 3454.0], [21.9, 3552.0], [22.0, 3573.0], [22.1, 3573.0], [22.2, 3611.0], [22.3, 3839.0], [22.4, 3897.0], [22.5, 3897.0], [22.6, 4149.0], [22.7, 4196.0], [22.8, 4196.0], [22.9, 4258.0], [23.0, 4371.0], [23.1, 4371.0], [23.2, 4448.0], [23.3, 4454.0], [23.4, 4454.0], [23.5, 4482.0], [23.6, 4533.0], [23.7, 4535.0], [23.8, 4535.0], [23.9, 4545.0], [24.0, 4616.0], [24.1, 4616.0], [24.2, 4648.0], [24.3, 4662.0], [24.4, 4662.0], [24.5, 4809.0], [24.6, 4824.0], [24.7, 4824.0], [24.8, 4904.0], [24.9, 4906.0], [25.0, 4906.0], [25.1, 4906.0], [25.2, 4925.0], [25.3, 5118.0], [25.4, 5118.0], [25.5, 5221.0], [25.6, 5264.0], [25.7, 5264.0], [25.8, 5436.0], [25.9, 5551.0], [26.0, 5551.0], [26.1, 5612.0], [26.2, 5615.0], [26.3, 5615.0], [26.4, 5636.0], [26.5, 5685.0], [26.6, 5692.0], [26.7, 5692.0], [26.8, 5859.0], [26.9, 5975.0], [27.0, 5975.0], [27.1, 6069.0], [27.2, 6270.0], [27.3, 6270.0], [27.4, 6327.0], [27.5, 6404.0], [27.6, 6404.0], [27.7, 6424.0], [27.8, 6447.0], [27.9, 6448.0], [28.0, 6448.0], [28.1, 6534.0], [28.2, 6640.0], [28.3, 6640.0], [28.4, 6748.0], [28.5, 6864.0], [28.6, 6864.0], [28.7, 7007.0], [28.8, 7142.0], [28.9, 7142.0], [29.0, 7144.0], [29.1, 7185.0], [29.2, 7221.0], [29.3, 7221.0], [29.4, 7226.0], [29.5, 7234.0], [29.6, 7234.0], [29.7, 7296.0], [29.8, 7302.0], [29.9, 7302.0], [30.0, 7362.0], [30.1, 7367.0], [30.2, 7367.0], [30.3, 7487.0], [30.4, 7508.0], [30.5, 7689.0], [30.6, 7689.0], [30.7, 7767.0], [30.8, 7813.0], [30.9, 7813.0], [31.0, 7815.0], [31.1, 7934.0], [31.2, 7934.0], [31.3, 7997.0], [31.4, 8030.0], [31.5, 8030.0], [31.6, 8034.0], [31.7, 8035.0], [31.8, 8116.0], [31.9, 8116.0], [32.0, 8121.0], [32.1, 8287.0], [32.2, 8287.0], [32.3, 8440.0], [32.4, 8464.0], [32.5, 8464.0], [32.6, 8478.0], [32.7, 8506.0], [32.8, 8506.0], [32.9, 8548.0], [33.0, 8620.0], [33.1, 8673.0], [33.2, 8673.0], [33.3, 8812.0], [33.4, 8835.0], [33.5, 8835.0], [33.6, 8858.0], [33.7, 8861.0], [33.8, 8861.0], [33.9, 8866.0], [34.0, 8875.0], [34.1, 8875.0], [34.2, 9024.0], [34.3, 9087.0], [34.4, 9136.0], [34.5, 9136.0], [34.6, 9203.0], [34.7, 9237.0], [34.8, 9237.0], [34.9, 9294.0], [35.0, 9390.0], [35.1, 9390.0], [35.2, 9673.0], [35.3, 9749.0], [35.4, 9749.0], [35.5, 9826.0], [35.6, 9828.0], [35.7, 9829.0], [35.8, 9829.0], [35.9, 9871.0], [36.0, 9892.0], [36.1, 9892.0], [36.2, 9916.0], [36.3, 10033.0], [36.4, 10033.0], [36.5, 10034.0], [36.6, 10043.0], [36.7, 10043.0], [36.8, 10052.0], [36.9, 10079.0], [37.0, 10135.0], [37.1, 10135.0], [37.2, 10163.0], [37.3, 10179.0], [37.4, 10179.0], [37.5, 10196.0], [37.6, 10200.0], [37.7, 10200.0], [37.8, 10201.0], [37.9, 10202.0], [38.0, 10202.0], [38.1, 10202.0], [38.2, 10224.0], [38.3, 10228.0], [38.4, 10228.0], [38.5, 10247.0], [38.6, 10269.0], [38.7, 10269.0], [38.8, 10270.0], [38.9, 10283.0], [39.0, 10283.0], [39.1, 10341.0], [39.2, 10372.0], [39.3, 10372.0], [39.4, 10376.0], [39.5, 10378.0], [39.6, 10386.0], [39.7, 10386.0], [39.8, 10398.0], [39.9, 10505.0], [40.0, 10505.0], [40.1, 10553.0], [40.2, 10557.0], [40.3, 10557.0], [40.4, 10564.0], [40.5, 10565.0], [40.6, 10565.0], [40.7, 10575.0], [40.8, 10614.0], [40.9, 10614.0], [41.0, 10614.0], [41.1, 10622.0], [41.2, 10667.0], [41.3, 10667.0], [41.4, 10684.0], [41.5, 10720.0], [41.6, 10720.0], [41.7, 10734.0], [41.8, 10747.0], [41.9, 10747.0], [42.0, 10747.0], [42.1, 10753.0], [42.2, 10770.0], [42.3, 10770.0], [42.4, 10886.0], [42.5, 10892.0], [42.6, 10892.0], [42.7, 10928.0], [42.8, 10932.0], [42.9, 10932.0], [43.0, 10934.0], [43.1, 10935.0], [43.2, 10935.0], [43.3, 10937.0], [43.4, 10970.0], [43.5, 10989.0], [43.6, 10989.0], [43.7, 11004.0], [43.8, 11101.0], [43.9, 11101.0], [44.0, 11135.0], [44.1, 11138.0], [44.2, 11138.0], [44.3, 11216.0], [44.4, 11227.0], [44.5, 11227.0], [44.6, 11319.0], [44.7, 11322.0], [44.8, 11322.0], [44.9, 11322.0], [45.0, 11341.0], [45.1, 11368.0], [45.2, 11368.0], [45.3, 11559.0], [45.4, 11603.0], [45.5, 11603.0], [45.6, 11624.0], [45.7, 11670.0], [45.8, 11670.0], [45.9, 11672.0], [46.0, 11672.0], [46.1, 11680.0], [46.2, 11680.0], [46.3, 11681.0], [46.4, 11782.0], [46.5, 11782.0], [46.6, 11793.0], [46.7, 11799.0], [46.8, 11799.0], [46.9, 11862.0], [47.0, 11866.0], [47.1, 11866.0], [47.2, 11900.0], [47.3, 11908.0], [47.4, 11911.0], [47.5, 11911.0], [47.6, 11923.0], [47.7, 11926.0], [47.8, 11926.0], [47.9, 11940.0], [48.0, 11965.0], [48.1, 11965.0], [48.2, 11972.0], [48.3, 11975.0], [48.4, 11975.0], [48.5, 11992.0], [48.6, 11999.0], [48.7, 12007.0], [48.8, 12007.0], [48.9, 12035.0], [49.0, 12039.0], [49.1, 12039.0], [49.2, 12042.0], [49.3, 12083.0], [49.4, 12083.0], [49.5, 12086.0], [49.6, 12114.0], [49.7, 12114.0], [49.8, 12139.0], [49.9, 12147.0], [50.0, 12147.0], [50.1, 12157.0], [50.2, 12159.0], [50.3, 12162.0], [50.4, 12162.0], [50.5, 12164.0], [50.6, 12168.0], [50.7, 12168.0], [50.8, 12184.0], [50.9, 12184.0], [51.0, 12184.0], [51.1, 12196.0], [51.2, 12203.0], [51.3, 12203.0], [51.4, 12218.0], [51.5, 12223.0], [51.6, 12250.0], [51.7, 12250.0], [51.8, 12250.0], [51.9, 12254.0], [52.0, 12254.0], [52.1, 12265.0], [52.2, 12265.0], [52.3, 12265.0], [52.4, 12275.0], [52.5, 12290.0], [52.6, 12290.0], [52.7, 12291.0], [52.8, 12293.0], [52.9, 12335.0], [53.0, 12335.0], [53.1, 12355.0], [53.2, 12360.0], [53.3, 12360.0], [53.4, 12360.0], [53.5, 12361.0], [53.6, 12361.0], [53.7, 12362.0], [53.8, 12372.0], [53.9, 12372.0], [54.0, 12389.0], [54.1, 12417.0], [54.2, 12442.0], [54.3, 12442.0], [54.4, 12446.0], [54.5, 12481.0], [54.6, 12481.0], [54.7, 12504.0], [54.8, 12512.0], [54.9, 12512.0], [55.0, 12542.0], [55.1, 12567.0], [55.2, 12567.0], [55.3, 12574.0], [55.4, 12580.0], [55.5, 12588.0], [55.6, 12588.0], [55.7, 12594.0], [55.8, 12601.0], [55.9, 12601.0], [56.0, 12619.0], [56.1, 12624.0], [56.2, 12624.0], [56.3, 12626.0], [56.4, 12628.0], [56.5, 12628.0], [56.6, 12638.0], [56.7, 12644.0], [56.8, 12650.0], [56.9, 12650.0], [57.0, 12650.0], [57.1, 12656.0], [57.2, 12656.0], [57.3, 12660.0], [57.4, 12677.0], [57.5, 12677.0], [57.6, 12683.0], [57.7, 12699.0], [57.8, 12699.0], [57.9, 12713.0], [58.0, 12724.0], [58.1, 12732.0], [58.2, 12732.0], [58.3, 12787.0], [58.4, 12808.0], [58.5, 12808.0], [58.6, 12826.0], [58.7, 12848.0], [58.8, 12848.0], [58.9, 12881.0], [59.0, 12905.0], [59.1, 12905.0], [59.2, 12913.0], [59.3, 12926.0], [59.4, 12928.0], [59.5, 12928.0], [59.6, 12930.0], [59.7, 12944.0], [59.8, 12944.0], [59.9, 12948.0], [60.0, 12959.0], [60.1, 12959.0], [60.2, 12969.0], [60.3, 12976.0], [60.4, 12976.0], [60.5, 12986.0], [60.6, 13000.0], [60.7, 13004.0], [60.8, 13004.0], [60.9, 13009.0], [61.0, 13009.0], [61.1, 13009.0], [61.2, 13016.0], [61.3, 13018.0], [61.4, 13018.0], [61.5, 13021.0], [61.6, 13037.0], [61.7, 13037.0], [61.8, 13057.0], [61.9, 13069.0], [62.0, 13076.0], [62.1, 13076.0], [62.2, 13084.0], [62.3, 13085.0], [62.4, 13085.0], [62.5, 13120.0], [62.6, 13156.0], [62.7, 13156.0], [62.8, 13156.0], [62.9, 13179.0], [63.0, 13179.0], [63.1, 13191.0], [63.2, 13193.0], [63.3, 13194.0], [63.4, 13194.0], [63.5, 13195.0], [63.6, 13203.0], [63.7, 13203.0], [63.8, 13207.0], [63.9, 13228.0], [64.0, 13228.0], [64.1, 13237.0], [64.2, 13250.0], [64.3, 13250.0], [64.4, 13253.0], [64.5, 13259.0], [64.6, 13269.0], [64.7, 13269.0], [64.8, 13283.0], [64.9, 13298.0], [65.0, 13298.0], [65.1, 13301.0], [65.2, 13305.0], [65.3, 13305.0], [65.4, 13309.0], [65.5, 13312.0], [65.6, 13312.0], [65.7, 13313.0], [65.8, 13316.0], [65.9, 13335.0], [66.0, 13335.0], [66.1, 13352.0], [66.2, 13364.0], [66.3, 13364.0], [66.4, 13372.0], [66.5, 13380.0], [66.6, 13380.0], [66.7, 13383.0], [66.8, 13483.0], [66.9, 13483.0], [67.0, 13497.0], [67.1, 13499.0], [67.2, 13511.0], [67.3, 13511.0], [67.4, 13520.0], [67.5, 13521.0], [67.6, 13521.0], [67.7, 13536.0], [67.8, 13538.0], [67.9, 13538.0], [68.0, 13540.0], [68.1, 13541.0], [68.2, 13541.0], [68.3, 13542.0], [68.4, 13553.0], [68.5, 13567.0], [68.6, 13567.0], [68.7, 13571.0], [68.8, 13574.0], [68.9, 13574.0], [69.0, 13578.0], [69.1, 13578.0], [69.2, 13578.0], [69.3, 13581.0], [69.4, 13583.0], [69.5, 13583.0], [69.6, 13586.0], [69.7, 13589.0], [69.8, 13591.0], [69.9, 13591.0], [70.0, 13603.0], [70.1, 13609.0], [70.2, 13609.0], [70.3, 13611.0], [70.4, 13613.0], [70.5, 13613.0], [70.6, 13620.0], [70.7, 13621.0], [70.8, 13621.0], [70.9, 13621.0], [71.0, 13624.0], [71.1, 13626.0], [71.2, 13626.0], [71.3, 13628.0], [71.4, 13647.0], [71.5, 13647.0], [71.6, 13647.0], [71.7, 13650.0], [71.8, 13650.0], [71.9, 13666.0], [72.0, 13695.0], [72.1, 13695.0], [72.2, 13696.0], [72.3, 13700.0], [72.4, 13703.0], [72.5, 13703.0], [72.6, 13710.0], [72.7, 13714.0], [72.8, 13714.0], [72.9, 13715.0], [73.0, 13715.0], [73.1, 13715.0], [73.2, 13716.0], [73.3, 13736.0], [73.4, 13736.0], [73.5, 13737.0], [73.6, 13771.0], [73.7, 13774.0], [73.8, 13774.0], [73.9, 13780.0], [74.0, 13783.0], [74.1, 13783.0], [74.2, 13798.0], [74.3, 13804.0], [74.4, 13804.0], [74.5, 13804.0], [74.6, 13841.0], [74.7, 13841.0], [74.8, 13843.0], [74.9, 13861.0], [75.0, 13870.0], [75.1, 13870.0], [75.2, 13872.0], [75.3, 13887.0], [75.4, 13887.0], [75.5, 13888.0], [75.6, 13888.0], [75.7, 13888.0], [75.8, 13897.0], [75.9, 13898.0], [76.0, 13898.0], [76.1, 13917.0], [76.2, 13926.0], [76.3, 13926.0], [76.4, 13934.0], [76.5, 13934.0], [76.6, 13935.0], [76.7, 13935.0], [76.8, 13942.0], [76.9, 13955.0], [77.0, 13955.0], [77.1, 13961.0], [77.2, 13979.0], [77.3, 13979.0], [77.4, 14008.0], [77.5, 14020.0], [77.6, 14020.0], [77.7, 14025.0], [77.8, 14073.0], [77.9, 14077.0], [78.0, 14077.0], [78.1, 14085.0], [78.2, 14086.0], [78.3, 14086.0], [78.4, 14087.0], [78.5, 14098.0], [78.6, 14098.0], [78.7, 14113.0], [78.8, 14115.0], [78.9, 14115.0], [79.0, 14128.0], [79.1, 14136.0], [79.2, 14139.0], [79.3, 14139.0], [79.4, 14148.0], [79.5, 14151.0], [79.6, 14151.0], [79.7, 14152.0], [79.8, 14162.0], [79.9, 14162.0], [80.0, 14163.0], [80.1, 14198.0], [80.2, 14198.0], [80.3, 14210.0], [80.4, 14217.0], [80.5, 14225.0], [80.6, 14225.0], [80.7, 14226.0], [80.8, 14251.0], [80.9, 14251.0], [81.0, 14252.0], [81.1, 14259.0], [81.2, 14259.0], [81.3, 14262.0], [81.4, 14263.0], [81.5, 14263.0], [81.6, 14264.0], [81.7, 14271.0], [81.8, 14272.0], [81.9, 14272.0], [82.0, 14274.0], [82.1, 14280.0], [82.2, 14280.0], [82.3, 14286.0], [82.4, 14306.0], [82.5, 14306.0], [82.6, 14309.0], [82.7, 14319.0], [82.8, 14319.0], [82.9, 14322.0], [83.0, 14327.0], [83.1, 14343.0], [83.2, 14343.0], [83.3, 14350.0], [83.4, 14361.0], [83.5, 14361.0], [83.6, 14365.0], [83.7, 14380.0], [83.8, 14380.0], [83.9, 14383.0], [84.0, 14385.0], [84.1, 14385.0], [84.2, 14399.0], [84.3, 14435.0], [84.4, 14436.0], [84.5, 14436.0], [84.6, 14444.0], [84.7, 14451.0], [84.8, 14451.0], [84.9, 14487.0], [85.0, 14492.0], [85.1, 14492.0], [85.2, 14493.0], [85.3, 14510.0], [85.4, 14510.0], [85.5, 14544.0], [85.6, 14553.0], [85.7, 14556.0], [85.8, 14556.0], [85.9, 14594.0], [86.0, 14594.0], [86.1, 14594.0], [86.2, 14603.0], [86.3, 14625.0], [86.4, 14625.0], [86.5, 14641.0], [86.6, 14642.0], [86.7, 14642.0], [86.8, 14644.0], [86.9, 14666.0], [87.0, 14683.0], [87.1, 14683.0], [87.2, 14683.0], [87.3, 14686.0], [87.4, 14686.0], [87.5, 14688.0], [87.6, 14690.0], [87.7, 14690.0], [87.8, 14696.0], [87.9, 14700.0], [88.0, 14700.0], [88.1, 14707.0], [88.2, 14710.0], [88.3, 14711.0], [88.4, 14711.0], [88.5, 14726.0], [88.6, 14765.0], [88.7, 14765.0], [88.8, 14774.0], [88.9, 14800.0], [89.0, 14800.0], [89.1, 14807.0], [89.2, 14815.0], [89.3, 14815.0], [89.4, 14818.0], [89.5, 14819.0], [89.6, 14854.0], [89.7, 14854.0], [89.8, 14861.0], [89.9, 14861.0], [90.0, 14861.0], [90.1, 14880.0], [90.2, 14884.0], [90.3, 14884.0], [90.4, 14890.0], [90.5, 14899.0], [90.6, 14899.0], [90.7, 14927.0], [90.8, 14931.0], [90.9, 14939.0], [91.0, 14939.0], [91.1, 14965.0], [91.2, 14977.0], [91.3, 14977.0], [91.4, 14985.0], [91.5, 14991.0], [91.6, 14991.0], [91.7, 14994.0], [91.8, 14997.0], [91.9, 14997.0], [92.0, 15052.0], [92.1, 15056.0], [92.2, 15096.0], [92.3, 15096.0], [92.4, 15104.0], [92.5, 15104.0], [92.6, 15104.0], [92.7, 15146.0], [92.8, 15158.0], [92.9, 15158.0], [93.0, 15171.0], [93.1, 15180.0], [93.2, 15180.0], [93.3, 15181.0], [93.4, 15182.0], [93.5, 15191.0], [93.6, 15191.0], [93.7, 15242.0], [93.8, 15256.0], [93.9, 15256.0], [94.0, 15278.0], [94.1, 15290.0], [94.2, 15290.0], [94.3, 15312.0], [94.4, 15339.0], [94.5, 15339.0], [94.6, 15349.0], [94.7, 15353.0], [94.8, 15374.0], [94.9, 15374.0], [95.0, 15390.0], [95.1, 15403.0], [95.2, 15403.0], [95.3, 15423.0], [95.4, 15454.0], [95.5, 15454.0], [95.6, 15491.0], [95.7, 15493.0], [95.8, 15493.0], [95.9, 15498.0], [96.0, 15505.0], [96.1, 15515.0], [96.2, 15515.0], [96.3, 15559.0], [96.4, 15567.0], [96.5, 15567.0], [96.6, 15619.0], [96.7, 15626.0], [96.8, 15626.0], [96.9, 15629.0], [97.0, 15656.0], [97.1, 15656.0], [97.2, 15658.0], [97.3, 15753.0], [97.4, 15793.0], [97.5, 15793.0], [97.6, 15796.0], [97.7, 15800.0], [97.8, 15800.0], [97.9, 15841.0], [98.0, 15854.0], [98.1, 15854.0], [98.2, 15864.0], [98.3, 15885.0], [98.4, 15885.0], [98.5, 16021.0], [98.6, 16121.0], [98.7, 16135.0], [98.8, 16135.0], [98.9, 16180.0], [99.0, 16204.0], [99.1, 16204.0], [99.2, 16216.0], [99.3, 16236.0], [99.4, 16236.0], [99.5, 16316.0], [99.6, 16652.0], [99.7, 16652.0], [99.8, 16719.0], [99.9, 16757.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 53.0, "series": [{"data": [[300.0, 1.0], [400.0, 19.0], [500.0, 5.0], [600.0, 1.0], [700.0, 5.0], [1000.0, 1.0], [1100.0, 3.0], [1200.0, 1.0], [1300.0, 6.0], [1400.0, 4.0], [1500.0, 1.0], [1600.0, 4.0], [1700.0, 3.0], [1800.0, 3.0], [1900.0, 2.0], [2000.0, 2.0], [2100.0, 1.0], [2300.0, 1.0], [2200.0, 3.0], [2400.0, 2.0], [2500.0, 3.0], [2600.0, 2.0], [2700.0, 3.0], [2800.0, 1.0], [2900.0, 3.0], [3100.0, 2.0], [3200.0, 5.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3700.0, 7.0], [3600.0, 3.0], [3800.0, 3.0], [4000.0, 2.0], [4100.0, 3.0], [4300.0, 1.0], [4200.0, 1.0], [4500.0, 1.0], [4400.0, 1.0], [4600.0, 1.0], [4700.0, 2.0], [4800.0, 2.0], [5000.0, 1.0], [5100.0, 1.0], [4900.0, 1.0], [5200.0, 3.0], [5300.0, 1.0], [5600.0, 1.0], [5500.0, 5.0], [5400.0, 1.0], [5700.0, 2.0], [5800.0, 1.0], [5900.0, 2.0], [6200.0, 1.0], [6400.0, 1.0], [6600.0, 1.0], [6500.0, 1.0], [6800.0, 1.0], [6900.0, 1.0], [6700.0, 3.0], [7100.0, 2.0], [7300.0, 1.0], [7400.0, 4.0], [7600.0, 1.0], [7800.0, 1.0], [8100.0, 1.0], [8000.0, 2.0], [8200.0, 1.0], [8500.0, 2.0], [8600.0, 1.0], [8800.0, 3.0], [9100.0, 1.0], [9000.0, 2.0], [9200.0, 1.0], [9400.0, 2.0], [9600.0, 1.0], [10200.0, 1.0], [10100.0, 3.0], [9900.0, 1.0], [10000.0, 1.0], [10500.0, 2.0], [10700.0, 1.0], [10300.0, 1.0], [10600.0, 1.0], [10900.0, 1.0], [11200.0, 2.0], [10800.0, 1.0], [11600.0, 2.0], [11300.0, 1.0], [11400.0, 1.0], [11500.0, 1.0], [11700.0, 1.0], [12000.0, 1.0], [11900.0, 3.0], [12200.0, 4.0], [11800.0, 3.0], [12600.0, 2.0], [12400.0, 1.0], [12500.0, 4.0], [12700.0, 2.0], [13000.0, 3.0], [12900.0, 4.0], [13200.0, 4.0], [13100.0, 2.0], [13300.0, 1.0], [13500.0, 2.0], [13600.0, 5.0], [13400.0, 1.0], [13700.0, 1.0], [14000.0, 2.0], [14100.0, 2.0], [13900.0, 1.0], [14200.0, 1.0], [14300.0, 1.0], [14800.0, 3.0], [14500.0, 2.0], [14400.0, 2.0], [14700.0, 2.0], [14600.0, 1.0], [14900.0, 5.0], [15000.0, 4.0], [15200.0, 1.0], [15100.0, 4.0], [15300.0, 2.0], [15400.0, 5.0], [15800.0, 4.0], [15500.0, 4.0], [15600.0, 7.0], [15700.0, 3.0], [15900.0, 7.0], [16300.0, 3.0], [16000.0, 7.0], [16200.0, 4.0], [16100.0, 3.0], [17000.0, 7.0], [16400.0, 8.0], [17400.0, 5.0], [16800.0, 10.0], [17200.0, 4.0], [16600.0, 7.0], [17800.0, 4.0], [18200.0, 8.0], [17600.0, 5.0], [18400.0, 6.0], [18000.0, 4.0], [19200.0, 7.0], [19000.0, 8.0], [19400.0, 11.0], [18600.0, 3.0], [18800.0, 4.0], [20400.0, 5.0], [19800.0, 10.0], [19600.0, 7.0], [20200.0, 2.0], [20000.0, 4.0], [21000.0, 3.0], [21200.0, 2.0], [20800.0, 3.0], [20600.0, 4.0], [21400.0, 3.0], [22000.0, 6.0], [21600.0, 6.0], [21800.0, 1.0], [22400.0, 1.0], [22200.0, 1.0], [23200.0, 2.0], [22600.0, 2.0], [22800.0, 3.0], [23000.0, 2.0], [24200.0, 2.0], [24400.0, 2.0], [25400.0, 1.0], [24600.0, 1.0], [17300.0, 2.0], [16900.0, 8.0], [16500.0, 4.0], [16700.0, 4.0], [17100.0, 2.0], [17700.0, 6.0], [17500.0, 8.0], [18100.0, 6.0], [17900.0, 2.0], [18300.0, 8.0], [18900.0, 7.0], [19300.0, 7.0], [18500.0, 8.0], [19100.0, 12.0], [18700.0, 4.0], [19500.0, 7.0], [19700.0, 5.0], [20100.0, 6.0], [20300.0, 5.0], [19900.0, 3.0], [21500.0, 3.0], [21100.0, 2.0], [21300.0, 7.0], [20900.0, 2.0], [20700.0, 3.0], [22100.0, 5.0], [22500.0, 1.0], [21900.0, 4.0], [22300.0, 3.0], [21700.0, 4.0], [23100.0, 3.0], [22700.0, 2.0], [23500.0, 2.0], [23300.0, 3.0], [24500.0, 1.0], [24100.0, 1.0], [24300.0, 1.0], [25300.0, 1.0], [24900.0, 1.0], [27500.0, 1.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[0.0, 53.0], [100.0, 2.0], [200.0, 2.0], [300.0, 5.0], [400.0, 3.0], [500.0, 3.0], [600.0, 5.0], [700.0, 1.0], [800.0, 4.0], [900.0, 3.0], [1000.0, 2.0], [1100.0, 4.0], [1300.0, 1.0], [1400.0, 3.0], [1500.0, 10.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 7.0], [2000.0, 2.0], [2100.0, 1.0], [2300.0, 4.0], [2200.0, 3.0], [2400.0, 6.0], [2500.0, 6.0], [2800.0, 2.0], [2700.0, 1.0], [2900.0, 4.0], [3000.0, 3.0], [3100.0, 2.0], [3200.0, 3.0], [3400.0, 1.0], [3500.0, 2.0], [3600.0, 1.0], [3800.0, 2.0], [4100.0, 2.0], [4300.0, 1.0], [4200.0, 1.0], [4400.0, 3.0], [4600.0, 3.0], [4500.0, 3.0], [4800.0, 2.0], [5100.0, 1.0], [4900.0, 4.0], [5200.0, 2.0], [5500.0, 1.0], [5600.0, 5.0], [5400.0, 1.0], [5800.0, 1.0], [6000.0, 1.0], [5900.0, 1.0], [6300.0, 1.0], [6200.0, 1.0], [6400.0, 4.0], [6500.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [6800.0, 1.0], [7100.0, 3.0], [7000.0, 1.0], [7300.0, 3.0], [7400.0, 1.0], [7200.0, 4.0], [7600.0, 1.0], [7500.0, 1.0], [7800.0, 2.0], [7900.0, 2.0], [7700.0, 1.0], [8100.0, 2.0], [8000.0, 3.0], [8500.0, 2.0], [8400.0, 3.0], [8200.0, 1.0], [8600.0, 2.0], [8800.0, 6.0], [9100.0, 1.0], [9200.0, 3.0], [9000.0, 2.0], [9600.0, 1.0], [9300.0, 1.0], [9700.0, 1.0], [10100.0, 4.0], [10200.0, 10.0], [10000.0, 5.0], [9900.0, 1.0], [9800.0, 5.0], [10600.0, 5.0], [10300.0, 6.0], [10500.0, 6.0], [10700.0, 6.0], [10900.0, 7.0], [11200.0, 2.0], [11100.0, 3.0], [10800.0, 2.0], [11000.0, 1.0], [11300.0, 5.0], [11600.0, 7.0], [11700.0, 3.0], [11500.0, 1.0], [11900.0, 11.0], [12100.0, 11.0], [12000.0, 6.0], [11800.0, 2.0], [12200.0, 12.0], [12300.0, 8.0], [12400.0, 4.0], [12500.0, 8.0], [12600.0, 14.0], [12700.0, 4.0], [13200.0, 10.0], [12900.0, 11.0], [13000.0, 13.0], [13100.0, 8.0], [12800.0, 4.0], [13300.0, 12.0], [13600.0, 16.0], [13800.0, 12.0], [13700.0, 14.0], [13500.0, 19.0], [13400.0, 3.0], [14300.0, 13.0], [14200.0, 15.0], [14100.0, 11.0], [14000.0, 9.0], [13900.0, 9.0], [14400.0, 7.0], [14700.0, 7.0], [14800.0, 12.0], [14600.0, 12.0], [14500.0, 6.0], [15100.0, 9.0], [15200.0, 4.0], [15300.0, 6.0], [14900.0, 9.0], [15000.0, 3.0], [15600.0, 5.0], [15400.0, 6.0], [15800.0, 5.0], [15500.0, 4.0], [15700.0, 3.0], [16100.0, 3.0], [16200.0, 3.0], [16000.0, 1.0], [16300.0, 1.0], [16700.0, 2.0], [16600.0, 1.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 52.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1207.0, "series": [{"data": [[0.0, 86.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 52.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1207.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.339449541284399, "minX": 1.69971888E12, "maxY": 60.0, "series": [{"data": [[1.69971912E12, 60.0], [1.69971918E12, 60.0], [1.699719E12, 60.0], [1.69971906E12, 60.0], [1.69971888E12, 13.339449541284399], [1.69971894E12, 44.20627802690582]], "isOverall": false, "label": "OnlineConversion", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69971918E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13.11111111111111, "minX": 1.0, "maxY": 18885.053030303032, "series": [{"data": [[2.0, 463.62500000000006], [3.0, 476.41666666666663], [4.0, 674.4285714285714], [5.0, 1340.857142857143], [6.0, 1471.625], [7.0, 2089.4], [8.0, 2148.6], [9.0, 2165.666666666667], [10.0, 2976.0], [11.0, 2304.333333333333], [12.0, 3456.0], [13.0, 3251.8333333333335], [14.0, 3385.0], [15.0, 2624.1666666666665], [16.0, 3189.6666666666665], [17.0, 4724.25], [18.0, 4813.6], [19.0, 4187.428571428572], [20.0, 4666.333333333333], [21.0, 4974.285714285714], [22.0, 4771.8], [23.0, 4869.0], [24.0, 5442.0], [25.0, 6379.833333333333], [26.0, 6637.0], [27.0, 6587.5], [28.0, 8344.5], [29.0, 8141.0], [30.0, 8719.5], [31.0, 8480.333333333334], [32.0, 9053.0], [33.0, 8248.0], [34.0, 10640.333333333334], [35.0, 10502.8], [36.0, 9619.0], [37.0, 12464.0], [38.0, 11819.75], [39.0, 12291.333333333334], [40.0, 12317.333333333334], [41.0, 12263.0], [42.0, 12358.285714285714], [43.0, 12104.333333333334], [44.0, 12071.666666666666], [45.0, 12459.666666666666], [46.0, 13558.8], [47.0, 15441.25], [48.0, 13498.333333333334], [49.0, 13776.666666666666], [50.0, 13671.0], [51.0, 12505.0], [52.0, 15081.0], [53.0, 15049.666666666666], [54.0, 13183.0], [55.0, 14643.833333333332], [56.0, 13486.25], [57.0, 14812.0], [58.0, 16278.0], [59.0, 16966.0], [60.0, 18885.053030303032], [1.0, 485.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[46.428790199081206, 14171.278713629403]], "isOverall": false, "label": "Cargar Tareas-Aggregated", "isController": false}, {"data": [[2.0, 13.11111111111111], [3.0, 17.923076923076923], [4.0, 21.875], [5.0, 88.625], [6.0, 195.62499999999997], [7.0, 192.14285714285714], [8.0, 782.3333333333334], [9.0, 604.2857142857142], [10.0, 791.0], [11.0, 679.1428571428571], [12.0, 2445.0], [13.0, 1181.75], [14.0, 1374.2727272727273], [15.0, 1560.5], [16.0, 2186.3333333333335], [17.0, 2743.5], [18.0, 2253.6000000000004], [19.0, 2317.0], [20.0, 3075.5], [21.0, 2491.285714285714], [22.0, 2623.666666666667], [23.0, 3926.6], [24.0, 3504.6666666666665], [25.0, 2791.4545454545455], [27.0, 4671.0], [28.0, 5084.0], [29.0, 4556.333333333334], [30.0, 4851.666666666667], [31.0, 5555.4], [32.0, 5853.0], [33.0, 6124.833333333334], [35.0, 7407.5], [36.0, 7303.75], [37.0, 8437.666666666666], [38.0, 7588.666666666667], [39.0, 7237.5], [40.0, 7648.0], [41.0, 8370.5], [42.0, 7983.857142857143], [43.0, 7783.333333333333], [44.0, 8255.75], [46.0, 8835.0], [47.0, 10086.57142857143], [48.0, 10568.5], [49.0, 11216.0], [50.0, 10249.545454545454], [51.0, 8835.0], [52.0, 10168.0], [53.0, 10398.833333333332], [54.0, 10051.333333333334], [55.0, 10715.5], [56.0, 11474.0], [57.0, 10945.0], [58.0, 11056.5], [59.0, 10809.333333333334], [60.0, 13567.406015037594], [1.0, 19.75]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[45.667630057803464, 9724.128612716762]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 60.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1002.0, "minX": 1.69971888E12, "maxY": 4.0797747E7, "series": [{"data": [[1.69971912E12, 1435.85], [1.69971918E12, 1002.0], [1.699719E12, 1478.85], [1.69971906E12, 1552.0], [1.69971888E12, 2265.55], [1.69971894E12, 1552.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69971912E12, 2.7637133E7], [1.69971918E12, 1.8424780816666666E7], [1.699719E12, 2.9216379983333334E7], [1.69971906E12, 2.8953215416666668E7], [1.69971888E12, 4.0797747E7], [1.69971894E12, 2.6847581716666665E7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69971918E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1522.6976744186056, "minX": 1.69971888E12, "maxY": 19350.628571428577, "series": [{"data": [[1.69971912E12, 19350.628571428577], [1.69971918E12, 18544.59999999999], [1.699719E12, 18324.2072072072], [1.69971906E12, 19223.236363636363], [1.69971888E12, 3237.8967741935485], [1.69971894E12, 12485.196078431372]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.69971912E12, 13917.884615384615], [1.69971918E12, 13304.506666666664], [1.699719E12, 13120.628571428573], [1.69971906E12, 13829.834782608694], [1.69971888E12, 1522.6976744186056], [1.69971894E12, 8709.074380165286]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69971918E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1522.6220930232555, "minX": 1.69971888E12, "maxY": 19350.619047619057, "series": [{"data": [[1.69971912E12, 19350.619047619057], [1.69971918E12, 18544.59999999999], [1.699719E12, 18324.180180180167], [1.69971906E12, 19223.21818181818], [1.69971888E12, 3237.8064516129034], [1.69971894E12, 12485.098039215682]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.69971912E12, 13917.83653846154], [1.69971918E12, 13304.48], [1.699719E12, 13120.609523809522], [1.69971906E12, 13829.817391304345], [1.69971888E12, 1522.6220930232555], [1.69971894E12, 8709.04958677686]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69971918E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69971888E12, "maxY": 1.9256198347107443, "series": [{"data": [[1.69971912E12, 1.0571428571428574], [1.69971918E12, 0.757142857142857], [1.699719E12, 0.8648648648648647], [1.69971906E12, 1.2181818181818185], [1.69971888E12, 0.0], [1.69971894E12, 0.88235294117647]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.69971912E12, 1.1153846153846148], [1.69971918E12, 1.6799999999999997], [1.699719E12, 1.8571428571428574], [1.69971906E12, 1.4086956521739127], [1.69971888E12, 1.5232558139534882], [1.69971894E12, 1.9256198347107443]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69971918E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.69971888E12, "maxY": 27569.0, "series": [{"data": [[1.69971912E12, 27569.0], [1.69971918E12, 23230.0], [1.699719E12, 25362.0], [1.69971906E12, 25443.0], [1.69971888E12, 10255.0], [1.69971894E12, 19278.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69971912E12, 21519.0], [1.69971918E12, 20118.6], [1.699719E12, 21345.9], [1.69971906E12, 21095.2], [1.69971888E12, 5362.999999999999], [1.69971894E12, 14362.399999999998]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69971912E12, 24606.100000000002], [1.69971918E12, 23164.219999999998], [1.699719E12, 24527.969999999998], [1.69971906E12, 24770.000000000007], [1.69971888E12, 8656.999999999984], [1.69971894E12, 18724.95999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69971912E12, 22541.5], [1.69971918E12, 21483.699999999997], [1.699719E12, 22239.14999999999], [1.69971906E12, 22168.199999999997], [1.69971888E12, 6701.0], [1.69971894E12, 15923.599999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69971912E12, 10269.0], [1.69971918E12, 10553.0], [1.699719E12, 9203.0], [1.69971906E12, 10386.0], [1.69971888E12, 9.0], [1.69971894E12, 4533.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69971912E12, 15885.0], [1.69971918E12, 15182.0], [1.699719E12, 15100.5], [1.69971906E12, 15658.0], [1.69971888E12, 1907.0], [1.69971894E12, 10247.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69971918E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 29.5, "minX": 1.0, "maxY": 16142.0, "series": [{"data": [[8.0, 12650.0], [2.0, 16142.0], [9.0, 12335.0], [10.0, 3868.0], [11.0, 14293.0], [3.0, 13617.0], [12.0, 14140.0], [13.0, 7818.0], [14.0, 29.5], [1.0, 15498.0], [4.0, 13801.0], [5.0, 13680.0], [6.0, 13236.5], [7.0, 13696.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 14.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 29.5, "minX": 1.0, "maxY": 16142.0, "series": [{"data": [[8.0, 12650.0], [2.0, 16142.0], [9.0, 12335.0], [10.0, 3868.0], [11.0, 14293.0], [3.0, 13617.0], [12.0, 14140.0], [13.0, 7818.0], [14.0, 29.5], [1.0, 15498.0], [4.0, 13801.0], [5.0, 13680.0], [6.0, 13236.5], [7.0, 13696.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 14.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.4166666666666667, "minX": 1.69971888E12, "maxY": 5.933333333333334, "series": [{"data": [[1.69971912E12, 3.4833333333333334], [1.69971918E12, 1.4166666666666667], [1.699719E12, 3.6166666666666667], [1.69971906E12, 3.75], [1.69971888E12, 5.933333333333334], [1.69971894E12, 4.216666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69971918E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.4166666666666665, "minX": 1.69971888E12, "maxY": 5.45, "series": [{"data": [[1.69971912E12, 3.4833333333333334], [1.69971918E12, 2.4166666666666665], [1.699719E12, 3.6], [1.69971906E12, 3.75], [1.69971888E12, 5.45], [1.69971894E12, 3.716666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69971918E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1666666666666667, "minX": 1.69971888E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.69971912E12, 1.75], [1.69971918E12, 1.1666666666666667], [1.699719E12, 1.85], [1.69971906E12, 1.8333333333333333], [1.69971888E12, 2.5833333333333335], [1.69971894E12, 1.7]], "isOverall": false, "label": "Cargar Tareas-success", "isController": false}, {"data": [[1.69971912E12, 1.7333333333333334], [1.69971918E12, 1.25], [1.699719E12, 1.75], [1.69971906E12, 1.9166666666666667], [1.69971888E12, 2.8666666666666667], [1.69971894E12, 2.0166666666666666]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69971918E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.4166666666666665, "minX": 1.69971888E12, "maxY": 5.45, "series": [{"data": [[1.69971912E12, 3.4833333333333334], [1.69971918E12, 2.4166666666666665], [1.699719E12, 3.6], [1.69971906E12, 3.75], [1.69971888E12, 5.45], [1.69971894E12, 3.716666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69971918E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

