/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 47392.0, "series": [{"data": [[0.0, 40.0], [0.1, 64.0], [0.2, 74.0], [0.3, 117.0], [0.4, 153.0], [0.5, 341.0], [0.6, 390.0], [0.7, 397.0], [0.8, 402.0], [0.9, 408.0], [1.0, 411.0], [1.1, 415.0], [1.2, 418.0], [1.3, 420.0], [1.4, 422.0], [1.5, 422.0], [1.6, 425.0], [1.7, 427.0], [1.8, 429.0], [1.9, 430.0], [2.0, 432.0], [2.1, 433.0], [2.2, 434.0], [2.3, 435.0], [2.4, 436.0], [2.5, 438.0], [2.6, 440.0], [2.7, 440.0], [2.8, 442.0], [2.9, 443.0], [3.0, 444.0], [3.1, 444.0], [3.2, 445.0], [3.3, 447.0], [3.4, 447.0], [3.5, 449.0], [3.6, 450.0], [3.7, 451.0], [3.8, 452.0], [3.9, 453.0], [4.0, 454.0], [4.1, 455.0], [4.2, 456.0], [4.3, 458.0], [4.4, 459.0], [4.5, 460.0], [4.6, 461.0], [4.7, 462.0], [4.8, 463.0], [4.9, 464.0], [5.0, 465.0], [5.1, 466.0], [5.2, 466.0], [5.3, 467.0], [5.4, 468.0], [5.5, 469.0], [5.6, 469.0], [5.7, 470.0], [5.8, 470.0], [5.9, 472.0], [6.0, 472.0], [6.1, 473.0], [6.2, 474.0], [6.3, 474.0], [6.4, 476.0], [6.5, 476.0], [6.6, 478.0], [6.7, 478.0], [6.8, 479.0], [6.9, 479.0], [7.0, 480.0], [7.1, 481.0], [7.2, 482.0], [7.3, 483.0], [7.4, 483.0], [7.5, 484.0], [7.6, 485.0], [7.7, 486.0], [7.8, 487.0], [7.9, 488.0], [8.0, 488.0], [8.1, 489.0], [8.2, 490.0], [8.3, 491.0], [8.4, 492.0], [8.5, 492.0], [8.6, 493.0], [8.7, 493.0], [8.8, 494.0], [8.9, 494.0], [9.0, 495.0], [9.1, 496.0], [9.2, 496.0], [9.3, 497.0], [9.4, 497.0], [9.5, 498.0], [9.6, 499.0], [9.7, 500.0], [9.8, 501.0], [9.9, 501.0], [10.0, 502.0], [10.1, 502.0], [10.2, 502.0], [10.3, 503.0], [10.4, 503.0], [10.5, 504.0], [10.6, 504.0], [10.7, 505.0], [10.8, 505.0], [10.9, 505.0], [11.0, 506.0], [11.1, 507.0], [11.2, 507.0], [11.3, 508.0], [11.4, 509.0], [11.5, 510.0], [11.6, 510.0], [11.7, 511.0], [11.8, 511.0], [11.9, 512.0], [12.0, 512.0], [12.1, 513.0], [12.2, 513.0], [12.3, 514.0], [12.4, 514.0], [12.5, 514.0], [12.6, 515.0], [12.7, 516.0], [12.8, 517.0], [12.9, 517.0], [13.0, 518.0], [13.1, 518.0], [13.2, 518.0], [13.3, 519.0], [13.4, 519.0], [13.5, 520.0], [13.6, 521.0], [13.7, 521.0], [13.8, 522.0], [13.9, 523.0], [14.0, 524.0], [14.1, 524.0], [14.2, 524.0], [14.3, 525.0], [14.4, 525.0], [14.5, 526.0], [14.6, 526.0], [14.7, 527.0], [14.8, 527.0], [14.9, 528.0], [15.0, 528.0], [15.1, 528.0], [15.2, 529.0], [15.3, 529.0], [15.4, 530.0], [15.5, 531.0], [15.6, 531.0], [15.7, 532.0], [15.8, 533.0], [15.9, 533.0], [16.0, 534.0], [16.1, 535.0], [16.2, 536.0], [16.3, 536.0], [16.4, 537.0], [16.5, 538.0], [16.6, 538.0], [16.7, 539.0], [16.8, 539.0], [16.9, 540.0], [17.0, 540.0], [17.1, 541.0], [17.2, 542.0], [17.3, 543.0], [17.4, 543.0], [17.5, 543.0], [17.6, 544.0], [17.7, 545.0], [17.8, 546.0], [17.9, 546.0], [18.0, 547.0], [18.1, 548.0], [18.2, 548.0], [18.3, 549.0], [18.4, 549.0], [18.5, 551.0], [18.6, 551.0], [18.7, 552.0], [18.8, 552.0], [18.9, 553.0], [19.0, 554.0], [19.1, 555.0], [19.2, 556.0], [19.3, 557.0], [19.4, 557.0], [19.5, 557.0], [19.6, 558.0], [19.7, 559.0], [19.8, 559.0], [19.9, 560.0], [20.0, 560.0], [20.1, 561.0], [20.2, 561.0], [20.3, 562.0], [20.4, 562.0], [20.5, 563.0], [20.6, 563.0], [20.7, 564.0], [20.8, 565.0], [20.9, 566.0], [21.0, 567.0], [21.1, 568.0], [21.2, 569.0], [21.3, 569.0], [21.4, 570.0], [21.5, 570.0], [21.6, 571.0], [21.7, 571.0], [21.8, 571.0], [21.9, 572.0], [22.0, 572.0], [22.1, 573.0], [22.2, 574.0], [22.3, 574.0], [22.4, 575.0], [22.5, 576.0], [22.6, 576.0], [22.7, 578.0], [22.8, 578.0], [22.9, 579.0], [23.0, 580.0], [23.1, 581.0], [23.2, 581.0], [23.3, 582.0], [23.4, 582.0], [23.5, 584.0], [23.6, 584.0], [23.7, 585.0], [23.8, 585.0], [23.9, 586.0], [24.0, 587.0], [24.1, 588.0], [24.2, 588.0], [24.3, 589.0], [24.4, 590.0], [24.5, 590.0], [24.6, 591.0], [24.7, 592.0], [24.8, 593.0], [24.9, 594.0], [25.0, 595.0], [25.1, 595.0], [25.2, 596.0], [25.3, 597.0], [25.4, 598.0], [25.5, 599.0], [25.6, 600.0], [25.7, 601.0], [25.8, 601.0], [25.9, 602.0], [26.0, 602.0], [26.1, 603.0], [26.2, 604.0], [26.3, 605.0], [26.4, 605.0], [26.5, 606.0], [26.6, 607.0], [26.7, 608.0], [26.8, 611.0], [26.9, 611.0], [27.0, 612.0], [27.1, 613.0], [27.2, 613.0], [27.3, 614.0], [27.4, 615.0], [27.5, 617.0], [27.6, 618.0], [27.7, 619.0], [27.8, 621.0], [27.9, 622.0], [28.0, 623.0], [28.1, 624.0], [28.2, 626.0], [28.3, 626.0], [28.4, 628.0], [28.5, 629.0], [28.6, 630.0], [28.7, 632.0], [28.8, 633.0], [28.9, 634.0], [29.0, 635.0], [29.1, 636.0], [29.2, 637.0], [29.3, 639.0], [29.4, 641.0], [29.5, 642.0], [29.6, 644.0], [29.7, 645.0], [29.8, 647.0], [29.9, 649.0], [30.0, 649.0], [30.1, 650.0], [30.2, 651.0], [30.3, 652.0], [30.4, 653.0], [30.5, 654.0], [30.6, 655.0], [30.7, 656.0], [30.8, 657.0], [30.9, 659.0], [31.0, 661.0], [31.1, 661.0], [31.2, 664.0], [31.3, 665.0], [31.4, 667.0], [31.5, 667.0], [31.6, 669.0], [31.7, 670.0], [31.8, 672.0], [31.9, 672.0], [32.0, 674.0], [32.1, 677.0], [32.2, 680.0], [32.3, 681.0], [32.4, 683.0], [32.5, 685.0], [32.6, 686.0], [32.7, 688.0], [32.8, 689.0], [32.9, 691.0], [33.0, 693.0], [33.1, 697.0], [33.2, 700.0], [33.3, 702.0], [33.4, 705.0], [33.5, 708.0], [33.6, 710.0], [33.7, 710.0], [33.8, 713.0], [33.9, 714.0], [34.0, 717.0], [34.1, 719.0], [34.2, 723.0], [34.3, 724.0], [34.4, 726.0], [34.5, 728.0], [34.6, 731.0], [34.7, 733.0], [34.8, 734.0], [34.9, 737.0], [35.0, 739.0], [35.1, 741.0], [35.2, 743.0], [35.3, 746.0], [35.4, 749.0], [35.5, 754.0], [35.6, 757.0], [35.7, 758.0], [35.8, 762.0], [35.9, 763.0], [36.0, 766.0], [36.1, 770.0], [36.2, 772.0], [36.3, 774.0], [36.4, 774.0], [36.5, 779.0], [36.6, 780.0], [36.7, 783.0], [36.8, 788.0], [36.9, 790.0], [37.0, 793.0], [37.1, 798.0], [37.2, 800.0], [37.3, 804.0], [37.4, 809.0], [37.5, 809.0], [37.6, 815.0], [37.7, 818.0], [37.8, 821.0], [37.9, 825.0], [38.0, 832.0], [38.1, 834.0], [38.2, 836.0], [38.3, 841.0], [38.4, 844.0], [38.5, 849.0], [38.6, 855.0], [38.7, 859.0], [38.8, 867.0], [38.9, 881.0], [39.0, 884.0], [39.1, 888.0], [39.2, 892.0], [39.3, 899.0], [39.4, 913.0], [39.5, 918.0], [39.6, 931.0], [39.7, 936.0], [39.8, 944.0], [39.9, 955.0], [40.0, 966.0], [40.1, 970.0], [40.2, 980.0], [40.3, 989.0], [40.4, 998.0], [40.5, 1010.0], [40.6, 1027.0], [40.7, 1041.0], [40.8, 1070.0], [40.9, 1082.0], [41.0, 1088.0], [41.1, 1112.0], [41.2, 1139.0], [41.3, 1159.0], [41.4, 1190.0], [41.5, 1211.0], [41.6, 1239.0], [41.7, 1270.0], [41.8, 1288.0], [41.9, 1314.0], [42.0, 1333.0], [42.1, 1352.0], [42.2, 1366.0], [42.3, 1408.0], [42.4, 1420.0], [42.5, 1472.0], [42.6, 1542.0], [42.7, 1595.0], [42.8, 1643.0], [42.9, 1658.0], [43.0, 1698.0], [43.1, 1743.0], [43.2, 1797.0], [43.3, 1839.0], [43.4, 1931.0], [43.5, 1988.0], [43.6, 2051.0], [43.7, 2106.0], [43.8, 2144.0], [43.9, 2209.0], [44.0, 2307.0], [44.1, 2366.0], [44.2, 2429.0], [44.3, 2539.0], [44.4, 2596.0], [44.5, 2653.0], [44.6, 2726.0], [44.7, 2836.0], [44.8, 2949.0], [44.9, 3059.0], [45.0, 3135.0], [45.1, 3213.0], [45.2, 3302.0], [45.3, 3420.0], [45.4, 3510.0], [45.5, 3584.0], [45.6, 3646.0], [45.7, 3745.0], [45.8, 3809.0], [45.9, 3873.0], [46.0, 3999.0], [46.1, 4089.0], [46.2, 4202.0], [46.3, 4344.0], [46.4, 4423.0], [46.5, 4494.0], [46.6, 4575.0], [46.7, 4649.0], [46.8, 4796.0], [46.9, 4874.0], [47.0, 5044.0], [47.1, 5198.0], [47.2, 5284.0], [47.3, 5351.0], [47.4, 5451.0], [47.5, 5631.0], [47.6, 5688.0], [47.7, 5826.0], [47.8, 5987.0], [47.9, 6123.0], [48.0, 6400.0], [48.1, 6538.0], [48.2, 6774.0], [48.3, 7216.0], [48.4, 7402.0], [48.5, 7726.0], [48.6, 7910.0], [48.7, 8304.0], [48.8, 8582.0], [48.9, 9035.0], [49.0, 9291.0], [49.1, 9724.0], [49.2, 9900.0], [49.3, 10036.0], [49.4, 10267.0], [49.5, 10596.0], [49.6, 10986.0], [49.7, 11148.0], [49.8, 11558.0], [49.9, 12153.0], [50.0, 12738.0], [50.1, 13089.0], [50.2, 13395.0], [50.3, 13584.0], [50.4, 13992.0], [50.5, 14151.0], [50.6, 14432.0], [50.7, 14715.0], [50.8, 15102.0], [50.9, 15605.0], [51.0, 15925.0], [51.1, 16639.0], [51.2, 16903.0], [51.3, 17284.0], [51.4, 17654.0], [51.5, 18547.0], [51.6, 18976.0], [51.7, 19323.0], [51.8, 19570.0], [51.9, 19715.0], [52.0, 19937.0], [52.1, 20036.0], [52.2, 20328.0], [52.3, 20507.0], [52.4, 20636.0], [52.5, 20727.0], [52.6, 20941.0], [52.7, 21081.0], [52.8, 21198.0], [52.9, 21473.0], [53.0, 21599.0], [53.1, 21706.0], [53.2, 21768.0], [53.3, 21961.0], [53.4, 22025.0], [53.5, 22136.0], [53.6, 22232.0], [53.7, 22313.0], [53.8, 22419.0], [53.9, 22477.0], [54.0, 22504.0], [54.1, 22570.0], [54.2, 22706.0], [54.3, 22744.0], [54.4, 22807.0], [54.5, 22859.0], [54.6, 22916.0], [54.7, 22960.0], [54.8, 23046.0], [54.9, 23140.0], [55.0, 23240.0], [55.1, 23364.0], [55.2, 23428.0], [55.3, 23488.0], [55.4, 23549.0], [55.5, 23615.0], [55.6, 23662.0], [55.7, 23689.0], [55.8, 23765.0], [55.9, 23881.0], [56.0, 23948.0], [56.1, 24046.0], [56.2, 24128.0], [56.3, 24212.0], [56.4, 24301.0], [56.5, 24387.0], [56.6, 24421.0], [56.7, 24482.0], [56.8, 24698.0], [56.9, 24767.0], [57.0, 24823.0], [57.1, 24973.0], [57.2, 25021.0], [57.3, 25102.0], [57.4, 25191.0], [57.5, 25241.0], [57.6, 25350.0], [57.7, 25438.0], [57.8, 25608.0], [57.9, 25679.0], [58.0, 25712.0], [58.1, 25739.0], [58.2, 25864.0], [58.3, 25947.0], [58.4, 26203.0], [58.5, 26293.0], [58.6, 26359.0], [58.7, 26431.0], [58.8, 26474.0], [58.9, 26513.0], [59.0, 26575.0], [59.1, 26636.0], [59.2, 26755.0], [59.3, 26812.0], [59.4, 26902.0], [59.5, 26949.0], [59.6, 27032.0], [59.7, 27066.0], [59.8, 27164.0], [59.9, 27268.0], [60.0, 27320.0], [60.1, 27428.0], [60.2, 27474.0], [60.3, 27544.0], [60.4, 27632.0], [60.5, 27730.0], [60.6, 27803.0], [60.7, 27878.0], [60.8, 27905.0], [60.9, 27949.0], [61.0, 27999.0], [61.1, 28034.0], [61.2, 28081.0], [61.3, 28133.0], [61.4, 28215.0], [61.5, 28289.0], [61.6, 28330.0], [61.7, 28436.0], [61.8, 28479.0], [61.9, 28545.0], [62.0, 28605.0], [62.1, 28687.0], [62.2, 28772.0], [62.3, 28808.0], [62.4, 28896.0], [62.5, 28978.0], [62.6, 29043.0], [62.7, 29164.0], [62.8, 29222.0], [62.9, 29247.0], [63.0, 29277.0], [63.1, 29305.0], [63.2, 29412.0], [63.3, 29458.0], [63.4, 29575.0], [63.5, 29636.0], [63.6, 29732.0], [63.7, 29766.0], [63.8, 29808.0], [63.9, 29871.0], [64.0, 29895.0], [64.1, 29970.0], [64.2, 30024.0], [64.3, 30063.0], [64.4, 30078.0], [64.5, 30084.0], [64.6, 30106.0], [64.7, 30129.0], [64.8, 30144.0], [64.9, 30163.0], [65.0, 30181.0], [65.1, 30202.0], [65.2, 30222.0], [65.3, 30235.0], [65.4, 30244.0], [65.5, 30250.0], [65.6, 30258.0], [65.7, 30274.0], [65.8, 30283.0], [65.9, 30303.0], [66.0, 30314.0], [66.1, 30331.0], [66.2, 30373.0], [66.3, 30413.0], [66.4, 30432.0], [66.5, 30454.0], [66.6, 30465.0], [66.7, 30473.0], [66.8, 30489.0], [66.9, 30498.0], [67.0, 30509.0], [67.1, 30531.0], [67.2, 30549.0], [67.3, 30577.0], [67.4, 30589.0], [67.5, 30610.0], [67.6, 30625.0], [67.7, 30651.0], [67.8, 30662.0], [67.9, 30679.0], [68.0, 30695.0], [68.1, 30730.0], [68.2, 30737.0], [68.3, 30743.0], [68.4, 30763.0], [68.5, 30783.0], [68.6, 30794.0], [68.7, 30811.0], [68.8, 30840.0], [68.9, 30858.0], [69.0, 30873.0], [69.1, 30889.0], [69.2, 30919.0], [69.3, 30946.0], [69.4, 30954.0], [69.5, 30972.0], [69.6, 30983.0], [69.7, 30990.0], [69.8, 30995.0], [69.9, 31014.0], [70.0, 31028.0], [70.1, 31047.0], [70.2, 31055.0], [70.3, 31071.0], [70.4, 31091.0], [70.5, 31129.0], [70.6, 31139.0], [70.7, 31158.0], [70.8, 31170.0], [70.9, 31190.0], [71.0, 31198.0], [71.1, 31219.0], [71.2, 31234.0], [71.3, 31244.0], [71.4, 31251.0], [71.5, 31258.0], [71.6, 31268.0], [71.7, 31293.0], [71.8, 31309.0], [71.9, 31344.0], [72.0, 31364.0], [72.1, 31378.0], [72.2, 31393.0], [72.3, 31422.0], [72.4, 31431.0], [72.5, 31443.0], [72.6, 31459.0], [72.7, 31465.0], [72.8, 31472.0], [72.9, 31478.0], [73.0, 31484.0], [73.1, 31492.0], [73.2, 31498.0], [73.3, 31509.0], [73.4, 31518.0], [73.5, 31524.0], [73.6, 31535.0], [73.7, 31545.0], [73.8, 31553.0], [73.9, 31567.0], [74.0, 31601.0], [74.1, 31608.0], [74.2, 31635.0], [74.3, 31658.0], [74.4, 31682.0], [74.5, 31703.0], [74.6, 31713.0], [74.7, 31726.0], [74.8, 31734.0], [74.9, 31741.0], [75.0, 31747.0], [75.1, 31768.0], [75.2, 31779.0], [75.3, 31799.0], [75.4, 31809.0], [75.5, 31839.0], [75.6, 31856.0], [75.7, 31867.0], [75.8, 31882.0], [75.9, 31898.0], [76.0, 31921.0], [76.1, 31933.0], [76.2, 31951.0], [76.3, 31969.0], [76.4, 31974.0], [76.5, 31978.0], [76.6, 31981.0], [76.7, 31989.0], [76.8, 31995.0], [76.9, 32003.0], [77.0, 32013.0], [77.1, 32030.0], [77.2, 32049.0], [77.3, 32053.0], [77.4, 32075.0], [77.5, 32092.0], [77.6, 32108.0], [77.7, 32128.0], [77.8, 32160.0], [77.9, 32173.0], [78.0, 32194.0], [78.1, 32200.0], [78.2, 32213.0], [78.3, 32223.0], [78.4, 32232.0], [78.5, 32243.0], [78.6, 32255.0], [78.7, 32273.0], [78.8, 32291.0], [78.9, 32310.0], [79.0, 32321.0], [79.1, 32337.0], [79.2, 32368.0], [79.3, 32394.0], [79.4, 32423.0], [79.5, 32433.0], [79.6, 32446.0], [79.7, 32456.0], [79.8, 32469.0], [79.9, 32477.0], [80.0, 32485.0], [80.1, 32488.0], [80.2, 32495.0], [80.3, 32506.0], [80.4, 32515.0], [80.5, 32526.0], [80.6, 32532.0], [80.7, 32566.0], [80.8, 32601.0], [80.9, 32617.0], [81.0, 32636.0], [81.1, 32658.0], [81.2, 32675.0], [81.3, 32684.0], [81.4, 32706.0], [81.5, 32717.0], [81.6, 32733.0], [81.7, 32737.0], [81.8, 32748.0], [81.9, 32756.0], [82.0, 32766.0], [82.1, 32777.0], [82.2, 32787.0], [82.3, 32810.0], [82.4, 32846.0], [82.5, 32884.0], [82.6, 32890.0], [82.7, 32903.0], [82.8, 32936.0], [82.9, 32945.0], [83.0, 32961.0], [83.1, 32975.0], [83.2, 32985.0], [83.3, 32995.0], [83.4, 33007.0], [83.5, 33013.0], [83.6, 33023.0], [83.7, 33035.0], [83.8, 33041.0], [83.9, 33064.0], [84.0, 33083.0], [84.1, 33097.0], [84.2, 33115.0], [84.3, 33124.0], [84.4, 33153.0], [84.5, 33174.0], [84.6, 33183.0], [84.7, 33196.0], [84.8, 33208.0], [84.9, 33217.0], [85.0, 33230.0], [85.1, 33236.0], [85.2, 33246.0], [85.3, 33251.0], [85.4, 33266.0], [85.5, 33276.0], [85.6, 33296.0], [85.7, 33312.0], [85.8, 33328.0], [85.9, 33347.0], [86.0, 33360.0], [86.1, 33395.0], [86.2, 33417.0], [86.3, 33431.0], [86.4, 33443.0], [86.5, 33450.0], [86.6, 33463.0], [86.7, 33473.0], [86.8, 33484.0], [86.9, 33490.0], [87.0, 33497.0], [87.1, 33507.0], [87.2, 33516.0], [87.3, 33526.0], [87.4, 33552.0], [87.5, 33568.0], [87.6, 33589.0], [87.7, 33623.0], [87.8, 33654.0], [87.9, 33664.0], [88.0, 33678.0], [88.1, 33699.0], [88.2, 33721.0], [88.3, 33734.0], [88.4, 33736.0], [88.5, 33747.0], [88.6, 33760.0], [88.7, 33769.0], [88.8, 33782.0], [88.9, 33798.0], [89.0, 33830.0], [89.1, 33874.0], [89.2, 33888.0], [89.3, 33909.0], [89.4, 33930.0], [89.5, 33951.0], [89.6, 33969.0], [89.7, 33975.0], [89.8, 33983.0], [89.9, 33990.0], [90.0, 33998.0], [90.1, 34017.0], [90.2, 34033.0], [90.3, 34058.0], [90.4, 34085.0], [90.5, 34153.0], [90.6, 34168.0], [90.7, 34182.0], [90.8, 34203.0], [90.9, 34217.0], [91.0, 34236.0], [91.1, 34253.0], [91.2, 34263.0], [91.3, 34280.0], [91.4, 34296.0], [91.5, 34310.0], [91.6, 34344.0], [91.7, 34402.0], [91.8, 34413.0], [91.9, 34437.0], [92.0, 34460.0], [92.1, 34476.0], [92.2, 34486.0], [92.3, 34498.0], [92.4, 34510.0], [92.5, 34544.0], [92.6, 34590.0], [92.7, 34603.0], [92.8, 34622.0], [92.9, 34656.0], [93.0, 34689.0], [93.1, 34708.0], [93.2, 34718.0], [93.3, 34738.0], [93.4, 34742.0], [93.5, 34756.0], [93.6, 34767.0], [93.7, 34780.0], [93.8, 34804.0], [93.9, 34825.0], [94.0, 34876.0], [94.1, 34910.0], [94.2, 34936.0], [94.3, 34952.0], [94.4, 34980.0], [94.5, 34998.0], [94.6, 35039.0], [94.7, 35067.0], [94.8, 35136.0], [94.9, 35170.0], [95.0, 35195.0], [95.1, 35214.0], [95.2, 35236.0], [95.3, 35251.0], [95.4, 35263.0], [95.5, 35272.0], [95.6, 35329.0], [95.7, 35423.0], [95.8, 35452.0], [95.9, 35479.0], [96.0, 35502.0], [96.1, 35530.0], [96.2, 35608.0], [96.3, 35649.0], [96.4, 35701.0], [96.5, 35718.0], [96.6, 35740.0], [96.7, 35764.0], [96.8, 35812.0], [96.9, 35896.0], [97.0, 35949.0], [97.1, 35983.0], [97.2, 36026.0], [97.3, 36110.0], [97.4, 36186.0], [97.5, 36213.0], [97.6, 36284.0], [97.7, 36329.0], [97.8, 36397.0], [97.9, 36434.0], [98.0, 36480.0], [98.1, 36489.0], [98.2, 36542.0], [98.3, 36746.0], [98.4, 36789.0], [98.5, 36972.0], [98.6, 36989.0], [98.7, 37150.0], [98.8, 37277.0], [98.9, 37464.0], [99.0, 37529.0], [99.1, 37733.0], [99.2, 37867.0], [99.3, 38105.0], [99.4, 38476.0], [99.5, 38673.0], [99.6, 39114.0], [99.7, 39243.0], [99.8, 40226.0], [99.9, 42745.0], [100.0, 47392.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[0.0, 6.0], [0.1, 7.0], [0.2, 7.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 7.0], [0.7, 7.0], [0.8, 7.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 8.0], [1.5, 8.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 8.0], [2.7, 8.0], [2.8, 8.0], [2.9, 8.0], [3.0, 8.0], [3.1, 8.0], [3.2, 8.0], [3.3, 8.0], [3.4, 8.0], [3.5, 8.0], [3.6, 8.0], [3.7, 8.0], [3.8, 8.0], [3.9, 8.0], [4.0, 8.0], [4.1, 8.0], [4.2, 8.0], [4.3, 8.0], [4.4, 8.0], [4.5, 8.0], [4.6, 8.0], [4.7, 8.0], [4.8, 8.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 8.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 8.0], [7.4, 8.0], [7.5, 8.0], [7.6, 8.0], [7.7, 8.0], [7.8, 8.0], [7.9, 8.0], [8.0, 8.0], [8.1, 8.0], [8.2, 8.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 8.0], [9.0, 8.0], [9.1, 8.0], [9.2, 8.0], [9.3, 8.0], [9.4, 8.0], [9.5, 8.0], [9.6, 8.0], [9.7, 8.0], [9.8, 8.0], [9.9, 8.0], [10.0, 8.0], [10.1, 8.0], [10.2, 8.0], [10.3, 8.0], [10.4, 8.0], [10.5, 8.0], [10.6, 8.0], [10.7, 8.0], [10.8, 8.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 9.0], [13.4, 9.0], [13.5, 9.0], [13.6, 9.0], [13.7, 9.0], [13.8, 9.0], [13.9, 9.0], [14.0, 9.0], [14.1, 9.0], [14.2, 9.0], [14.3, 9.0], [14.4, 9.0], [14.5, 9.0], [14.6, 9.0], [14.7, 9.0], [14.8, 9.0], [14.9, 9.0], [15.0, 9.0], [15.1, 9.0], [15.2, 9.0], [15.3, 9.0], [15.4, 9.0], [15.5, 9.0], [15.6, 9.0], [15.7, 9.0], [15.8, 9.0], [15.9, 9.0], [16.0, 9.0], [16.1, 9.0], [16.2, 9.0], [16.3, 9.0], [16.4, 9.0], [16.5, 9.0], [16.6, 9.0], [16.7, 9.0], [16.8, 9.0], [16.9, 9.0], [17.0, 9.0], [17.1, 9.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 9.0], [20.0, 9.0], [20.1, 9.0], [20.2, 9.0], [20.3, 9.0], [20.4, 9.0], [20.5, 9.0], [20.6, 9.0], [20.7, 9.0], [20.8, 9.0], [20.9, 9.0], [21.0, 9.0], [21.1, 9.0], [21.2, 9.0], [21.3, 9.0], [21.4, 9.0], [21.5, 9.0], [21.6, 9.0], [21.7, 9.0], [21.8, 9.0], [21.9, 9.0], [22.0, 9.0], [22.1, 9.0], [22.2, 9.0], [22.3, 9.0], [22.4, 9.0], [22.5, 9.0], [22.6, 9.0], [22.7, 9.0], [22.8, 9.0], [22.9, 9.0], [23.0, 9.0], [23.1, 9.0], [23.2, 9.0], [23.3, 9.0], [23.4, 9.0], [23.5, 9.0], [23.6, 9.0], [23.7, 9.0], [23.8, 9.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 9.0], [26.0, 9.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 9.0], [26.6, 9.0], [26.7, 9.0], [26.8, 9.0], [26.9, 9.0], [27.0, 9.0], [27.1, 9.0], [27.2, 9.0], [27.3, 9.0], [27.4, 9.0], [27.5, 9.0], [27.6, 9.0], [27.7, 9.0], [27.8, 9.0], [27.9, 9.0], [28.0, 9.0], [28.1, 9.0], [28.2, 9.0], [28.3, 9.0], [28.4, 9.0], [28.5, 9.0], [28.6, 9.0], [28.7, 9.0], [28.8, 9.0], [28.9, 9.0], [29.0, 9.0], [29.1, 9.0], [29.2, 9.0], [29.3, 9.0], [29.4, 9.0], [29.5, 9.0], [29.6, 9.0], [29.7, 9.0], [29.8, 9.0], [29.9, 9.0], [30.0, 9.0], [30.1, 9.0], [30.2, 9.0], [30.3, 9.0], [30.4, 9.0], [30.5, 9.0], [30.6, 9.0], [30.7, 9.0], [30.8, 9.0], [30.9, 9.0], [31.0, 9.0], [31.1, 9.0], [31.2, 9.0], [31.3, 9.0], [31.4, 9.0], [31.5, 9.0], [31.6, 9.0], [31.7, 9.0], [31.8, 9.0], [31.9, 9.0], [32.0, 9.0], [32.1, 9.0], [32.2, 9.0], [32.3, 9.0], [32.4, 9.0], [32.5, 9.0], [32.6, 9.0], [32.7, 9.0], [32.8, 9.0], [32.9, 9.0], [33.0, 9.0], [33.1, 9.0], [33.2, 9.0], [33.3, 9.0], [33.4, 9.0], [33.5, 9.0], [33.6, 9.0], [33.7, 9.0], [33.8, 9.0], [33.9, 9.0], [34.0, 9.0], [34.1, 9.0], [34.2, 9.0], [34.3, 9.0], [34.4, 9.0], [34.5, 9.0], [34.6, 9.0], [34.7, 9.0], [34.8, 9.0], [34.9, 10.0], [35.0, 10.0], [35.1, 10.0], [35.2, 10.0], [35.3, 10.0], [35.4, 10.0], [35.5, 10.0], [35.6, 10.0], [35.7, 10.0], [35.8, 10.0], [35.9, 10.0], [36.0, 10.0], [36.1, 10.0], [36.2, 10.0], [36.3, 10.0], [36.4, 10.0], [36.5, 10.0], [36.6, 10.0], [36.7, 10.0], [36.8, 10.0], [36.9, 10.0], [37.0, 10.0], [37.1, 10.0], [37.2, 10.0], [37.3, 10.0], [37.4, 10.0], [37.5, 10.0], [37.6, 10.0], [37.7, 10.0], [37.8, 10.0], [37.9, 10.0], [38.0, 10.0], [38.1, 10.0], [38.2, 10.0], [38.3, 10.0], [38.4, 10.0], [38.5, 10.0], [38.6, 10.0], [38.7, 10.0], [38.8, 10.0], [38.9, 10.0], [39.0, 10.0], [39.1, 10.0], [39.2, 10.0], [39.3, 10.0], [39.4, 10.0], [39.5, 10.0], [39.6, 10.0], [39.7, 10.0], [39.8, 10.0], [39.9, 10.0], [40.0, 10.0], [40.1, 10.0], [40.2, 10.0], [40.3, 10.0], [40.4, 10.0], [40.5, 10.0], [40.6, 10.0], [40.7, 10.0], [40.8, 10.0], [40.9, 10.0], [41.0, 10.0], [41.1, 10.0], [41.2, 10.0], [41.3, 10.0], [41.4, 10.0], [41.5, 10.0], [41.6, 10.0], [41.7, 10.0], [41.8, 10.0], [41.9, 10.0], [42.0, 10.0], [42.1, 10.0], [42.2, 10.0], [42.3, 10.0], [42.4, 10.0], [42.5, 10.0], [42.6, 10.0], [42.7, 10.0], [42.8, 10.0], [42.9, 10.0], [43.0, 10.0], [43.1, 10.0], [43.2, 10.0], [43.3, 10.0], [43.4, 10.0], [43.5, 10.0], [43.6, 10.0], [43.7, 10.0], [43.8, 10.0], [43.9, 10.0], [44.0, 10.0], [44.1, 10.0], [44.2, 10.0], [44.3, 10.0], [44.4, 10.0], [44.5, 10.0], [44.6, 10.0], [44.7, 10.0], [44.8, 10.0], [44.9, 10.0], [45.0, 10.0], [45.1, 10.0], [45.2, 10.0], [45.3, 10.0], [45.4, 10.0], [45.5, 10.0], [45.6, 10.0], [45.7, 10.0], [45.8, 10.0], [45.9, 10.0], [46.0, 10.0], [46.1, 10.0], [46.2, 10.0], [46.3, 10.0], [46.4, 10.0], [46.5, 10.0], [46.6, 10.0], [46.7, 10.0], [46.8, 10.0], [46.9, 10.0], [47.0, 10.0], [47.1, 10.0], [47.2, 10.0], [47.3, 10.0], [47.4, 10.0], [47.5, 10.0], [47.6, 10.0], [47.7, 10.0], [47.8, 10.0], [47.9, 10.0], [48.0, 10.0], [48.1, 10.0], [48.2, 10.0], [48.3, 10.0], [48.4, 10.0], [48.5, 10.0], [48.6, 10.0], [48.7, 10.0], [48.8, 10.0], [48.9, 10.0], [49.0, 10.0], [49.1, 10.0], [49.2, 10.0], [49.3, 10.0], [49.4, 10.0], [49.5, 10.0], [49.6, 10.0], [49.7, 10.0], [49.8, 10.0], [49.9, 10.0], [50.0, 10.0], [50.1, 10.0], [50.2, 10.0], [50.3, 10.0], [50.4, 10.0], [50.5, 11.0], [50.6, 11.0], [50.7, 11.0], [50.8, 11.0], [50.9, 11.0], [51.0, 11.0], [51.1, 11.0], [51.2, 11.0], [51.3, 11.0], [51.4, 11.0], [51.5, 11.0], [51.6, 11.0], [51.7, 11.0], [51.8, 11.0], [51.9, 11.0], [52.0, 11.0], [52.1, 11.0], [52.2, 11.0], [52.3, 11.0], [52.4, 11.0], [52.5, 11.0], [52.6, 11.0], [52.7, 11.0], [52.8, 11.0], [52.9, 11.0], [53.0, 11.0], [53.1, 11.0], [53.2, 11.0], [53.3, 11.0], [53.4, 11.0], [53.5, 11.0], [53.6, 11.0], [53.7, 11.0], [53.8, 11.0], [53.9, 11.0], [54.0, 11.0], [54.1, 11.0], [54.2, 11.0], [54.3, 11.0], [54.4, 11.0], [54.5, 11.0], [54.6, 11.0], [54.7, 11.0], [54.8, 11.0], [54.9, 11.0], [55.0, 11.0], [55.1, 11.0], [55.2, 11.0], [55.3, 11.0], [55.4, 11.0], [55.5, 11.0], [55.6, 11.0], [55.7, 11.0], [55.8, 11.0], [55.9, 11.0], [56.0, 11.0], [56.1, 11.0], [56.2, 11.0], [56.3, 11.0], [56.4, 11.0], [56.5, 11.0], [56.6, 11.0], [56.7, 11.0], [56.8, 11.0], [56.9, 11.0], [57.0, 11.0], [57.1, 11.0], [57.2, 11.0], [57.3, 11.0], [57.4, 11.0], [57.5, 11.0], [57.6, 11.0], [57.7, 11.0], [57.8, 11.0], [57.9, 11.0], [58.0, 11.0], [58.1, 11.0], [58.2, 11.0], [58.3, 11.0], [58.4, 11.0], [58.5, 11.0], [58.6, 11.0], [58.7, 11.0], [58.8, 11.0], [58.9, 11.0], [59.0, 11.0], [59.1, 11.0], [59.2, 11.0], [59.3, 11.0], [59.4, 11.0], [59.5, 11.0], [59.6, 11.0], [59.7, 11.0], [59.8, 11.0], [59.9, 11.0], [60.0, 11.0], [60.1, 11.0], [60.2, 11.0], [60.3, 11.0], [60.4, 11.0], [60.5, 11.0], [60.6, 11.0], [60.7, 11.0], [60.8, 11.0], [60.9, 11.0], [61.0, 11.0], [61.1, 11.0], [61.2, 11.0], [61.3, 11.0], [61.4, 11.0], [61.5, 11.0], [61.6, 11.0], [61.7, 12.0], [61.8, 12.0], [61.9, 12.0], [62.0, 12.0], [62.1, 12.0], [62.2, 12.0], [62.3, 12.0], [62.4, 12.0], [62.5, 12.0], [62.6, 12.0], [62.7, 12.0], [62.8, 12.0], [62.9, 12.0], [63.0, 12.0], [63.1, 12.0], [63.2, 12.0], [63.3, 12.0], [63.4, 12.0], [63.5, 12.0], [63.6, 12.0], [63.7, 12.0], [63.8, 12.0], [63.9, 12.0], [64.0, 12.0], [64.1, 12.0], [64.2, 12.0], [64.3, 12.0], [64.4, 12.0], [64.5, 12.0], [64.6, 12.0], [64.7, 12.0], [64.8, 12.0], [64.9, 12.0], [65.0, 12.0], [65.1, 12.0], [65.2, 12.0], [65.3, 12.0], [65.4, 12.0], [65.5, 12.0], [65.6, 12.0], [65.7, 12.0], [65.8, 12.0], [65.9, 12.0], [66.0, 12.0], [66.1, 12.0], [66.2, 12.0], [66.3, 12.0], [66.4, 12.0], [66.5, 12.0], [66.6, 12.0], [66.7, 12.0], [66.8, 12.0], [66.9, 12.0], [67.0, 12.0], [67.1, 12.0], [67.2, 12.0], [67.3, 12.0], [67.4, 12.0], [67.5, 12.0], [67.6, 12.0], [67.7, 12.0], [67.8, 12.0], [67.9, 12.0], [68.0, 12.0], [68.1, 12.0], [68.2, 12.0], [68.3, 12.0], [68.4, 12.0], [68.5, 12.0], [68.6, 12.0], [68.7, 12.0], [68.8, 12.0], [68.9, 12.0], [69.0, 13.0], [69.1, 13.0], [69.2, 13.0], [69.3, 13.0], [69.4, 13.0], [69.5, 13.0], [69.6, 13.0], [69.7, 13.0], [69.8, 13.0], [69.9, 13.0], [70.0, 13.0], [70.1, 13.0], [70.2, 13.0], [70.3, 13.0], [70.4, 13.0], [70.5, 13.0], [70.6, 13.0], [70.7, 13.0], [70.8, 13.0], [70.9, 13.0], [71.0, 13.0], [71.1, 13.0], [71.2, 13.0], [71.3, 13.0], [71.4, 13.0], [71.5, 13.0], [71.6, 13.0], [71.7, 13.0], [71.8, 13.0], [71.9, 13.0], [72.0, 13.0], [72.1, 13.0], [72.2, 13.0], [72.3, 13.0], [72.4, 13.0], [72.5, 13.0], [72.6, 13.0], [72.7, 13.0], [72.8, 14.0], [72.9, 14.0], [73.0, 14.0], [73.1, 14.0], [73.2, 14.0], [73.3, 14.0], [73.4, 14.0], [73.5, 14.0], [73.6, 14.0], [73.7, 14.0], [73.8, 14.0], [73.9, 14.0], [74.0, 14.0], [74.1, 14.0], [74.2, 14.0], [74.3, 14.0], [74.4, 14.0], [74.5, 14.0], [74.6, 14.0], [74.7, 14.0], [74.8, 14.0], [74.9, 14.0], [75.0, 14.0], [75.1, 14.0], [75.2, 15.0], [75.3, 15.0], [75.4, 15.0], [75.5, 15.0], [75.6, 15.0], [75.7, 15.0], [75.8, 15.0], [75.9, 15.0], [76.0, 15.0], [76.1, 15.0], [76.2, 15.0], [76.3, 16.0], [76.4, 16.0], [76.5, 16.0], [76.6, 16.0], [76.7, 16.0], [76.8, 16.0], [76.9, 16.0], [77.0, 17.0], [77.1, 17.0], [77.2, 17.0], [77.3, 17.0], [77.4, 18.0], [77.5, 18.0], [77.6, 18.0], [77.7, 18.0], [77.8, 18.0], [77.9, 18.0], [78.0, 19.0], [78.1, 19.0], [78.2, 19.0], [78.3, 20.0], [78.4, 20.0], [78.5, 20.0], [78.6, 21.0], [78.7, 21.0], [78.8, 21.0], [78.9, 21.0], [79.0, 22.0], [79.1, 22.0], [79.2, 22.0], [79.3, 23.0], [79.4, 23.0], [79.5, 24.0], [79.6, 24.0], [79.7, 25.0], [79.8, 25.0], [79.9, 25.0], [80.0, 26.0], [80.1, 26.0], [80.2, 26.0], [80.3, 27.0], [80.4, 28.0], [80.5, 28.0], [80.6, 29.0], [80.7, 29.0], [80.8, 30.0], [80.9, 30.0], [81.0, 30.0], [81.1, 31.0], [81.2, 32.0], [81.3, 33.0], [81.4, 33.0], [81.5, 34.0], [81.6, 35.0], [81.7, 36.0], [81.8, 36.0], [81.9, 37.0], [82.0, 38.0], [82.1, 39.0], [82.2, 40.0], [82.3, 41.0], [82.4, 42.0], [82.5, 46.0], [82.6, 50.0], [82.7, 57.0], [82.8, 67.0], [82.9, 83.0], [83.0, 118.0], [83.1, 138.0], [83.2, 186.0], [83.3, 230.0], [83.4, 265.0], [83.5, 303.0], [83.6, 333.0], [83.7, 359.0], [83.8, 425.0], [83.9, 446.0], [84.0, 502.0], [84.1, 565.0], [84.2, 654.0], [84.3, 772.0], [84.4, 844.0], [84.5, 935.0], [84.6, 1064.0], [84.7, 1207.0], [84.8, 1297.0], [84.9, 1391.0], [85.0, 1481.0], [85.1, 1619.0], [85.2, 1740.0], [85.3, 1783.0], [85.4, 1832.0], [85.5, 1900.0], [85.6, 2115.0], [85.7, 2179.0], [85.8, 2288.0], [85.9, 2321.0], [86.0, 2424.0], [86.1, 2573.0], [86.2, 2641.0], [86.3, 2726.0], [86.4, 2977.0], [86.5, 3112.0], [86.6, 3272.0], [86.7, 3323.0], [86.8, 3449.0], [86.9, 3527.0], [87.0, 3617.0], [87.1, 3806.0], [87.2, 3875.0], [87.3, 4122.0], [87.4, 4397.0], [87.5, 4999.0], [87.6, 6123.0], [87.7, 6541.0], [87.8, 6611.0], [87.9, 6886.0], [88.0, 7040.0], [88.1, 7253.0], [88.2, 7450.0], [88.3, 7536.0], [88.4, 7671.0], [88.5, 7937.0], [88.6, 8174.0], [88.7, 8220.0], [88.8, 8278.0], [88.9, 8441.0], [89.0, 8898.0], [89.1, 9085.0], [89.2, 9666.0], [89.3, 9878.0], [89.4, 10094.0], [89.5, 10383.0], [89.6, 10589.0], [89.7, 11548.0], [89.8, 12168.0], [89.9, 14062.0], [90.0, 15432.0], [90.1, 15897.0], [90.2, 16514.0], [90.3, 16887.0], [90.4, 17570.0], [90.5, 18355.0], [90.6, 18659.0], [90.7, 19034.0], [90.8, 19450.0], [90.9, 19595.0], [91.0, 19890.0], [91.1, 20035.0], [91.2, 20431.0], [91.3, 20587.0], [91.4, 20941.0], [91.5, 21057.0], [91.6, 21589.0], [91.7, 21803.0], [91.8, 22249.0], [91.9, 22490.0], [92.0, 22806.0], [92.1, 22939.0], [92.2, 23275.0], [92.3, 23469.0], [92.4, 23655.0], [92.5, 23811.0], [92.6, 23953.0], [92.7, 24152.0], [92.8, 24369.0], [92.9, 24554.0], [93.0, 24790.0], [93.1, 24959.0], [93.2, 25086.0], [93.3, 25198.0], [93.4, 25274.0], [93.5, 25348.0], [93.6, 25454.0], [93.7, 25526.0], [93.8, 25659.0], [93.9, 25675.0], [94.0, 25842.0], [94.1, 25928.0], [94.2, 26019.0], [94.3, 26132.0], [94.4, 26244.0], [94.5, 26296.0], [94.6, 26428.0], [94.7, 26517.0], [94.8, 26551.0], [94.9, 26619.0], [95.0, 26761.0], [95.1, 26791.0], [95.2, 26845.0], [95.3, 26944.0], [95.4, 27001.0], [95.5, 27030.0], [95.6, 27106.0], [95.7, 27137.0], [95.8, 27199.0], [95.9, 27249.0], [96.0, 27290.0], [96.1, 27407.0], [96.2, 27497.0], [96.3, 27519.0], [96.4, 27624.0], [96.5, 27700.0], [96.6, 27767.0], [96.7, 27840.0], [96.8, 27897.0], [96.9, 27972.0], [97.0, 28038.0], [97.1, 28071.0], [97.2, 28184.0], [97.3, 28207.0], [97.4, 28241.0], [97.5, 28298.0], [97.6, 28333.0], [97.7, 28495.0], [97.8, 28528.0], [97.9, 28667.0], [98.0, 28704.0], [98.1, 28742.0], [98.2, 28785.0], [98.3, 28883.0], [98.4, 28961.0], [98.5, 29027.0], [98.6, 29072.0], [98.7, 29194.0], [98.8, 29258.0], [98.9, 29348.0], [99.0, 29577.0], [99.1, 29680.0], [99.2, 29736.0], [99.3, 29811.0], [99.4, 29911.0], [99.5, 29977.0], [99.6, 30000.0], [99.7, 30002.0], [99.8, 30003.0], [99.9, 30004.0], [100.0, 30006.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4531.0, "series": [{"data": [[0.0, 14.0], [100.0, 12.0], [33300.0, 28.0], [32900.0, 35.0], [33700.0, 43.0], [34100.0, 19.0], [34500.0, 18.0], [36500.0, 5.0], [36100.0, 8.0], [35300.0, 5.0], [35700.0, 22.0], [34900.0, 23.0], [37300.0, 3.0], [38500.0, 3.0], [38900.0, 1.0], [38100.0, 1.0], [37700.0, 5.0], [36900.0, 8.0], [40100.0, 1.0], [42900.0, 1.0], [47300.0, 1.0], [200.0, 1.0], [300.0, 13.0], [400.0, 484.0], [500.0, 867.0], [600.0, 416.0], [700.0, 216.0], [800.0, 117.0], [900.0, 62.0], [1000.0, 34.0], [1100.0, 21.0], [1200.0, 21.0], [1300.0, 25.0], [1400.0, 13.0], [1500.0, 10.0], [1600.0, 16.0], [1700.0, 11.0], [1800.0, 6.0], [1900.0, 10.0], [2000.0, 9.0], [2100.0, 11.0], [2300.0, 9.0], [2200.0, 6.0], [2400.0, 7.0], [2500.0, 7.0], [2600.0, 10.0], [2700.0, 5.0], [2800.0, 3.0], [2900.0, 5.0], [3000.0, 7.0], [3100.0, 7.0], [3300.0, 5.0], [3200.0, 6.0], [3400.0, 5.0], [3500.0, 8.0], [3600.0, 8.0], [3700.0, 3.0], [3800.0, 11.0], [3900.0, 4.0], [4000.0, 6.0], [4100.0, 4.0], [4300.0, 5.0], [4200.0, 5.0], [4500.0, 6.0], [4600.0, 6.0], [4400.0, 7.0], [4700.0, 5.0], [4800.0, 6.0], [5000.0, 3.0], [4900.0, 3.0], [5100.0, 5.0], [5200.0, 7.0], [5300.0, 4.0], [5500.0, 3.0], [5400.0, 6.0], [5600.0, 8.0], [5700.0, 3.0], [5800.0, 1.0], [5900.0, 5.0], [6100.0, 3.0], [6000.0, 5.0], [6300.0, 2.0], [6600.0, 2.0], [6500.0, 2.0], [6400.0, 5.0], [6800.0, 3.0], [6700.0, 3.0], [7000.0, 1.0], [7300.0, 4.0], [7400.0, 2.0], [7200.0, 1.0], [7600.0, 2.0], [7500.0, 1.0], [7700.0, 3.0], [7900.0, 2.0], [7800.0, 4.0], [8100.0, 1.0], [8200.0, 2.0], [8500.0, 4.0], [8400.0, 1.0], [8300.0, 2.0], [9100.0, 3.0], [8800.0, 2.0], [9200.0, 2.0], [8900.0, 2.0], [9000.0, 2.0], [9700.0, 3.0], [9300.0, 1.0], [9400.0, 1.0], [9500.0, 2.0], [9800.0, 2.0], [10200.0, 4.0], [9900.0, 6.0], [10000.0, 3.0], [10600.0, 1.0], [10500.0, 2.0], [10300.0, 3.0], [10800.0, 2.0], [11100.0, 4.0], [11200.0, 1.0], [10900.0, 2.0], [11000.0, 2.0], [11300.0, 1.0], [11400.0, 2.0], [11500.0, 1.0], [11700.0, 1.0], [12100.0, 3.0], [12000.0, 2.0], [12500.0, 2.0], [12700.0, 1.0], [12600.0, 1.0], [12300.0, 1.0], [13000.0, 2.0], [13200.0, 1.0], [13100.0, 3.0], [12800.0, 1.0], [13300.0, 2.0], [12900.0, 2.0], [13400.0, 1.0], [13600.0, 2.0], [13500.0, 5.0], [13700.0, 1.0], [14300.0, 2.0], [13900.0, 2.0], [14000.0, 2.0], [14200.0, 2.0], [14100.0, 3.0], [14800.0, 5.0], [14600.0, 1.0], [14700.0, 2.0], [14400.0, 2.0], [14500.0, 2.0], [15100.0, 2.0], [15300.0, 1.0], [15200.0, 1.0], [15600.0, 4.0], [15700.0, 1.0], [15900.0, 2.0], [16000.0, 2.0], [16300.0, 2.0], [16100.0, 1.0], [16600.0, 4.0], [17200.0, 1.0], [17000.0, 2.0], [17600.0, 2.0], [17800.0, 1.0], [18200.0, 1.0], [18800.0, 1.0], [19000.0, 3.0], [19400.0, 1.0], [19800.0, 3.0], [20000.0, 3.0], [20400.0, 3.0], [20200.0, 1.0], [19600.0, 2.0], [21200.0, 2.0], [20600.0, 5.0], [21000.0, 3.0], [21400.0, 3.0], [20800.0, 3.0], [21600.0, 5.0], [22400.0, 12.0], [22000.0, 6.0], [22200.0, 6.0], [21800.0, 4.0], [22800.0, 10.0], [23400.0, 10.0], [22600.0, 3.0], [23000.0, 8.0], [23200.0, 5.0], [23600.0, 14.0], [24400.0, 10.0], [24000.0, 8.0], [23800.0, 4.0], [24200.0, 5.0], [25000.0, 8.0], [24600.0, 3.0], [25200.0, 7.0], [25400.0, 2.0], [24800.0, 5.0], [26200.0, 7.0], [25800.0, 4.0], [26000.0, 2.0], [25600.0, 10.0], [26400.0, 12.0], [26600.0, 7.0], [27000.0, 12.0], [27400.0, 8.0], [26800.0, 9.0], [27200.0, 6.0], [27600.0, 4.0], [28400.0, 9.0], [27800.0, 10.0], [28000.0, 12.0], [28200.0, 8.0], [28600.0, 8.0], [29200.0, 18.0], [29400.0, 7.0], [29000.0, 8.0], [29600.0, 6.0], [28800.0, 6.0], [30600.0, 32.0], [30200.0, 44.0], [29800.0, 12.0], [30000.0, 24.0], [30400.0, 35.0], [31200.0, 39.0], [31000.0, 33.0], [31400.0, 53.0], [30800.0, 28.0], [31600.0, 25.0], [32600.0, 32.0], [32000.0, 34.0], [31800.0, 32.0], [32200.0, 42.0], [32400.0, 51.0], [34800.0, 16.0], [34400.0, 36.0], [32800.0, 25.0], [33600.0, 26.0], [33200.0, 48.0], [34000.0, 23.0], [36400.0, 17.0], [35600.0, 10.0], [35200.0, 30.0], [36800.0, 3.0], [36000.0, 6.0], [37200.0, 5.0], [38400.0, 3.0], [37600.0, 2.0], [38800.0, 1.0], [38000.0, 2.0], [40000.0, 2.0], [39200.0, 2.0], [41600.0, 1.0], [33100.0, 33.0], [33500.0, 33.0], [33900.0, 40.0], [34700.0, 42.0], [34300.0, 14.0], [35100.0, 15.0], [36300.0, 9.0], [35500.0, 11.0], [35900.0, 14.0], [36700.0, 7.0], [37100.0, 4.0], [38300.0, 1.0], [37900.0, 1.0], [37500.0, 3.0], [38700.0, 1.0], [40300.0, 2.0], [39100.0, 4.0], [39500.0, 1.0], [42700.0, 1.0], [46300.0, 1.0], [17100.0, 1.0], [16900.0, 3.0], [16700.0, 1.0], [17300.0, 1.0], [18300.0, 2.0], [17500.0, 3.0], [18500.0, 2.0], [18900.0, 2.0], [19300.0, 3.0], [19100.0, 2.0], [18700.0, 1.0], [19700.0, 2.0], [19500.0, 4.0], [20300.0, 3.0], [19900.0, 6.0], [20100.0, 1.0], [20900.0, 4.0], [20700.0, 3.0], [21100.0, 5.0], [21500.0, 4.0], [20500.0, 5.0], [21300.0, 2.0], [22500.0, 8.0], [21700.0, 7.0], [22300.0, 6.0], [22100.0, 4.0], [21900.0, 4.0], [22700.0, 10.0], [23500.0, 8.0], [23100.0, 4.0], [23300.0, 4.0], [22900.0, 10.0], [24300.0, 8.0], [23900.0, 8.0], [24100.0, 5.0], [24500.0, 2.0], [23700.0, 6.0], [24700.0, 9.0], [25300.0, 7.0], [25500.0, 4.0], [25100.0, 8.0], [24900.0, 4.0], [25700.0, 9.0], [26300.0, 7.0], [26500.0, 9.0], [25900.0, 5.0], [26100.0, 2.0], [26700.0, 4.0], [27300.0, 6.0], [26900.0, 7.0], [27500.0, 8.0], [27100.0, 6.0], [28500.0, 8.0], [28300.0, 9.0], [28100.0, 7.0], [27700.0, 8.0], [27900.0, 13.0], [29100.0, 5.0], [29500.0, 7.0], [28700.0, 9.0], [28900.0, 6.0], [29300.0, 6.0], [30300.0, 21.0], [29900.0, 8.0], [30500.0, 29.0], [29700.0, 12.0], [30100.0, 27.0], [30700.0, 31.0], [31700.0, 47.0], [31500.0, 43.0], [31300.0, 26.0], [30900.0, 38.0], [31100.0, 33.0], [32300.0, 25.0], [31900.0, 53.0], [32500.0, 29.0], [32700.0, 47.0], [32100.0, 32.0], [33000.0, 42.0], [33400.0, 50.0], [34200.0, 35.0], [33800.0, 20.0], [34600.0, 19.0], [36200.0, 12.0], [35400.0, 19.0], [35000.0, 12.0], [35800.0, 7.0], [36600.0, 3.0], [38600.0, 2.0], [37800.0, 4.0], [37000.0, 4.0], [38200.0, 2.0], [37400.0, 4.0], [39400.0, 1.0], [39000.0, 2.0], [40200.0, 1.0], [40600.0, 1.0], [45000.0, 1.0], [43400.0, 1.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[0.0, 4531.0], [100.0, 15.0], [200.0, 14.0], [300.0, 16.0], [400.0, 12.0], [500.0, 10.0], [600.0, 3.0], [700.0, 7.0], [800.0, 5.0], [900.0, 5.0], [1000.0, 5.0], [1100.0, 3.0], [1200.0, 7.0], [1300.0, 5.0], [1400.0, 6.0], [1500.0, 4.0], [1600.0, 2.0], [1700.0, 11.0], [1800.0, 9.0], [1900.0, 3.0], [2000.0, 2.0], [2100.0, 7.0], [2200.0, 6.0], [2300.0, 8.0], [2400.0, 5.0], [2500.0, 6.0], [2600.0, 6.0], [2800.0, 2.0], [2700.0, 3.0], [2900.0, 2.0], [3000.0, 2.0], [3100.0, 6.0], [3300.0, 7.0], [3200.0, 4.0], [3400.0, 5.0], [3500.0, 6.0], [3600.0, 4.0], [3700.0, 3.0], [3800.0, 7.0], [3900.0, 1.0], [4000.0, 1.0], [4200.0, 2.0], [4300.0, 2.0], [4100.0, 4.0], [4600.0, 1.0], [4500.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [4900.0, 2.0], [5300.0, 1.0], [5500.0, 1.0], [5400.0, 1.0], [5800.0, 1.0], [6100.0, 2.0], [6200.0, 1.0], [6600.0, 2.0], [6500.0, 6.0], [6400.0, 2.0], [6800.0, 5.0], [6900.0, 3.0], [7100.0, 4.0], [7000.0, 3.0], [7200.0, 2.0], [7400.0, 3.0], [7300.0, 2.0], [7600.0, 5.0], [7500.0, 5.0], [7800.0, 3.0], [7700.0, 1.0], [7900.0, 2.0], [8100.0, 6.0], [8000.0, 1.0], [8500.0, 4.0], [8300.0, 3.0], [8200.0, 10.0], [8400.0, 1.0], [8700.0, 1.0], [9100.0, 1.0], [9000.0, 3.0], [8800.0, 1.0], [8900.0, 2.0], [9300.0, 1.0], [9500.0, 1.0], [9700.0, 2.0], [9600.0, 3.0], [9400.0, 1.0], [9900.0, 4.0], [9800.0, 2.0], [10200.0, 1.0], [10000.0, 2.0], [10100.0, 3.0], [10300.0, 2.0], [10500.0, 3.0], [10400.0, 1.0], [11100.0, 1.0], [10800.0, 1.0], [11400.0, 2.0], [11600.0, 1.0], [11300.0, 1.0], [11500.0, 1.0], [11700.0, 1.0], [12200.0, 1.0], [12000.0, 2.0], [12100.0, 1.0], [13200.0, 1.0], [13800.0, 1.0], [13600.0, 1.0], [13900.0, 1.0], [14000.0, 2.0], [14700.0, 1.0], [14900.0, 1.0], [15100.0, 1.0], [15400.0, 2.0], [15700.0, 3.0], [15800.0, 1.0], [15500.0, 1.0], [16000.0, 1.0], [16100.0, 1.0], [16300.0, 1.0], [16200.0, 1.0], [17400.0, 1.0], [16800.0, 2.0], [16600.0, 2.0], [18200.0, 1.0], [18000.0, 1.0], [18400.0, 2.0], [17600.0, 1.0], [19400.0, 3.0], [18800.0, 2.0], [19200.0, 1.0], [18600.0, 2.0], [19000.0, 1.0], [20000.0, 3.0], [20400.0, 3.0], [19800.0, 4.0], [19600.0, 2.0], [20800.0, 1.0], [21200.0, 1.0], [21000.0, 3.0], [21800.0, 2.0], [22200.0, 3.0], [21600.0, 2.0], [22400.0, 2.0], [22000.0, 1.0], [23000.0, 3.0], [23200.0, 3.0], [23400.0, 3.0], [22600.0, 3.0], [22800.0, 4.0], [23800.0, 4.0], [23600.0, 4.0], [24400.0, 2.0], [24200.0, 3.0], [24000.0, 2.0], [24800.0, 3.0], [24600.0, 3.0], [25200.0, 8.0], [25400.0, 7.0], [25000.0, 4.0], [25600.0, 8.0], [26000.0, 6.0], [26200.0, 12.0], [26400.0, 4.0], [25800.0, 3.0], [26600.0, 4.0], [27400.0, 7.0], [27600.0, 5.0], [27200.0, 11.0], [26800.0, 6.0], [27000.0, 9.0], [28200.0, 14.0], [27800.0, 10.0], [28600.0, 8.0], [28000.0, 13.0], [28400.0, 4.0], [29000.0, 9.0], [28800.0, 7.0], [29400.0, 3.0], [29200.0, 9.0], [29600.0, 5.0], [30000.0, 22.0], [29800.0, 4.0], [16700.0, 2.0], [17100.0, 2.0], [16500.0, 1.0], [16900.0, 1.0], [18100.0, 2.0], [18300.0, 1.0], [17500.0, 1.0], [18500.0, 1.0], [19300.0, 3.0], [18900.0, 2.0], [18700.0, 1.0], [19500.0, 4.0], [20100.0, 4.0], [19900.0, 1.0], [19700.0, 1.0], [20700.0, 2.0], [21500.0, 5.0], [20500.0, 5.0], [20900.0, 3.0], [22300.0, 2.0], [22100.0, 2.0], [21700.0, 2.0], [22500.0, 1.0], [22900.0, 2.0], [23500.0, 3.0], [23300.0, 2.0], [22700.0, 1.0], [24100.0, 4.0], [24500.0, 3.0], [24300.0, 3.0], [23700.0, 3.0], [23900.0, 2.0], [25100.0, 6.0], [25500.0, 4.0], [24900.0, 4.0], [25300.0, 5.0], [24700.0, 2.0], [26500.0, 11.0], [25900.0, 7.0], [26300.0, 4.0], [25700.0, 5.0], [26100.0, 1.0], [27500.0, 10.0], [27100.0, 14.0], [27300.0, 4.0], [26900.0, 8.0], [26700.0, 10.0], [27700.0, 8.0], [27900.0, 5.0], [28100.0, 6.0], [28500.0, 7.0], [28300.0, 7.0], [29100.0, 5.0], [28700.0, 12.0], [28900.0, 6.0], [29300.0, 3.0], [29500.0, 4.0], [29900.0, 13.0], [29700.0, 8.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 47300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1417.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5093.0, "series": [{"data": [[0.0, 5093.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1839.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2558.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1417.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 26.25626740947074, "minX": 1.6997247E12, "maxY": 120.0, "series": [{"data": [[1.69972512E12, 120.0], [1.69972548E12, 120.0], [1.69972518E12, 120.0], [1.69972488E12, 120.0], [1.69972554E12, 120.0], [1.69972524E12, 120.0], [1.69972482E12, 119.6248477466505], [1.69972494E12, 120.0], [1.6997256E12, 81.4054054054054], [1.6997253E12, 120.0], [1.69972476E12, 85.92803970223315], [1.699725E12, 120.0], [1.69972536E12, 120.0], [1.6997247E12, 26.25626740947074], [1.69972506E12, 120.0], [1.69972542E12, 120.0]], "isOverall": false, "label": "OnlineConversion", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997256E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 30127.0, "series": [{"data": [[2.0, 8199.75], [3.0, 8216.25], [4.0, 5077.857142857143], [5.0, 4486.375], [6.0, 3817.7], [7.0, 3860.4444444444443], [8.0, 4637.333333333334], [9.0, 3653.272727272727], [10.0, 3982.3333333333335], [11.0, 3560.769230769231], [12.0, 836.0], [13.0, 4247.4], [14.0, 5945.333333333334], [15.0, 5411.5], [16.0, 5383.857142857143], [17.0, 5435.8], [18.0, 6286.625], [19.0, 7425.333333333334], [20.0, 5272.777777777778], [21.0, 3878.9999999999995], [22.0, 5693.714285714285], [23.0, 5462.0], [24.0, 6340.0], [25.0, 5291.222222222223], [26.0, 5759.875], [27.0, 5511.5], [28.0, 5750.875], [29.0, 5163.428571428572], [30.0, 7090.0], [31.0, 6212.625], [32.0, 6483.571428571428], [33.0, 9777.0], [34.0, 8118.285714285714], [35.0, 6019.75], [36.0, 6690.0], [37.0, 3758.666666666666], [38.0, 2106.8333333333335], [39.0, 6881.571428571428], [40.0, 5907.5], [41.0, 5073.142857142857], [42.0, 10366.333333333332], [43.0, 8749.0], [44.0, 8612.6], [45.0, 9516.0], [46.0, 5073.727272727272], [47.0, 4793.0], [48.0, 6409.875], [49.0, 5737.0], [50.0, 6607.125], [51.0, 7193.8], [52.0, 570.5], [53.0, 13034.714285714286], [54.0, 6668.0], [55.0, 14640.333333333332], [56.0, 8631.636363636364], [57.0, 19088.75], [58.0, 5546.299999999999], [59.0, 13216.142857142855], [60.0, 7001.714285714286], [61.0, 11042.857142857143], [62.0, 13236.25], [63.0, 9914.0], [64.0, 13461.166666666666], [65.0, 14813.0], [66.0, 8824.76923076923], [67.0, 5784.166666666667], [68.0, 4468.111111111111], [69.0, 8798.142857142857], [70.0, 7402.4], [71.0, 8438.142857142857], [72.0, 11391.25], [73.0, 7839.625], [74.0, 9706.57142857143], [75.0, 7336.333333333334], [76.0, 7910.0], [77.0, 8480.5], [78.0, 9130.8], [79.0, 17733.75], [80.0, 7560.0], [81.0, 17409.666666666668], [82.0, 7584.5], [83.0, 13154.999999999998], [85.0, 17377.4], [86.0, 17368.8], [87.0, 15975.5], [88.0, 15028.5], [89.0, 12416.8], [90.0, 12926.2], [91.0, 21948.2], [92.0, 14200.6], [93.0, 13548.624999999998], [94.0, 7037.538461538461], [95.0, 5052.181818181818], [96.0, 8313.285714285714], [97.0, 8874.125], [98.0, 14517.5], [99.0, 5658.909090909091], [100.0, 4633.117647058823], [101.0, 3683.9], [102.0, 5422.000000000001], [103.0, 7124.555555555557], [104.0, 10861.333333333332], [105.0, 10722.714285714286], [106.0, 13542.5], [107.0, 6804.625], [108.0, 16038.285714285714], [109.0, 9061.22222222222], [110.0, 11640.545454545456], [111.0, 6752.6923076923085], [112.0, 9014.555555555555], [113.0, 9569.25], [114.0, 8723.4], [115.0, 8691.75], [116.0, 18709.625], [117.0, 8041.5], [118.0, 17253.857142857145], [119.0, 1798.6666666666667], [120.0, 17427.3209069108], [1.0, 30127.0]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[110.5711662075299, 15924.521395775942]], "isOverall": false, "label": "Cargar Tareas-Aggregated", "isController": false}, {"data": [[2.0, 16.0], [3.0, 32.6], [4.0, 14.571428571428571], [5.0, 19.25], [6.0, 15.88888888888889], [7.0, 18.88888888888889], [8.0, 40.333333333333336], [9.0, 22.181818181818176], [10.0, 143.0], [11.0, 120.46666666666665], [12.0, 3894.428571428571], [13.0, 449.23076923076917], [14.0, 30.2], [15.0, 197.0], [16.0, 617.4444444444445], [17.0, 156.75], [18.0, 580.0], [19.0, 657.5], [20.0, 387.6666666666667], [21.0, 25.555555555555557], [22.0, 865.8], [23.0, 102.80000000000001], [24.0, 1875.8], [25.0, 1329.0], [26.0, 612.7142857142857], [27.0, 903.5833333333333], [28.0, 206.83333333333331], [29.0, 19.5], [30.0, 10.5], [31.0, 1807.1666666666667], [32.0, 2011.75], [33.0, 2394.9375], [34.0, 1998.25], [35.0, 999.2857142857143], [36.0, 1256.8333333333335], [37.0, 2815.9], [38.0, 5101.285714285715], [39.0, 1514.8333333333333], [40.0, 1607.214285714286], [41.0, 492.6666666666667], [42.0, 832.7142857142858], [43.0, 1731.0], [44.0, 19.666666666666668], [45.0, 1528.5454545454545], [46.0, 2303.3], [47.0, 3435.75], [48.0, 2082.125], [49.0, 9.6], [50.0, 9.5], [51.0, 3183.0000000000005], [52.0, 11278.5], [53.0, 1571.8333333333333], [54.0, 11.0], [55.0, 11.0], [56.0, 10.8], [57.0, 7799.666666666667], [58.0, 3258.416666666667], [59.0, 4028.4], [60.0, 6003.333333333333], [61.0, 3299.333333333333], [62.0, 10.0], [63.0, 3709.142857142857], [64.0, 3527.0], [65.0, 9285.363636363636], [66.0, 4143.0], [67.0, 4975.833333333333], [68.0, 6624.142857142858], [69.0, 5627.714285714286], [70.0, 3406.5555555555557], [71.0, 890.5714285714286], [72.0, 3503.3636363636365], [73.0, 4585.25], [74.0, 3455.4444444444443], [75.0, 4954.875], [76.0, 13305.5], [77.0, 9612.714285714286], [78.0, 13.0], [79.0, 3900.625], [80.0, 6569.428571428572], [81.0, 5585.499999999999], [82.0, 1662.6666666666667], [83.0, 5072.1], [84.0, 14271.0], [85.0, 10.0], [86.0, 3271.6], [87.0, 9.0], [88.0, 7692.5], [89.0, 3652.8333333333335], [90.0, 2641.333333333333], [91.0, 11.0], [92.0, 3772.666666666667], [93.0, 3673.090909090909], [94.0, 4367.2], [95.0, 1244.3333333333333], [96.0, 594.8333333333333], [97.0, 918.4285714285714], [98.0, 2770.833333333333], [99.0, 1196.230769230769], [100.0, 102.35714285714288], [101.0, 4624.4], [102.0, 7514.61111111111], [103.0, 4972.642857142857], [104.0, 3326.0], [105.0, 2937.714285714286], [106.0, 7253.75], [107.0, 241.83333333333331], [108.0, 10.571428571428571], [109.0, 222.19999999999993], [110.0, 10.857142857142856], [111.0, 159.0], [112.0, 227.8], [113.0, 3083.5555555555557], [114.0, 314.79999999999995], [115.0, 10.25], [116.0, 9.875], [117.0, 10.2], [118.0, 3915.4], [119.0, 11.0], [120.0, 2958.8459865129503], [1.0, 55.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[110.68509703405371, 2881.0646283412634]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 120.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 994.8166666666667, "minX": 1.6997247E12, "maxY": 1.0607400665E8, "series": [{"data": [[1.69972512E12, 4059.483333333333], [1.69972548E12, 3952.7833333333333], [1.69972518E12, 4126.383333333333], [1.69972488E12, 5200.3], [1.69972554E12, 3985.5666666666666], [1.69972524E12, 4043.366666666667], [1.69972482E12, 5457.916666666667], [1.69972494E12, 5316.05], [1.6997256E12, 994.8166666666667], [1.6997253E12, 3822.1], [1.69972476E12, 5500.516666666666], [1.699725E12, 5287.95], [1.69972536E12, 4115.616666666667], [1.6997247E12, 4887.333333333333], [1.69972506E12, 4604.983333333334], [1.69972542E12, 3923.983333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69972512E12, 8.685954771666667E7], [1.69972548E12, 8.685956131666666E7], [1.69972518E12, 8.870198851666667E7], [1.69972488E12, 1.010729622E8], [1.69972554E12, 8.817560243333334E7], [1.69972524E12, 8.79123965E7], [1.69972482E12, 1.0607400665E8], [1.69972494E12, 1.0449466765E8], [1.6997256E12, 3.579632268333333E7], [1.6997253E12, 8.580666918333334E7], [1.69972476E12, 9.923067125E7], [1.699725E12, 1.0423149878333333E8], [1.69972536E12, 8.817560753333333E7], [1.6997247E12, 9.00182274E7], [1.69972506E12, 9.449265795E7], [1.69972542E12, 8.528029821666667E7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997256E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 837.4148936170216, "minX": 1.6997247E12, "maxY": 28188.3161764706, "series": [{"data": [[1.69972512E12, 18431.86363636365], [1.69972548E12, 18925.693939393946], [1.69972518E12, 18299.587537091993], [1.69972488E12, 16310.026041666655], [1.69972554E12, 18782.522388059715], [1.69972524E12, 18350.383233532924], [1.69972482E12, 14009.523573200995], [1.69972494E12, 15910.735516372795], [1.6997256E12, 28188.3161764706], [1.6997253E12, 18336.85889570552], [1.69972476E12, 6644.092838196286], [1.699725E12, 15656.628787878788], [1.69972536E12, 17581.71641791043], [1.6997247E12, 2353.9444444444453], [1.69972506E12, 17191.685236768815], [1.69972542E12, 19087.737654320972]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.69972512E12, 3024.7645259938827], [1.69972548E12, 2728.960725075528], [1.69972518E12, 3153.792792792793], [1.69972488E12, 2604.757731958763], [1.69972554E12, 3006.081081081082], [1.69972524E12, 3240.99109792285], [1.69972482E12, 3249.985645933015], [1.69972494E12, 2249.4096692111943], [1.6997256E12, 9985.693877551019], [1.6997253E12, 3753.875776397517], [1.69972476E12, 3125.226107226107], [1.699725E12, 2409.0471464019843], [1.69972536E12, 3975.68731563422], [1.6997247E12, 837.4148936170216], [1.69972506E12, 2243.481792717087], [1.69972542E12, 2979.2568807339444]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997256E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 837.297872340426, "minX": 1.6997247E12, "maxY": 28188.30147058824, "series": [{"data": [[1.69972512E12, 18431.848484848488], [1.69972548E12, 18925.68484848484], [1.69972518E12, 18299.578635014823], [1.69972488E12, 16310.015625000005], [1.69972554E12, 18782.51641791045], [1.69972524E12, 18350.374251497], [1.69972482E12, 14009.50868486352], [1.69972494E12, 15910.712846347606], [1.6997256E12, 28188.30147058824], [1.6997253E12, 18336.852760736198], [1.69972476E12, 6644.082228116716], [1.699725E12, 15656.616161616153], [1.69972536E12, 17581.713432835804], [1.6997247E12, 2353.8859649122815], [1.69972506E12, 17191.68245125349], [1.69972542E12, 19087.737654320972]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.69972512E12, 3024.7492354740084], [1.69972548E12, 2728.9577039274905], [1.69972518E12, 3153.786786786787], [1.69972488E12, 2604.742268041237], [1.69972554E12, 3006.0720720720706], [1.69972524E12, 3240.99109792285], [1.69972482E12, 3249.9641148325336], [1.69972494E12, 2249.399491094147], [1.6997256E12, 9985.693877551019], [1.6997253E12, 3753.8695652173906], [1.69972476E12, 3125.1958041958032], [1.699725E12, 2409.042183622828], [1.69972536E12, 3975.68731563422], [1.6997247E12, 837.297872340426], [1.69972506E12, 2243.4761904761913], [1.69972542E12, 2979.2446483180433]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997256E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6997247E12, "maxY": 0.7755102040816327, "series": [{"data": [[1.69972512E12, 0.09999999999999996], [1.69972548E12, 0.14848484848484853], [1.69972518E12, 0.08011869436201788], [1.69972488E12, 0.07031249999999999], [1.69972554E12, 0.11641791044776122], [1.69972524E12, 0.1047904191616767], [1.69972482E12, 0.12406947890818862], [1.69972494E12, 0.10579345088161217], [1.6997256E12, 0.044117647058823546], [1.6997253E12, 0.09815950920245393], [1.69972476E12, 0.08753315649867371], [1.699725E12, 0.148989898989899], [1.69972536E12, 0.10746268656716428], [1.6997247E12, 0.0], [1.69972506E12, 0.09749303621169923], [1.69972542E12, 0.055555555555555546]], "isOverall": false, "label": "Cargar Tareas", "isController": false}, {"data": [[1.69972512E12, 0.697247706422018], [1.69972548E12, 0.6404833836858006], [1.69972518E12, 0.6756756756756758], [1.69972488E12, 0.61340206185567], [1.69972554E12, 0.6396396396396395], [1.69972524E12, 0.6646884272997028], [1.69972482E12, 0.5430622009569377], [1.69972494E12, 0.4936386768447838], [1.6997256E12, 0.7755102040816327], [1.6997253E12, 0.6118012422360245], [1.69972476E12, 0.5967365967365968], [1.699725E12, 0.5459057071960296], [1.69972536E12, 0.5899705014749266], [1.6997247E12, 0.470744680851064], [1.69972506E12, 0.5602240896358547], [1.69972542E12, 0.7461773700305814]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997256E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.6997247E12, "maxY": 47392.0, "series": [{"data": [[1.69972512E12, 36873.0], [1.69972548E12, 35531.0], [1.69972518E12, 34616.0], [1.69972488E12, 39243.0], [1.69972554E12, 35540.0], [1.69972524E12, 36983.0], [1.69972482E12, 47392.0], [1.69972494E12, 34779.0], [1.6997256E12, 37150.0], [1.6997253E12, 37529.0], [1.69972476E12, 33404.0], [1.699725E12, 37750.0], [1.69972536E12, 39540.0], [1.6997247E12, 13413.0], [1.69972506E12, 36505.0], [1.69972542E12, 37690.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69972512E12, 29815.799999999996], [1.69972548E12, 27032.500000000004], [1.69972518E12, 27359.000000000004], [1.69972488E12, 29221.8], [1.69972554E12, 26448.399999999998], [1.69972524E12, 28055.4], [1.69972482E12, 27463.0], [1.69972494E12, 30072.3], [1.6997256E12, 33470.2], [1.6997253E12, 26834.800000000003], [1.69972476E12, 13346.000000000005], [1.699725E12, 27695.4], [1.69972536E12, 27887.2], [1.6997247E12, 4117.5], [1.69972506E12, 28818.4], [1.69972542E12, 28290.500000000007]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69972512E12, 35097.26], [1.69972548E12, 34083.329999999994], [1.69972518E12, 33606.79999999997], [1.69972488E12, 34890.920000000006], [1.69972554E12, 34992.59], [1.69972524E12, 35144.399999999994], [1.69972482E12, 40365.520000000004], [1.69972494E12, 33832.28], [1.6997256E12, 36901.50999999999], [1.6997253E12, 34575.27000000001], [1.69972476E12, 27010.509999999984], [1.699725E12, 34617.41999999999], [1.69972536E12, 37304.919999999984], [1.6997247E12, 10533.489999999982], [1.69972506E12, 33035.74], [1.69972542E12, 35263.240000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69972512E12, 32246.3], [1.69972548E12, 29292.49999999998], [1.69972518E12, 31445.199999999997], [1.69972488E12, 31135.6], [1.69972554E12, 29896.8], [1.69972524E12, 30088.8], [1.69972482E12, 33414.399999999994], [1.69972494E12, 31797.199999999993], [1.6997256E12, 34440.149999999994], [1.6997253E12, 29831.249999999996], [1.69972476E12, 17237.449999999997], [1.699725E12, 31521.4], [1.69972536E12, 32254.2], [1.6997247E12, 6019.0999999999985], [1.69972506E12, 30583.0], [1.69972542E12, 31977.849999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69972512E12, 7.0], [1.69972548E12, 7.0], [1.69972518E12, 7.0], [1.69972488E12, 7.0], [1.69972554E12, 7.0], [1.69972524E12, 7.0], [1.69972482E12, 7.0], [1.69972494E12, 6.0], [1.6997256E12, 7.0], [1.6997253E12, 7.0], [1.69972476E12, 8.0], [1.699725E12, 8.0], [1.69972536E12, 7.0], [1.6997247E12, 8.0], [1.69972506E12, 7.0], [1.69972542E12, 7.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69972512E12, 15.0], [1.69972548E12, 12.0], [1.69972518E12, 22.0], [1.69972488E12, 469.0], [1.69972554E12, 12.0], [1.69972524E12, 13.0], [1.69972482E12, 495.0], [1.69972494E12, 492.0], [1.6997256E12, 26981.5], [1.6997253E12, 13.0], [1.69972476E12, 1742.0], [1.699725E12, 456.5], [1.69972536E12, 20.0], [1.6997247E12, 678.5], [1.69972506E12, 28.0], [1.69972542E12, 13.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997256E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 33879.0, "series": [{"data": [[2.0, 12.0], [32.0, 11.0], [3.0, 7548.0], [4.0, 211.5], [5.0, 556.0], [6.0, 12.0], [7.0, 514.5], [8.0, 34.5], [9.0, 34.0], [10.0, 13.0], [11.0, 482.0], [12.0, 18.0], [13.0, 507.0], [14.0, 474.0], [15.0, 510.0], [1.0, 29747.0], [16.0, 443.0], [17.0, 278.5], [18.0, 471.0], [19.0, 513.0], [20.0, 439.5], [21.0, 474.5], [22.0, 458.0], [23.0, 155.5], [24.0, 218.5], [25.0, 565.0], [26.0, 11.0], [27.0, 551.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 33494.0], [32.0, 33879.0], [3.0, 33468.0], [4.0, 33113.5], [5.0, 32423.5], [6.0, 32485.0], [7.0, 32741.5], [8.0, 33164.0], [9.0, 33348.0], [10.0, 32882.0], [11.0, 32966.0], [12.0, 32895.0], [13.0, 33692.0], [14.0, 33217.0], [15.0, 32287.5], [16.0, 33126.0], [17.0, 32366.0], [18.0, 33745.5], [19.0, 33513.0], [20.0, 32709.5], [21.0, 32212.0], [22.0, 32737.0], [23.0, 32051.0], [24.0, 31493.0], [25.0, 31451.0], [26.0, 31082.0], [27.0, 32808.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 33879.0, "series": [{"data": [[2.0, 12.0], [32.0, 11.0], [3.0, 7548.0], [4.0, 211.5], [5.0, 556.0], [6.0, 12.0], [7.0, 514.5], [8.0, 34.5], [9.0, 34.0], [10.0, 13.0], [11.0, 482.0], [12.0, 18.0], [13.0, 507.0], [14.0, 474.0], [15.0, 510.0], [1.0, 29747.0], [16.0, 443.0], [17.0, 278.5], [18.0, 471.0], [19.0, 513.0], [20.0, 439.5], [21.0, 474.5], [22.0, 458.0], [23.0, 155.5], [24.0, 218.5], [25.0, 565.0], [26.0, 11.0], [27.0, 551.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 33494.0], [32.0, 33879.0], [3.0, 33468.0], [4.0, 33113.5], [5.0, 32423.5], [6.0, 32485.0], [7.0, 32741.5], [8.0, 33164.0], [9.0, 33348.0], [10.0, 32882.0], [11.0, 32966.0], [12.0, 32895.0], [13.0, 33692.0], [14.0, 33217.0], [15.0, 32287.5], [16.0, 33126.0], [17.0, 32366.0], [18.0, 33745.5], [19.0, 33513.0], [20.0, 32709.5], [21.0, 32212.0], [22.0, 32737.0], [23.0, 32051.0], [24.0, 31493.0], [25.0, 31451.0], [26.0, 31082.0], [27.0, 32808.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0833333333333333, "minX": 1.6997247E12, "maxY": 14.416666666666666, "series": [{"data": [[1.69972512E12, 10.95], [1.69972548E12, 11.016666666666667], [1.69972518E12, 11.166666666666666], [1.69972488E12, 12.866666666666667], [1.69972554E12, 11.133333333333333], [1.69972524E12, 11.183333333333334], [1.69972482E12, 13.8], [1.69972494E12, 13.166666666666666], [1.6997256E12, 1.0833333333333333], [1.6997253E12, 10.8], [1.69972476E12, 14.416666666666666], [1.699725E12, 13.316666666666666], [1.69972536E12, 11.233333333333333], [1.6997247E12, 12.866666666666667], [1.69972506E12, 11.933333333333334], [1.69972542E12, 10.85]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997256E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6997247E12, "maxY": 13.433333333333334, "series": [{"data": [[1.69972512E12, 8.95], [1.69972548E12, 8.3], [1.69972518E12, 9.05], [1.69972488E12, 12.716666666666667], [1.69972554E12, 8.366666666666667], [1.69972524E12, 8.583333333333334], [1.69972482E12, 13.133333333333333], [1.69972494E12, 13.0], [1.6997256E12, 2.2], [1.6997253E12, 7.933333333333334], [1.69972476E12, 13.433333333333334], [1.699725E12, 12.633333333333333], [1.69972536E12, 8.883333333333333], [1.6997247E12, 11.966666666666667], [1.69972506E12, 10.683333333333334], [1.69972542E12, 8.333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6997253E12, 0.1], [1.69972518E12, 0.08333333333333333], [1.69972536E12, 0.06666666666666667], [1.69972506E12, 0.03333333333333333], [1.69972554E12, 0.016666666666666666], [1.69972524E12, 0.05], [1.69972482E12, 0.016666666666666666], [1.69972542E12, 0.03333333333333333]], "isOverall": false, "label": "422", "isController": false}, {"data": [[1.69972518E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.6997253E12, 0.016666666666666666], [1.69972518E12, 0.05], [1.69972536E12, 0.016666666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.69972512E12, 2.0], [1.69972548E12, 2.716666666666667], [1.69972518E12, 1.9666666666666666], [1.69972488E12, 0.15], [1.69972554E12, 2.75], [1.69972524E12, 2.55], [1.69972482E12, 0.5333333333333333], [1.69972494E12, 0.16666666666666666], [1.6997256E12, 0.8833333333333333], [1.6997253E12, 2.75], [1.699725E12, 0.6833333333333333], [1.69972536E12, 2.2666666666666666], [1.69972506E12, 1.2166666666666666], [1.69972542E12, 2.4833333333333334]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997256E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6997247E12, "maxY": 7.15, "series": [{"data": [[1.69972512E12, 2.0], [1.69972548E12, 2.716666666666667], [1.69972518E12, 1.9833333333333334], [1.69972488E12, 0.15], [1.69972554E12, 2.75], [1.69972524E12, 2.55], [1.69972482E12, 0.5333333333333333], [1.69972494E12, 0.16666666666666666], [1.6997256E12, 0.8833333333333333], [1.6997253E12, 2.716666666666667], [1.699725E12, 0.6833333333333333], [1.69972536E12, 2.3], [1.69972506E12, 1.2166666666666666], [1.69972542E12, 2.4833333333333334]], "isOverall": false, "label": "Cargar Tareas-failure", "isController": false}, {"data": [[1.69972512E12, 3.5], [1.69972548E12, 2.783333333333333], [1.69972518E12, 3.6333333333333333], [1.69972488E12, 6.25], [1.69972554E12, 2.8333333333333335], [1.69972524E12, 3.0166666666666666], [1.69972482E12, 6.183333333333334], [1.69972494E12, 6.45], [1.6997256E12, 1.3833333333333333], [1.6997253E12, 2.716666666666667], [1.69972476E12, 6.283333333333333], [1.699725E12, 5.916666666666667], [1.69972536E12, 3.283333333333333], [1.6997247E12, 5.7], [1.69972506E12, 4.766666666666667], [1.69972542E12, 2.9166666666666665]], "isOverall": false, "label": "Cargar Tareas-success", "isController": false}, {"data": [[1.69972512E12, 5.45], [1.69972548E12, 5.516666666666667], [1.69972518E12, 5.416666666666667], [1.69972488E12, 6.466666666666667], [1.69972554E12, 5.533333333333333], [1.69972524E12, 5.566666666666666], [1.69972482E12, 6.95], [1.69972494E12, 6.55], [1.6997256E12, 0.8166666666666667], [1.6997253E12, 5.216666666666667], [1.69972476E12, 7.15], [1.699725E12, 6.716666666666667], [1.69972536E12, 5.6], [1.6997247E12, 6.266666666666667], [1.69972506E12, 5.916666666666667], [1.69972542E12, 5.416666666666667]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.6997253E12, 0.15], [1.69972518E12, 0.13333333333333333], [1.69972536E12, 0.05], [1.69972506E12, 0.03333333333333333], [1.69972554E12, 0.016666666666666666], [1.69972524E12, 0.05], [1.69972482E12, 0.016666666666666666], [1.69972542E12, 0.03333333333333333]], "isOverall": false, "label": "Login-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997256E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.6997247E12, "maxY": 13.433333333333334, "series": [{"data": [[1.69972512E12, 8.95], [1.69972548E12, 8.3], [1.69972518E12, 9.05], [1.69972488E12, 12.716666666666667], [1.69972554E12, 8.366666666666667], [1.69972524E12, 8.583333333333334], [1.69972482E12, 13.133333333333333], [1.69972494E12, 13.0], [1.6997256E12, 2.2], [1.6997253E12, 7.933333333333334], [1.69972476E12, 13.433333333333334], [1.699725E12, 12.633333333333333], [1.69972536E12, 8.883333333333333], [1.6997247E12, 11.966666666666667], [1.69972506E12, 10.683333333333334], [1.69972542E12, 8.333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69972512E12, 2.0], [1.69972548E12, 2.716666666666667], [1.69972518E12, 2.1166666666666667], [1.69972488E12, 0.15], [1.69972554E12, 2.7666666666666666], [1.69972524E12, 2.6], [1.69972482E12, 0.55], [1.69972494E12, 0.16666666666666666], [1.6997256E12, 0.8833333333333333], [1.6997253E12, 2.8666666666666667], [1.699725E12, 0.6833333333333333], [1.69972536E12, 2.35], [1.69972506E12, 1.25], [1.69972542E12, 2.5166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997256E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

